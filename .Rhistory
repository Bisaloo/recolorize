} %>% enexprs()
steps <- {
fit <- recolorize2(img,bins = 3, cutoff = 50)
fit2 <- editLayers(fit, c(2, 5),
operations = "fill", px_sizes = 3)
} %>% enexprs
steps
rc_werner <- wernerColor(recluster_results)
rc_werner <- wernerColor(recluster_results)
img
img <- system.file("extdata/chongi.png", package = "recolorize")
img
library(recolorize)
recolorize_obj <- recolorize2(img, n_final = 1)
test <- splitByColor(img)
test <- splitByColor(recolorize_obj)
layers == "all"
layers = "all"
# check layers argument
if (layers == "all") {
layer_idx <- 1:nrow(recolorize_obj$centers)
} else if (is.numeric(layers)) {
# use all colors
layer_idx <- layers
} else {
stop("'layers' must be 'all' or a numeric vector of layer indices
matching the order of the color centers")
}
# get color centers
centers <- recolorize_obj$centers[layer_idx, ]
layer_idx
nrow(recolorize_obj$centers)
# make an empty list for the layer bitmaps
color_masks <- vector("list", length = length(layer_idx))
# convert pixel assignment to cimg object
img <- imager::as.cimg(recolorize_obj$pixel_assignments)
for (i in 1:length(layer_idx)) {
# get index
px <- imager::imsub(img) == layer_idx[i]
# get color layer as a bitmap
layer <- as.numeric(px)
dim(layer) <- dim(img)[1:2]
# store bitmap
color_masks[[i]] <- layer
}
plot_method = "overlay"
# get transparent pixset
alpha_px <- imager::imsub(img) == 0
rgb_img <- array_to_cimg(constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers))
rgb_img <- recoloredImage(recolorize_obj)
# make grayscale image
grimg <- imager::grayscale(imager::rm.alpha(rgb_img), drop = FALSE)
rgb_img <- recolorize:::array_to_cimg(constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers))
dim(rgb_img)
rgb_img <- recoloredImage(recolorize_obj)
rgb_img <- recolorize:::array_to_cimg(rgb_img)
# make grayscale image
grimg <- imager::grayscale(imager::rm.alpha(rgb_img), drop = FALSE)
grimg[alpha_px] <- 1
centers
centers[i, 1]
centers
matrix(centers, ncol = 3)
recolorize_obj <- recolorize2(img, n_final = 2)
img
im <- system.file("extdata/chongi.png", package = "recolorize")
recolorize_obj <- recolorize2(im, n_final = 2)
# check layers argument
if (layers == "all") {
layer_idx <- 1:nrow(recolorize_obj$centers)
} else if (is.numeric(layers)) {
# use all colors
layer_idx <- layers
} else {
stop("'layers' must be 'all' or a numeric vector of layer indices
matching the order of the color centers")
}
# get color centers
centers <- recolorize_obj$centers[layer_idx, ]
centers
matrix(centers, ncol = 3)
devtools::load_all(".")
recolorize_obj <- recolorize2(im, n_final = 1)
splitByColor(recolorize_obj)
plotColorPalette(recolorize_obj$centers)
plotColorPalette(recolorize_obj$centers, recolorize_obj$sizes)
devtools::load_all(".")
?col2col
?hclust_color
devtools::load_all(".")
devtools::load_all(".")
?adjustcolor
## Illustrative examples :
opal <- palette("default")
stopifnot(identical(adjustcolor(1:8,       0.75),
adjustcolor(palette(), 0.75)))
cbind(palette(), adjustcolor(1:8, 0.75))
devtools::load_all(".")
# make colors darker/lighter, more intense
plotColorPalette(palette())
palette()
# make colors darker/lighter, more intense
plotColorPalette(palette()[-1])
palette()[-1]
# make colors darker/lighter, more intense
plotColorPalette(palette()[-c(1, 8)])
plotColorPalette(adjustcolor(palette, 0.75))
plotColorPalette(adjustcolor(palette(), 0.75))
# make colors darker/lighter, more intense
p <- palette()
# make colors darker/lighter, more intense
p <- palette()
p[1] <- "#000000"
p[8] <- gray(0.62)
plotColorPalette(p)
plotColorPalette(adjustcolor(palette(), 0.75))
plotColorPalette(adjustcolor(palette(), 1.2))
plotColorPalette(adjustcolor(palette(), 1.5))
plotColorPalette(adjustcolor(palette(), 0.5))
p <- adjustcolor(p, 0.5)
plotColorPalette(p)
p <- col2rgb(p)
p
# make colors darker/lighter, more intense
p <- palette()
p[1] <- "#000000"
p[8] <- gray(0.62)
plotColorPalette(p)
plotColorPalette(p)
p <- adjustcolor(p, 0.5)
p <- t(col2rgb(p))
p
p <- p / 255
p
# convert to HSV
col2col(p)
# convert to HSV
as_hsv <- col2col(p)
# multiply
as_hsv * c(1, 1.1, 1.5)
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
saturation <- 1.1
brightness <- 1.5
# convert to HSV
as_hsv <- col2col(p)
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv > 1
# rescale
as_hsv[which(as_hsv > 1)] <- 1
as_hsv
# convert to HSV
as_hsv <- col2col(p, to = "hsv")
# convert to HSV
as_hsv <- col2col(p, to = "HSV")
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv[which(as_hsv > 1)] <- 1
# convert to RGB
as_rgb <- col2col()
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
as_rgb
# spit out
plotColorPalette(as_rgb)
?convertColor
user_par <- par()
adjust_color <- function(rgb_color,
saturation = 1,
brightness = 1, plotting = FALSE) {
# convert to HSV
as_hsv <- col2col(rgb_color, to = "HSV")
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv[which(as_hsv > 1)] <- 1
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
if (plotting) {
# courtesy:
current_par <- graphics::par()
layout(matrix(1:2, nrow = 2))
plotColorPalette(rgb_color)
plotColorPalette(as_rgb)
# be nice!
graphics::par(mfrow = current_par$mfrow,
mar = current_par$mar)
}
# spit out
return(as_rgb)
}
adjust_color(p, saturation = 1.1, brightness = 1.1, plotting = TRUE)
adjust_color(p, saturation = 1.5, brightness = 1.1, plotting = TRUE)
adjust_color(p, saturation = 1.5, brightness = 1.5, plotting = TRUE)
adjust_color(p, saturation = 1, brightness = 1.5, plotting = TRUE)
adjust_color(p, saturation = 1.5, brightness = 0.9, plotting = TRUE)
?palette
p
palette.colors(n = NULL, palette = "Okabe-Ito", alpha, recycle = FALSE)
palette.colors(n = NULL, palette = "Okabe-Ito", recycle = FALSE)
grDevices::palette.colors()
devtools::load_all(".")
rm(adjust_color())
rm(adjust_color
)
devtools::load_all(".")
?adjust_color
devtools::load_all(".")
?adjust_color
p <- grDevices::palette.colors()
adjust_color(p)
?col2col
devtools::load_all(".")
?adjust_color
p <- grDevices::palette.colors()
p <- t(col2rgb(p)/ 255 )
adjust_color(p)
p <- grDevices::palette.colors()
p <- t(col2rgb(p)/ 255 )
adjust_color(p)
p <- grDevices::palette.colors()
p <- t(col2rgb(p)/ 255 )
adjust_color(p, plotting = T)
adjust_color(p, saturation = 1.5, brightness = 1.1, plotting = TRUE)
devtools::load_all(".")
?adjust_color
p <- grDevices::palette.colors()
p <- t(col2rgb(p)/ 255 )
p_1 <- adjust_color(p, saturation = 1.5,
brightness = 1.1,
plotting = TRUE)
p_2 <- adjust_color(p,
saturation = rep(c(0.5, 1, 1.5), 3),
brightness = rep(c(0.5, 1, 1.5), 3))
p <- grDevices::palette.colors()
p <- t(col2rgb(p)/ 255 )
p_1 <- adjust_color(p, saturation = 1.5,
brightness = 1.1,
plotting = TRUE)
p_2 <- adjust_color(p,
saturation = rep(c(0.5, 1, 1.5), 3),
brightness = rep(c(0.5, 1, 1.5), 3), plotting = T)
#'
#' @param rgb_color Matrix of RGB colors (0-1 scale).
#' @param saturation Factor by which to multiply saturation. > 1 = more saturated,
#' < 1 = less saturated.
#' @param brightness Factor by which to multiply brightness.
#' @param plotting Logical. Plot resulting color palettes?
#'
#' @return A matrix of adjusted RGB colors.
#'
#' @examples
p <- grDevices::palette.colors()
# or
p_2 <- adjust_color(p,
saturation = seq(0, 2, length.out = 8),
brightness = seq(2, 0, length.out = 8))
devtools::load_all(".")
devtools::load_all(".")
# generate a palette:
p <- grDevices::palette.colors()
# convert to RGB using col2rgb, then divide by 255 to get it into a
# 0-1 range:
p <- t(col2rgb(p)/ 255 )
# we can adjust the saturation and brightness by the same factor:
p_1 <- adjust_color(p, saturation = 1.5,
brightness = 1.1,
plotting = TRUE)
# we can adjust the saturation and brightness by the same factor:
p_1 <- adjust_color(p, saturation = 2,
brightness = 1.5,
plotting = TRUE)
# we can adjust the saturation and brightness by the same factor:
p_1 <- adjust_color(p, saturation = 2,
brightness = 1,
plotting = TRUE)
# we can adjust the saturation and brightness by the same factor:
p_1 <- adjust_color(p, saturation = 2,
brightness = 1.5,
plotting = TRUE)
# or
p_2 <- adjust_color(p,
saturation = seq(0, 2, length.out = 8),
brightness = seq(2, 0, length.out = 8))
seq(0, 2, length.out = 8)
p
nrow(p)
# or
p_2 <- adjust_color(p,
saturation = seq(0, 2, length.out = 9),
brightness = seq(2, 0, length.out = 9))
# or
p_2 <- adjust_color(p,
saturation = seq(0, 2, length.out = 9),
brightness = seq(2, 0, length.out = 9),
plotting = TRUE)
# or we can pass a vector
p_2 <- adjust_color(p,
saturation = seq(0, 2, length.out = 9),
plotting = TRUE)
p
p <- p[1, ]
p
length(p)
dim(p)
is.matrix(p)
as.matrix(p)
as.matrix(p, ncol = 3, byrow = TRUE)
matrix(p, ncol = 3, byrow = TRUE)
# generate a palette:
p <- grDevices::palette.colors()
# convert to RGB using col2rgb, then divide by 255 to get it into a
# 0-1 range:
p <- t(col2rgb(p)/ 255 )
matrix(p, ncol = 3, byrow = TRUE)
p
matrix(p, ncol = 3)
matrix(p[1, ], ncol = 3)
m1 <- matrix(0, nrow = 10, ncol = 3)
m1
m1[c(3, 5, 8), ] <- matrix(1, nrow = 3, ncol = 3)
m1
m1[c(3, 5, 8), ] <- matrix(1:9, nrow = 3, ncol = 3)
m1
m1[c(3, 5, 8), ] <- matrix(1:9, nrow = 3, ncol = 3, byrow = T)
m1
f <- function(rgb_color,
which_colors = "all",
saturation = 1,
brightness = 1,
plotting = FALSE) {
rgb_color <- matrix(rgb_color, ncol = 3)
if (which_colors == "all") {
which_colors <- 1:nrow(rgb_color)
}
# convert to HSV
as_hsv <- col2col(rgb_color[which_colors, ], to = "HSV")
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv[which(as_hsv > 1)] <- 1
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
rgb_color[which_colors, ] <- as_rgb
if (plotting) {
# courtesy:
current_par <- graphics::par()
layout(matrix(1:2, nrow = 2))
par(mar = rep(1, 4))
plotColorPalette(rgb_color)
plotColorPalette(as_rgb)
# be nice!
graphics::par(mfrow = current_par$mfrow,
mar = current_par$mar)
}
# spit out
return(as_rgb)
}
p
f <- function(rgb_color,
which_colors = "all",
saturation = 1,
brightness = 1,
plotting = FALSE) {
original_rgb <- rgb_color
rgb_color <- matrix(rgb_color, ncol = 3)
if (which_colors == "all") {
which_colors <- 1:nrow(rgb_color)
}
# convert to HSV
as_hsv <- col2col(rgb_color[which_colors, ], to = "HSV")
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv[which(as_hsv > 1)] <- 1
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
rgb_color[which_colors, ] <- as_rgb
if (plotting) {
# courtesy:
current_par <- graphics::par()
layout(matrix(1:2, nrow = 2))
par(mar = rep(1, 4))
plotColorPalette(original_rgb)
plotColorPalette(rgb_color)
# be nice!
graphics::par(mfrow = current_par$mfrow,
mar = current_par$mar)
}
# spit out
return(rgb_color)
}
f(p, which_colors = 3, saturation = 2, plotting = TRUE)
original_rgb <- rgb_color
rgb_color <- p
original_rgb <- rgb_color
rgb_color <- matrix(rgb_color, ncol = 3)
which_colors = 3
if (which_colors == "all") {
which_colors <- 1:nrow(rgb_color)
}
# convert to HSV
as_hsv <- col2col(rgb_color[which_colors, ], to = "HSV")
rgb_color[which_colors, ]
f <- function(rgb_color,
which_colors = "all",
saturation = 1,
brightness = 1,
plotting = FALSE) {
original_rgb <- rgb_color
if (which_colors == "all") {
which_colors <- 1:nrow(rgb_color)
}
# convert to HSV
rgb_color <- matrix(rgb_color[which_colors, ], ncol = 3)
as_hsv <- col2col(rgb_color, to = "HSV")
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv[which(as_hsv > 1)] <- 1
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
rgb_color[which_colors, ] <- as_rgb
if (plotting) {
# courtesy:
current_par <- graphics::par()
layout(matrix(1:2, nrow = 2))
par(mar = rep(1, 4))
plotColorPalette(original_rgb)
plotColorPalette(rgb_color)
# be nice!
graphics::par(mfrow = current_par$mfrow,
mar = current_par$mar)
}
# spit out
return(rgb_color)
}
f(p, which_colors = 3, saturation = 2, plotting = TRUE)
rgb_color
original_rgb <- rgb_color
if (which_colors == "all") {
which_colors <- 1:nrow(rgb_color)
}
# convert to HSV
rgb_color <- matrix(rgb_color[which_colors, ], ncol = 3)
rgb_color
as_hsv <- col2col(rgb_color, to = "HSV")
as_hsv
saturation
saturation = 2
brightness = 1
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
as_hsv
# rescale
as_hsv[which(as_hsv > 1)] <- 1
as_hsv
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
as_rgb
rgb_color
f <- function(rgb_color,
which_colors = "all",
saturation = 1,
brightness = 1,
plotting = FALSE) {
original_rgb <- rgb_color
if (which_colors == "all") {
which_colors <- 1:nrow(rgb_color)
}
# convert to HSV
rgb_color_temp <- matrix(rgb_color[which_colors, ], ncol = 3)
as_hsv <- col2col(rgb_color_temp, to = "HSV")
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv[which(as_hsv > 1)] <- 1
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
rgb_color[which_colors, ] <- as_rgb
if (plotting) {
# courtesy:
current_par <- graphics::par()
layout(matrix(1:2, nrow = 2))
par(mar = rep(1, 4))
plotColorPalette(original_rgb)
plotColorPalette(rgb_color)
# be nice!
graphics::par(mfrow = current_par$mfrow,
mar = current_par$mar)
}
# spit out
return(rgb_color)
}
f(p, which_colors = 3, saturation = 2, plotting = TRUE)
f(p, which_colors = 3, saturation = 2, brightness = 2, plotting = TRUE)
f(p, which_colors = 4,
saturation = 2,
brightness = 2, plotting = TRUE)
