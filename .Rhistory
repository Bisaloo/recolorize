# the indices of bg.indexed$non.bg
pix.idx <- which(color.clusters$pixel.assignments == i)
# if no pixels were assigned to that cluster, mark it
if (length(pix.idx) == 0) {
core.removal <- c(core.removal, i)
next
} else {
# repeat the new color for a substitute matrix
replacements <- matrix(new.color, ncol = 3, byrow = TRUE,
nrow = length(pix.idx))
# and stick it back in!
pix.recolor[pix.idx, 1:3] <- replacements
}
}
# slot new pixels back in
recolored.img <- bg.indexed$flattened.img
# if there's no background...
if (length(bg.indexed$idx.flat) == 0) {
recolored.img <- pix.recolor
} else {
recolored.img[-bg.indexed$idx.flat, ] <- pix.recolor
# color background in white or transparent
if (bg.recolor == "white") {
recolored.img[bg.indexed$idx.flat, ] <- 1
} else if (bg.recolor == "transparent") {
if (bg.indexed$img.dims[3] == 4) {
recolored.img[bg.indexed$idx.flat , 4] <- 0
} else {
alpha.channel <- rep(1, nrow(recolored.img))
alpha.channel[bg.indexed$idx.flat] <- 0
recolored.img <- cbind(recolored.img, alpha.channel)
colnames(recolored.img) <- NULL
bg.indexed$img.dims[3] <- 4
}
}
}
bg.recolor = "transparent"
# if there's no background...
if (length(bg.indexed$idx.flat) == 0) {
recolored.img <- pix.recolor
} else {
recolored.img[-bg.indexed$idx.flat, ] <- pix.recolor
# color background in white or transparent
if (bg.recolor == "white") {
recolored.img[bg.indexed$idx.flat, ] <- 1
} else if (bg.recolor == "transparent") {
if (bg.indexed$img.dims[3] == 4) {
recolored.img[bg.indexed$idx.flat , 4] <- 0
} else {
alpha.channel <- rep(1, nrow(recolored.img))
alpha.channel[bg.indexed$idx.flat] <- 0
recolored.img <- cbind(recolored.img, alpha.channel)
colnames(recolored.img) <- NULL
bg.indexed$img.dims[3] <- 4
}
}
}
bg.indexed$img.dims[3]
devtools::load_all(".")
imposeColors(images[1], test$centers)
# read in image
img <- readImage(img.path, resize = resize, rotate = rotate)
# make background condition
alpha.channel <- dim(img)[3] == 4 # is there a transparency channel?
bg.condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha.channel = alpha.channel)
# index background
bg.indexed <- backgroundIndex(img, bg.condition)
# flatten it first -- faster indexing!
img.dims <- c(dim(img)[1], dim(img)[2], 3)
img.dims
flattened.img <- img
devtools::load_all(".")
# index background
bg.indexed <- backgroundIndex(img, bg.condition)
imposeColors(images[1], test$centers)
recolorize(images[1], n = 4)
recolorize(images[2], n = 4)
recolorize(images[2], n = 5)
kfifty <- recolorize(images[2], n = 50)
kfifty <- recolorize(images[2], n = 100)
kfive <- kmeans(kfifty$centers, 5)
imposeColors(images[2], kfive$centers)
imposeColors(images[2], kfive$centers)
recolorize(images[2], n = 5)
kthousand <- recolorize(images[2], n = 1000)
kfive <- kmeans(kfifty$centers, 5)
kfive <- kmeans(kthousand$centers, 5)
imposeColors(images[2], kfive$centers)
kmed <- cluster::pamk(kthousand$centers)
kmed <- cluster::pam(kthousand$centers, k = 5)
imposeColors(images[2], kmed$medoids)
install.packages("fpc")
kfpc <- fpc::pamk(kthousand$centers)
imposeColors(images[2], kfpc$pamobject$medoids)
backgroundCondition(lower = rep(0.9, 3), upper = rep(1, 3))
bg.condition <-backgroundCondition(lower = rep(0.9, 3), upper = rep(1, 3))
bg.indexed <- backgroundIndex(images[1], bg.condition)
bg.condition
img <- png::readPNG(images[1])
bg.indexed <- backgroundIndex(images[1], bg.condition)
bg.indexed <- backgroundIndex(img, bg.condition)
img2 <- bg.indexed$flattened.img
dim(img2) <- bg.indexed$img.dims
recolorize::plotImageArray(img2)
img <- png::readPNG(images[1])
bg.indexed <- backgroundIndex(img, bg.condition)
img2 <- bg.indexed$flattened.img
dim(img2) <- bg.indexed$img.dims
recolorize::plotImageArray(img2)
recolorize::plotImageArray(img)
devtools::load_all(".")
?imposeColors
ctrs <- matrix(c(1, 1, 1,
0, 0, 0,
1, 0, 0,
0, 1, 0,
0, 0, 1,
1, 1, 0,
1, 0, 1,
0, 1, 1), byrow = TRUE, ncol = 3)
recolorize::plotColorPalette(ctrs)
ocellata <- system.file("extdata/ocellata.png", package = "recolorize")
recolorize::imposeColors(ocellata, ctrs, adjust.centers = FALSE)
recolorize::imposeColors(ocellata, ctrs, adjust.centers = TRUE)
images
ocellata.colors <- recolorize(ocellata)
recolorize::imposeColors(images[4], ocellata.colors$centers)
recolorize::imposeColors(images[4], ocellata.colors$centers, adjust.centers = FALSE)
ocellata.colors <- recolorize(ocellata, methods = "hist", bins = 2)
ocellata.colors <- recolorize(ocellata, method = "hist", bins = 2)
recolorize::imposeColors(images[4], ocellata.colors$centers, adjust.centers = FALSE)
test <- plotColorPalette(ctrs)
test
plot(test)
test
rand.colors <- matrix(runif(30), ncol = 3)
plotColorPalette(rand.colors)
runif(10, max = 1000)
sizes <- runif(10, max = 1000)
plotColorPalette(rand.colors, sizes = sizes)
order(sizes)
sizes
size.order <- order(sizes)
plotColorPalette(rand.colors[size.order, ], sizes[size.order])
array(runif(100*100*3), dim = c(100, 100, 3))
random.colors <- array(runif(100*100*3), dim = c(100, 100, 3))
plotImageArray(random.colors)
system.file("extdata/corbetti.png", package = "recolorize")
img <- png::readPNG(system.file("extdata/corbetti.png", package = "recolorize"))
plot(img)
img
plotImageArray(img)
corbetti ,- system.file("extdata/corbetti.png", package = "recolorize")
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
corbetti.recolor <- recolorize(corbetti, method = "hist")
corbetti.recolor <- recolorize(corbetti, method = "hist", bins = 2)
corbetti.recolor <- recolorize(corbetti, method = "hist", bins = 2, plotting = F)
plotRecolorized(corbetti.recolor$recolored.img, corbetti.recolor$original.img, corbetti.recolor$centers)
plotRecolorized(corbetti.recolor$recolored.img, corbetti.recolor$original.img, color.centers = corbetti.recolor$centers)
plotRecolorized(corbetti.recolor$recolored.img, corbetti.recolor$original.img, color.centers = corbetti.recolor$centers, horiz = TRUE)
plotRecolorized(corbetti.recolor$recolored.img, plot.original = F, color.centers = corbetti.recolor$centers, horiz = TRUE)
devtools::load_all(".")
plotRecolorized(corbetti.recolor$recolored.img, plot.original = F, color.centers = corbetti.recolor$centers, horiz = TRUE)
plotRecolorized(corbetti.recolor$recolored.img, plot.original = F, color.centers = corbetti.recolor$centers, horiz = TRUE, sizes = corbetti.recolor$sizes)
plotRecolorized(corbetti.recolor$recolored.img, plot.original = F, color.centers = corbetti.recolor$centers, horiz = F, sizes = corbetti.recolor$sizes)
test <- readImage(corbetti, rotate = 45)
plotImageArray(test)
?colorClusters
img <- array(runif(30000), dim = c(100, 100, 3))
plotImageArray(img)
img.2d <- img
dim(img.2d) <- c(100 * 100, 3)
hist.clusters <- colorClusters(img.2d, method = "hist", bins = 2)
hist.clusters
images <- list.files("inst/extdata/", full.names = TRUE)
img <- png::readPNG(images[1])
bg.condition <- backgroundCondition(transparent = T)
bg.indexed <- backgroundIndex(img, bg.condition)
img <- png::readPNG(images[1])
bg.condition <- backgroundCondition(transparent = T)
bg.indexed <- backgroundIndex(img, bg.condition)
bg.condition
bg.condition <- backgroundCondition(transparent = T, alpha.channel = T)
bg.indexed <- backgroundIndex(img, bg.condition)
bg.condition
bg.condition <- "transparent"
class(bg.condition) <- "bg.t"
bg.condition
bg.indexed <- backgroundIndex(img, bg.condition)
color.clusters <- colorClusters(bg.indexed, method = "kmeans", n = 10)
color.clusters <- colorClusters(bg.indexed$non.bg, method = "kmeans", n = 10)
recolored.img <- recolorImage(bg.indexed, color.clusters, plotting = T)
shuffle
m <- color.clusters$centers
sample(1:nrow(m), nrow(m))
m[sample(1:nrow(m), nrow(m)), ]
# chaos
shuffle <- function(m) {
m[sample(1:nrow(m), nrow(m)), ]
}
color.clusters$centers <- shuffle(color.clusters$centers)
recolored.img <- recolorImage(bg.indexed, color.clusters, plotting = T)
img <- png::readPNG(images[2])
img <- png::readPNG(images[2])
plotImageArray(img)
layout(c(1, 2, 3))
plotImageArray(img)
layout(matrix(c(1, 2, 3), ncol = 1))
plotImageArray(img)
layout(matrix(c(1, 2, 3), ncol = 3))
plotImageArray(img)
# ok, the normal way:
bg.condition <- "transparent"
class(bg.condition) <- "bg.t"
bg.indexed <- backgroundIndex(img, bg.condition)
color.clusters <- colorClusters(bg.indexed$non.bg,
method = "kmeans",
n = 10)
recolored.img <- recolorImage(bg.indexed, color.clusters, plotting = T)
# chaos
shuffle <- function(m) {
m[sample(1:nrow(m), nrow(m)), ]
}
color.clusters$centers <- shuffle(color.clusters$centers)
chaos <- recolorImage(bg.indexed, color.clusters, plotting = T)
color.clusters$centers <- shuffle(color.clusters$centers)
chaos <- recolorImage(bg.indexed, color.clusters, plotting = T)
color.clusters$centers <- shuffle(color.clusters$centers)
chaos <- recolorImage(bg.indexed, color.clusters, plotting = T)
color.clusters$centers <- shuffle(color.clusters$centers)
chaos <- recolorImage(bg.indexed, color.clusters, plotting = T)
recolorize(images[2], n = 5)
img.path <- images[2]
img <- png::readPNG(img.path)
bg.condition <- backgroundCondition(transparent = TRUE,
alpha.channel = TRUE)
bg.indexed <- backgroundIndex(img, bg.condition)
# normal things
kmeans.colors <- colorClusters(bg.indexed$non.bg,
method = "kmeans",
n = 5)
hist.colors <- colorClusters(bg.indexed$non.bg,
method = "hist", bins = 2)
# stupid things
shuffle <- function(m) {
m[sample(1:nrow(m), nrow(m)), ]
}
kmeans.shuffle <- kmeans.colors
kmeans.shuffle$centers <- shuffle(kmeans.shuffle$centers)
hist.shuffle <- hist.colors
hist.shuffle$centers <- shuffle(hist.shuffle$centers)
# recoloring...
kmeans.recolor <- recolorImage(bg.indexed, kmeans.colors)
hist.recolor <- recolorImage(bg.indexed, hist.colors)
kmeans.chaos <- recolorImage(bg.indexed, kmeans.shuffle)
hist.chaos <- recolorImage(bg.indexed, hist.shuffle)
layout(matrix(c(1, 2, 3, 4, 5),
ncol = 3))
layout(matrix(c(1, 2, 3, 4, 5),
ncol = 5))
plotImageArray(img, main = "original")
plotImage(kmeans.recolor$recolored.img, main = "kmeans")
plotImageArray(kmeans.recolor$recolored.img, main = "kmeans")
plotImageArray(hist.recolor$recolored.img, main = "binning")
plotImageArray(kmeans.chaos$recolored.img, main = "oops")
plotImageArray(hist.chaos$recolored.img, main = "OOPS!!")
why_are_you_like_this <- function(img.path) {
img <- png::readPNG(img.path)
bg.condition <- backgroundCondition(transparent = TRUE,
alpha.channel = TRUE)
bg.indexed <- backgroundIndex(img, bg.condition)
# normal things
kmeans.colors <- colorClusters(bg.indexed$non.bg,
method = "kmeans",
n = 5)
hist.colors <- colorClusters(bg.indexed$non.bg,
method = "hist", bins = 2)
# stupid things
shuffle <- function(m) {
m[sample(1:nrow(m), nrow(m)), ]
}
kmeans.shuffle <- kmeans.colors
kmeans.shuffle$centers <- shuffle(kmeans.shuffle$centers)
hist.shuffle <- hist.colors
hist.shuffle$centers <- shuffle(hist.shuffle$centers)
# recoloring...
kmeans.recolor <- recolorImage(bg.indexed, kmeans.colors)
hist.recolor <- recolorImage(bg.indexed, hist.colors)
kmeans.chaos <- recolorImage(bg.indexed, kmeans.shuffle)
hist.chaos <- recolorImage(bg.indexed, hist.shuffle)
layout(matrix(c(1, 2, 3, 4, 5),
ncol = 5))
plotImageArray(img, main = "original")
plotImageArray(kmeans.recolor$recolored.img, main = "kmeans")
plotImageArray(hist.recolor$recolored.img, main = "binning")
plotImageArray(kmeans.chaos$recolored.img, main = "oops")
plotImageArray(hist.chaos$recolored.img, main = "OOPS!!")
}
why_are_you_like_this(images[1])
why_are_you_like_this(images[2])
why_are_you_like_this(images[3])
why_are_you_like_this(images[4])
why_are_you_like_this(images[5])
images
why_are_you_like_this(images[6])
images <- list.files("inst/extdata/", pattern = "png", full.names = TRUE)
sapply(images, why_are_you_like_this)
plotImageArray(kmeans.chaos$recolored.img, main = "i did this on purpose")
why_are_you_like_this <- function(img.path) {
img <- png::readPNG(img.path)
bg.condition <- backgroundCondition(transparent = TRUE,
alpha.channel = TRUE)
bg.indexed <- backgroundIndex(img, bg.condition)
# normal things
kmeans.colors <- colorClusters(bg.indexed$non.bg,
method = "kmeans",
n = 5)
hist.colors <- colorClusters(bg.indexed$non.bg,
method = "hist", bins = 2)
# stupid things
shuffle <- function(m) {
m[sample(1:nrow(m), nrow(m)), ]
}
kmeans.shuffle <- kmeans.colors
kmeans.shuffle$centers <- shuffle(kmeans.shuffle$centers)
hist.shuffle <- hist.colors
hist.shuffle$centers <- shuffle(hist.shuffle$centers)
# recoloring...
kmeans.recolor <- recolorImage(bg.indexed, kmeans.colors)
hist.recolor <- recolorImage(bg.indexed, hist.colors)
kmeans.chaos <- recolorImage(bg.indexed, kmeans.shuffle)
hist.chaos <- recolorImage(bg.indexed, hist.shuffle)
layout(matrix(c(1, 2, 3, 4, 5),
ncol = 5))
plotImageArray(img, main = "original")
plotImageArray(kmeans.recolor$recolored.img, main = "kmeans")
plotImageArray(hist.recolor$recolored.img, main = "binning")
plotImageArray(kmeans.chaos$recolored.img, main = "i did this on purpose")
plotImageArray(hist.chaos$recolored.img, main = "I MEAN IT")
}
sapply(images, why_are_you_like_this)
why_are_you_like_this <- function(img.path) {
img <- png::readPNG(img.path)
bg.condition <- backgroundCondition(transparent = TRUE,
alpha.channel = TRUE)
bg.indexed <- backgroundIndex(img, bg.condition)
# normal things
kmeans.colors <- colorClusters(bg.indexed$non.bg,
method = "kmeans",
n = 5)
hist.colors <- colorClusters(bg.indexed$non.bg,
method = "hist", bins = 2)
# stupid things
shuffle <- function(m) {
m[sample(1:nrow(m), nrow(m)), ]
}
kmeans.shuffle <- kmeans.colors
kmeans.shuffle$centers <- shuffle(kmeans.shuffle$centers)
hist.shuffle <- hist.colors
hist.shuffle$centers <- shuffle(hist.shuffle$centers)
# recoloring...
kmeans.recolor <- recolorImage(bg.indexed, kmeans.colors)
hist.recolor <- recolorImage(bg.indexed, hist.colors)
kmeans.chaos <- recolorImage(bg.indexed, kmeans.shuffle)
hist.chaos <- recolorImage(bg.indexed, hist.shuffle)
layout(matrix(c(1, 2, 3, 4, 5),
ncol = 5))
plotImageArray(img, main = "original")
plotImageArray(kmeans.recolor$recolored.img, main = "kmeans")
plotImageArray(hist.recolor$recolored.img, main = "binning")
plotImageArray(kmeans.chaos$recolored.img, main = "I did this on purpose")
plotImageArray(hist.chaos$recolored.img, main = "I MEAN IT")
}
sapply(images, why_are_you_like_this)
dir.create("../output/")
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])), res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 10, height = 5,
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 10, height = 5,units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
why_are_you_like_this <- function(img.path) {
img <- png::readPNG(img.path)
bg.condition <- backgroundCondition(transparent = TRUE,
alpha.channel = TRUE)
bg.indexed <- backgroundIndex(img, bg.condition)
# normal things
kmeans.colors <- colorClusters(bg.indexed$non.bg,
method = "kmeans",
n = 5)
hist.colors <- colorClusters(bg.indexed$non.bg,
method = "hist", bins = 2)
# stupid things
shuffle <- function(m) {
m[sample(1:nrow(m), nrow(m)), ]
}
kmeans.shuffle <- kmeans.colors
kmeans.shuffle$centers <- shuffle(kmeans.shuffle$centers)
hist.shuffle <- hist.colors
hist.shuffle$centers <- shuffle(hist.shuffle$centers)
# recoloring...
kmeans.recolor <- recolorImage(bg.indexed, kmeans.colors)
hist.recolor <- recolorImage(bg.indexed, hist.colors)
kmeans.chaos <- recolorImage(bg.indexed, kmeans.shuffle)
hist.chaos <- recolorImage(bg.indexed, hist.shuffle)
layout(matrix(c(1, 2, 3, 4, 5),
ncol = 5))
plotImageArray(img, main = "original")
plotImageArray(kmeans.recolor$recolored.img, main = "kmeans")
plotImageArray(hist.recolor$recolored.img, main = "binning")
plotImageArray(kmeans.chaos$recolored.img, main = "I did this on purpose")
plotImageArray(hist.chaos$recolored.img, main = "THIS TOO I MEAN IT")
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
png(paste0("../output/", basename(images[2])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
i
i = 5
i = 2
png(paste0("../output/", basename(images[2])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[2])
dev.off()
png(paste0("../output/", basename(images[2])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[2])
dev.off()
png(paste0("../output/", basename(images[2])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[2])
dev.off()
png(paste0("../output/", basename(images[2])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[2])
dev.off()
png(paste0("../output/", basename(images[2])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[2])
dev.off()
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
