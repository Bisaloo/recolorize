?rasterToPolygons
border
border[[1]]
border[1,]
plot(border[1,])
axis(1)
px <- as.cimg(i) > 0
border <- rasterToPolygons(i,
fun = function(x) x > 0)
border <- rasterToPolygons(raster(i),
fun = function(x) x > 0)
plot(border)
dim(raster(i))
dim(i)
border <- rasterToPolygons(raster(i),
fun = function(x) x > 0,
digits = 1)
plot(border)
border <- rasterToPolygons(raster(i),
fun = function(x) x > 0,
n = 8)
plot(border)
px <- as.cimg(i) > 0
border <- boundary(px)
border <- recolorize:::cimg_to_array(border)
border <- raster::raster(border)
border <- rasterToPolygons(border,
fun = function(x) x > 0,
n = 8)
plot(border)
plot(border, asp = 1)
border <- rasterToPolygons(raster(i),
fun = function(x) x > 0)
test <- sf::st_as_sf(border)
plot(test)
plot(test, fill = grey(0.7))
plot(test, col = grey(0.7))
dim(border)
dim(px)
dim(px)[1] / dim(px)[1]
dim(px)[1] / dim(px)[2]
plot(border, asp = dim(px)[1] / dim(px)[2])
plot(border[1:50, ], asp = dim(px)[1] / dim(px)[2])
plot(border[1:500, ], asp = dim(px)[1] / dim(px)[2])
plot(border[1:100, ], asp = dim(px)[1] / dim(px)[2])
plot(border[1:1000, ], asp = dim(px)[1] / dim(px)[2])
border <- rasterToPolygons(border,
fun = function(x) x > 0)
px <- as.cimg(i) > 0
border <- boundary(px)
border <- recolorize:::cimg_to_array(border)
border <- raster::raster(border)
border <- rasterToPolygons(border,
fun = function(x) x > 0)
plot(border)
plot(border, asp = 2)
?gUnaryUnion
?rgeos::gUnaryUnion
rgeos::gUnaryUnion(border)
test <- rgeos::gUnaryUnion(border)
plot(test)
border <- rasterToPolygons(raster(i),
fun = function(x) x > 0)
test <- rgeos::gUnaryUnion(border)
plot(test)
plot(test, asp = 2, col = "grey")
plot(test, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test)
plot(test2, asp = 2)
?smoothr::smooth
test2 <- smoothr::smooth_chaikin(test, refinements = 20)
class(test)
test2 <- smoothr::smooth_densify(test, n = 15)
test2 <- smoothr::smooth(test, method = "chaikin", refinements = 20)
test2 <- smoothr::smooth(test, method = "chaikin", refinements = 10)
plot(test2)
test2 <- smoothr::smooth(test, method = "ksmooth", smoothness = 1.5)
plot(test2)
test2 <- smoothr::smooth(test, method = "ksmooth", smoothness = 3)
plot(test2)
test2 <- smoothr::smooth(test, method = "ksmooth", smoothness = 5)
plot(test2)
plot(test2, asp = 2, fill = "bisque")
plot(test2, asp = 2, coll = "bisque")
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "spline", vertex_factor = 3)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "spline", vertex_factor = 10)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "densify", n = 10)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "densify", n = 30)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "chaikin", refinements = 10)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "ksmooth", smoothness = 5, n = 5)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "ksmooth", smoothness = 1, n = 5)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "ksmooth", smoothness = 1, n = 10)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "ksmooth", smoothness = 2, n = 10)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "ksmooth", smoothness = 3, n = 10)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "ksmooth", smoothness = 4, n = 10)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "ksmooth", smoothness = 4, n = 1)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "ksmooth", bandwidth = 10)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "ksmooth", bandwidth = 2)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "ksmooth", bandwidth = 100)
plot(test2, asp = 2, col = "bisque")
test2 <- smoothr::smooth(test, method = "ksmooth", smoothness = 6)
plot(test2, asp = 2, col = "bisque")
plot(test2, asp = 2, col = "bisque", border = "bisque")
pol <- rasterToPolygons(raster(i),
fun = function(x) x > 0)
pol <- rgeos::gUnaryUnion(pol)
rgb(rc$centers)
layers <- splitByColor(rc, plot_method = "none")
for (i in 1:length(layers)) {
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0)
pol <- rgeos::gUnaryUnion(pol)
col <- rgb(rc$centers[i, ])
if (i == 1) {
plot(pol, col = col, border = col)
} else {
plot(pol, col = col, border = col, add = TRUE)
}
}
rc$centers[i, ]
rgb(rc$centers)
layers <- splitByColor(rc, plot_method = "none")
for (i in 1:length(layers)) {
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0)
pol <- rgeos::gUnaryUnion(pol)
col <- rgb(rc$centers)[i]
if (i == 1) {
plot(pol, col = col, border = col)
} else {
plot(pol, col = col, border = col, add = TRUE)
}
}
plot(pol)
dim(pol)
dim(layers[[i]])
layers <- splitByColor(rc, plot_method = "none")
for (i in 1:length(layers)) {
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0)
pol <- rgeos::gUnaryUnion(pol)
pol <- smoothr::smooth(pol, "ksmooth", smoothness = 5)
col <- rgb(rc$centers)[i]
if (i == 1) {
plot(pol, col = col, border = col,
asp = dim(layers[[i]])[1] / dim(layers[[i]]) / 2)
} else {
plot(pol, col = col, border = col, add = TRUE)
}
}
dim(layers[[i]])[1]
layers <- splitByColor(rc, plot_method = "none")
for (i in 1:length(layers)) {
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0)
pol <- rgeos::gUnaryUnion(pol)
pol <- smoothr::smooth(pol, "ksmooth", smoothness = 5)
col <- rgb(rc$centers)[i]
if (i == 1) {
plot(pol, col = col, border = col,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2])
} else {
plot(pol, col = col, border = col, add = TRUE)
}
}
for (i in 1:length(layers)) {
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0)
pol <- rgeos::gUnaryUnion(pol)
pol <- smoothr::smooth(pol, "ksmooth", smoothness = 4)
col <- rgb(rc$centers)[i]
if (i == 1) {
plot(pol, col = col, border = col,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2])
} else {
plot(pol, col = col, border = col, add = TRUE)
}
}
layers <- splitByColor(rc, plot_method = "none")
for (i in 1:length(layers)) {
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0)
pol <- rgeos::gUnaryUnion(pol)
pol <- smoothr::smooth(pol, "ksmooth", smoothness = 3)
col <- rgb(rc$centers)[i]
if (i == 1) {
plot(pol, col = col, border = col,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2])
} else {
plot(pol, col = col, border = col, add = TRUE)
}
}
for (i in 1:length(layers)) {
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0)
pol <- rgeos::gUnaryUnion(pol)
pol <- smoothr::smooth(pol, "ksmooth", smoothness = 2)
col <- rgb(rc$centers)[i]
if (i == 1) {
plot(pol, col = col, border = col,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2])
} else {
plot(pol, col = col, border = col, add = TRUE)
}
}
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0, dissolve = TRUE)
pol <- smoothr::smooth(pol, "ksmooth", smoothness = 3)
plot(pol, col = col, border = col,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2])
layers <- splitByColor(rc, plot_method = "none")
for (i in 1:length(layers)) {
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0, dissolve = TRUE)
pol <- smoothr::smooth(pol, "ksmooth", smoothness = 3)
col <- rgb(rc$centers)[i]
if (i == 1) {
plot(pol, col = col, border = col,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2])
} else {
plot(pol, col = col, border = col, add = TRUE)
}
}
for (i in 1:length(layers)) {
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0, dissolve = TRUE)
pol <- smoothr::smooth(pol, "ksmooth", smoothness = 4)
col <- rgb(rc$centers)[i]
if (i == 1) {
plot(pol, col = col, border = col,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2])
} else {
plot(pol, col = col, border = col, add = TRUE)
}
}
plot(rc)
for (i in 1:nrow(rc$centers)) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 10)
}
rc <- recolorize2(img, cutoff = 45)
for (i in 1:nrow(rc$centers)) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 25)
}
rc <- recolorize2(img, cutoff = 45)
for (i in 1:nrow(rc$centers)) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 20)
}
rc <- recolorize2(img, cutoff = 45, plotting = F)
for (i in 1:nrow(rc$centers)) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 30)
}
rc <- recolorize2(img, cutoff = 45, plotting = F)
for (i in 1:nrow(rc$centers)) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 50)
}
rc <- recolorize2(img, cutoff = 45, plotting = F)
for (i in 1:nrow(rc$centers)) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 100)
}
rc <- recolorize2(img, cutoff = 45, plotting = F)
plot(rc)
for (i in c(3, 4, 1, 2)) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 100)
}
for (i in c(3, 4, 1, 2)) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 50)
}
rc <- recolorize2(img, cutoff = 45, plotting = F)
for (i in c(3, 4, 1, 2)) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 50)
}
rc <- recolorize2(img, cutoff = 45, plotting = F)
for (i in 1:4) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 50)
}
rc <- recolorize2(img, cutoff = 45, plotting = F)
for (i in 1:5) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 50)
}
rc <- absorbLayer(rc, 3, y_range = c(0.8, 1))
rc <- recolorize2(img, cutoff = 45, plotting = F)
for (i in 1:5) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 50)
}
rc <- absorbLayer(rc, 3, y_range = c(0.9, 1))
rc <- recolorize2(img, cutoff = 45, plotting = F)
for (i in 1:5) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 50)
}
rc <- absorbLayer(rc, 3, x_range = c(0.9, 1))
rc <- recolorize2(img, cutoff = 45, plotting = F)
for (i in 1:5) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 50)
}
rc2 <- absorbLayer(rc, 3, x_range = c(0.8, 1), y_range = c(0.8, 1))
rc <- absorbLayer(rc, 3, x_range = c(0.8, 1), y_range = c(0.8, 1))
layers <- splitByColor(rc, plot_method = "none")
for (i in 1:length(layers)) {
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0, dissolve = TRUE)
pol <- smoothr::smooth(pol, "ksmooth", smoothness = 4)
col <- rgb(rc$centers)[i]
if (i == 1) {
plot(pol, col = col, border = col,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2])
} else {
plot(pol, col = col, border = col, add = TRUE)
}
}
for (i in 1:length(layers)) {
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0, dissolve = TRUE)
pol <- smoothr::smooth(pol, "ksmooth", smoothness = 4)
col <- rgb(rc$centers)[i]
if (i == 1) {
plot(pol, col = col, border = col,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2])
} else {
plot(pol, col = col, border = col, add = TRUE)
}
p <- recordPlot()
}
p
current_par <- par()
current_par
par(current_par)
current_par <- par(no.readonly = TRUE)
par(current_par)
axis()
axis(1)
for (i in 1:length(layers)) {
# get polygons
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0, dissolve = TRUE)
# smooth them
pol <- smoothr::smooth(pol, "ksmooth", smoothness = 4)
col <- rgb(rc$centers)[i]
if (i == 1) {
plot(pol, col = col, border = col,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2])
} else {
plot(pol, col = col, border = col, add = TRUE)
}
p <- recordPlot()
}
axis(1)
axis(2)
vector_image <- function(recolorize_obj,
smoothness = 1,
...) {
# get layers
layers <- splitByColor(recolorize_obj, plot_method = "none")
# store current plotting parameters
current_par <- par(no.readonly = TRUE)
# assert new ones
par(mar = rep(0, 4)); layout(1)
for (i in 1:length(layers)) {
# get polygons
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0, dissolve = TRUE)
# smooth them
pol <- smoothr::smooth(pol, "ksmooth", smoothness = 4)
# rgb colors
col <- rgb(rc$centers)[i]
if (i == 1) {
plot(pol, col = col, border = col,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2],
xlim = c(0, 1), ylim = c(0, 1),
...)
} else {
plot(pol,
col = col,
border = col,
add = TRUE,
...)
}
p <- recordPlot()
}
return(p)
}
p <- vector_image(rc, smoothness = 3)
p <- vector_image(rc, smoothness = 3, lwd = 2)
layout(matrix(1:3, nrow = 1))
plot(rc$original_img)
plot(recoloredImage(rc))
layout(matrix(1:3, nrow = 1))
plot(rc$original_img)
plotImageArray(recoloredImage(rc))
p
layout(matrix(1:3, nrow = 1))
plotImageArray(recolorize:::raster_to_array(rc$original_img))
plotImageArray(recoloredImage(rc))
vector_image <- function(recolorize_obj,
smoothness = 1,
...) {
# get layers
layers <- splitByColor(recolorize_obj, plot_method = "none")
# store current plotting parameters
current_par <- par(no.readonly = TRUE)
# assert new ones
par(mar = rep(0, 4))
for (i in 1:length(layers)) {
# get polygons
pol <- rasterToPolygons(raster(layers[[i]]),
fun = function(x) x > 0, dissolve = TRUE)
# smooth them
pol <- smoothr::smooth(pol, "ksmooth", smoothness = 4)
# rgb colors
col <- rgb(rc$centers)[i]
if (i == 1) {
plot(pol, col = col, border = col,
asp = dim(layers[[i]])[1] / dim(layers[[i]])[2],
xlim = c(0, 1), ylim = c(0, 1),
...)
} else {
plot(pol,
col = col,
border = col,
add = TRUE,
...)
}
p <- recordPlot()
}
return(p)
}
vector_image(rc, smoothness = 3)
img <- system.file("extdata/chongi.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 45, plotting = F)
rc <- recolorize2(img, cutoff = 45, plotting = T)
rc <- recolorize2(img, cutoff = 35, plotting = T)
for (i in 1:5) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 50)
}
img <- system.file("extdata/ephigeppera.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 35, plotting = T)
img <- system.file("extdata/ephigippera.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 35, plotting = T)
img <- system.file("extdata/epigiphera.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 35, plotting = T)
img <- system.file("extdata/", package = "recolorize")
dir(img)
img <- system.file("extdata/ephippigera.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 35, plotting = T)
for (i in 1:5) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 20)
}
rc <- recolorize2(img, cutoff = 35, plotting = T)
for (i in 1:5) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 10)
}
layout(matrix(1:3, nrow = 1))
plotImageArray(recolorize:::raster_to_array(rc$original_img))
plotImageArray(recoloredImage(rc))
vector_image(rc, smoothness = 3)
rc <- recolorize2(img, bins = 3, cutoff = 35, plotting = T)
rc <- recolorize2(img, bins = 2, cutoff = 35, plotting = T)
for (i in 1:nrow(rc$centers)) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 10)
}
rc <- recolorize2(img, bins = 2, cutoff = 35, plotting = T)
for (i in 1:nrow(rc$centers)) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 3)
}
rc <- absorbLayer(rc, 3, x_range = c(0.8, 1), y_range = c(0.8, 1))
p <- vector_image(rc, smoothness = 3, lwd = 2)
p <- vector_image(rc, smoothness = 3, lwd = 1)
p <- vector_image(rc, smoothness = 2, lwd = 1)
p <- vector_image(rc, smoothness = 1, lwd = 1)
rc <- recolorize2(img, bins = 3, cutoff = 45, plotting = T)
rc <- recolorize2(img, bins = 3, cutoff = 55, plotting = T)
rc <- recolorize2(img, bins = 2, cutoff = 50, plotting = T)
rc <- recolorize2(img, bins = 2, cutoff = 40, plotting = T)
for (i in 1:nrow(rc$centers)) {
rc <- absorbLayer(rc, i, size_condition = function(s) s <= 3)
}
img <- system.file("extdata/ocellata.png", package = "recolorize")
rc <- recolorize2(img, bins = 2, cutoff = 40, plotting = T)
rc <- recolorize2(img, bins = 3, cutoff = 40, plotting = T)
?absorbLayer
img <- system.file("extdata/fulgidissima.png", package = "recolorize")
rc <- recolorize2(img, bins = 3, cutoff = 40, plotting = T)
rc <- recolorize2(img, bins = 3, cutoff = 50, plotting = T)
rc <- recolorize2(img, bins = 2, cutoff = 50, plotting = T)
rc <- recolorize2(img, bins = 2, cutoff = 20, plotting = T)
rc <- recolorize2(img, bins = 3, color_space = "Lab", cutoff = 20, plotting = T)
rc <- recolorize2(img, bins = 3, color_space = "Lab",
cutoff = 30, plotting = T)
rc <- recolorize2(img, bins = 4, color_space = "Lab",
cutoff = 30, plotting = T)
rc <- recolorize2(img, bins = 4, color_space = "Lab",
cutoff = 50, plotting = T)
rc <- recolorize2(img, bins = 2, color_space = "Lab",
cutoff = 10, plotting = T)
rc <- recolorize2(img, bins = 3, color_space = "Lab",
cutoff = 10, plotting = T)
rc <- recolorize2(img, bins = 3, color_space = "Lab",
cutoff = 30, plotting = T)
