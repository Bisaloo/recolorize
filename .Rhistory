# plot clustering:
if (plot_hclust) {
graphics::par(mfrow = c(1, 1), mar = c(1, 3, 3, 1))
plot(hc, xlab = "")
# plot cutoff value if provided:
if (is.null(n_final)) {
graphics::abline(h = similarity_cutoff, lty = 2, col = "red")
}
}
plot_hclust = TRUE
similarity_cutoff = 60
# plot clustering:
if (plot_hclust) {
graphics::par(mfrow = c(1, 1), mar = c(1, 3, 3, 1))
plot(hc, xlab = "")
# plot cutoff value if provided:
if (is.null(n_final)) {
graphics::abline(h = similarity_cutoff, lty = 2, col = "red")
}
}
n_final = NULL
# plot clustering:
if (plot_hclust) {
graphics::par(mfrow = c(1, 1), mar = c(1, 3, 3, 1))
plot(hc, xlab = "")
# plot cutoff value if provided:
if (is.null(n_final)) {
graphics::abline(h = similarity_cutoff, lty = 2, col = "red")
}
}
# form groups
clust_groups <- stats::cutree(hc, k = n_final,
h = similarity_cutoff)
merge_list <- lapply(unique(clust_groups),
function(i) which(clust_groups == i))
refit_method <- match.arg(refit_method, c("imposeColors", "mergeLayers"))
refit_method = "merge"
refit_method <- match.arg(refit_method, c("imposeColors", "mergeLayers"))
refit_method
if (refit_method == "imposeColors") {
# get weighted avg new colors:
for (i in 1:length(merge_list)) {
temp_colors <- centers[merge_list[[i]], ]
if (is.null(nrow(temp_colors))) {
new_color <- temp_colors
} else {
new_color <- apply(temp_colors, 2, function(j)
stats::weighted.mean(j, w = sizes[merge_list[[i]]]))
}
# make new dataframe/add new colors:
if (i == 1) {
new_centers <- data.frame(R = new_color[1],
G = new_color[2],
B = new_color[3])
} else {
new_centers <- rbind(new_centers, new_color)
}
}
# and refit:
final_fit <- imposeColors(init_fit$original_img,
centers = new_centers,
plotting = FALSE)
} else if (refit_method == "mergeLayers") {
# doop doop:
final_fit <- mergeLayers(init_fit,
merge_list = merge_list,
plotting = FALSE)
}
plot(final_fit)
plot(init_fit)
# default: histogram, 2 bins/channel
rfit <- recolorize(img, bins = 4)
clust_groups <- cutree(hclust(dist(convertColor(rfit$centers, from = "sRGB", to = "Lab"))),
h = 60)
clust_groups
# form groups
clust_groups <- stats::cutree(hc, k = n_final,
h = similarity_cutoff)
clust_groups
n_final
similarity_cutoff
lab_init
zero_idx
which(rfit$pixel_assignments == 53)
merge_list
unique(unlist(merge_list))
rangeunique(unlist(merge_list)))
range(unique(unlist(merge_list)))
nrow(rfit$centers)
# filepath to image
img <- system.file("extdata/chongi.png", package = "recolorize")
# default: histogram, 2 bins/channel
rfit <- recolorize(img, bins = 4)
rfit$sizes
# filepath to image
img <- system.file("extdata/ocellata.png", package = "recolorize")
# default: histogram, 2 bins/channel
rfit <- recolorize(img, bins = 4)
rfit$sizes
# filepath to image
img <- system.file("extdata/corbetti.png", package = "recolorize")
# default: histogram, 2 bins/channel
rfit <- recolorize(img, bins = 5)
rfit$sizes
# default: histogram, 2 bins/channel
rfit <- recolorize(img, bins = 3); rfit$sizes
devtools::load_all(".")
# default: histogram, 2 bins/channel
rfit <- recolorize(img, bins = 3); rfit$sizes
test <- recluster(rfit, refit_method = "merge")
test2 <- editLayers(test)
test$centers
# default: histogram, 2 bins/channel
rfit <- recolorize(img, bins = 4); rfit$sizes
test <- recluster(rfit, refit_method = "merge")
test2 <- editLayers(test)
devtools::load_all(".")
?imposeColors
# RGB extremes (white, black, red, green, blue, yellow, magenta, cyan)
ctrs <- matrix(c(1, 1, 1,
0, 0, 0,
1, 0, 0,
0, 1, 0,
0, 0, 1,
1, 1, 0,
1, 0, 1,
0, 1, 1), byrow = TRUE, ncol = 3)
#
# get image paths
ocellata <- system.file("extdata/ocellata.png", package = "recolorize")
# map to rgb extremes
ocellata_fixed <- recolorize::imposeColors(ocellata, ctrs,
adjust_centers = FALSE)
ctrs
is.matrix(ctrs)
# RGB extremes (white, black, red, green, blue, yellow, magenta, cyan)
ctrs <- matrix(c(1, 1, 1,
0, 0, 0,
1, 0, 0,
0, 1, 0,
0, 0, 1,
1, 1, 0,
1, 0, 1,
0, 1, 1), byrow = TRUE, ncol = 3)
# plot it
recolorize::plotColorPalette(ctrs)
# get image paths
ocellata <- system.file("extdata/ocellata.png", package = "recolorize")
# map to rgb extremes
ocellata_fixed <- recolorize::imposeColors(ocellata, ctrs,
adjust_centers = FALSE)
# looks much better if we recalculate the centers from the image
ocellata_adjusted <- recolorize::imposeColors(ocellata, ctrs,
adjust_centers = TRUE)
# we can map one image to extracted colors from another image
# extract ocellata colors
ocellata_colors <- recolorize(ocellata)
# map fulgidissima to ocellata colors
fulgidissima <- system.file("extdata/fulgidissima.png",
package = "recolorize")
fulgidissma_ocellata <- recolorize::imposeColors(fulgidissima,
ocellata_colors$centers,
adjust_centers = FALSE)
# RGB extremes (white, black, red, green, blue, yellow, magenta, cyan)
ctrs <- matrix(c(1, 1, 1,
0, 0, 0,
1, 0, 0,
0, 1, 0,
0, 0, 1,
1, 1, 0,
1, 0, 1,
0, 1, 1), byrow = TRUE, ncol = 3)
# plot it
recolorize::plotColorPalette(ctrs)
# get image paths
ocellata <- system.file("extdata/ocellata.png", package = "recolorize")
# map to rgb extremes
ocellata_fixed <- recolorize::imposeColors(ocellata, ctrs,
adjust_centers = FALSE)
# looks much better if we recalculate the centers from the image
ocellata_adjusted <- recolorize::imposeColors(ocellata, ctrs,
adjust_centers = TRUE)
# we can map one image to extracted colors from another image
# extract ocellata colors
ocellata_colors <- recolorize(ocellata)
# map fulgidissima to ocellata colors
fulgidissima <- system.file("extdata/fulgidissima.png",
package = "recolorize")
fulgidissma_ocellata <- recolorize::imposeColors(fulgidissima,
ocellata_colors$centers,
adjust_centers = FALSE)
dim(c(1,1,1))
img <- system.file("extdata/fulgidissima.png", package = "recolorize")
init_fit <- recolorize(img, bins = 3)
devtools::load_all(".")
init_fit <- recolorize(img, bins = 3)
devtools::load_all(".")
test <- thresholdRecolor(init_fit, pct = 0.1)
test <- thresholdRecolor(init_fit, pct = 0.1, adjust_centers = F)
test <- thresholdRecolor(init_fit, pct = 0.1, adjust_centers = T)
devtools::load_all(".")
test <- thresholdRecolor(init_fit, pct = 0.1, adjust_centers = T)
test <- thresholdRecolor(init_fit, pct = 0.1, adjust_centers = F)
thresholdRecolor(init_fit)
test <- thresholdRecolor(init_fit, pct = 15)
test <- thresholdRecolor(init_fit, pct = .15)
test <- thresholdRecolor(init_fit, pct = 1)
usethis::use_vignette("introduction")
install.packages("rmarkdown")
usethis::use_vignette("introduction")
library(recolorize)
```{r echo=FALSE}
plotImageArray(readImage(system.file("extdata/corbetti.png", package = "recolorize")))
```{r, echo = FALSE}
```{r, include=FALSE}
```{r, echo=FALSE}
dim(img)
img <- system.file("extdata/corbetti.png", package = "recolorize")
img <- readImage(img)
dim(img)
246/116
images <- dir(system.file("extdata/", package = "recolorize"), full.names = TRUE)
images
images <- dir(system.file("extdata/", package = "recolorize"), "png", full.names = TRUE)
images
img <- readImage(images[2])
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?splitByColor
# get original fit
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
recolored_corbetti <- recolorize::recolorize(corbetti, plotting = TRUE)
# make a layout
layout(matrix(c(1, 1:9), nrow = 2))
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "over")
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
devtools::load_all(".")
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
devtools::load_all(".")
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
devtools::load_all(".")
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
devtools::load_all(".")
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
devtools::load_all(".")
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
devtools::load_all(".")
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
devtools::load_all(".")
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
# graphics::rect(0, 1, 1, 1.15,
#                col = "red", border = "red")
#text(0.5, 1.05, "1")
graphics::rect(0, 1, 1, 0,
col = ctr_col)
recolorize_obj <- recolored_corbetti
# check layers argument
if (layers == "all") {
layer_idx <- 1:nrow(recolorize_obj$centers)
} else if (is.numeric(layers)) {
# use all colors
layer_idx <- layers
} else {
stop("'layers' must be 'all' or a numeric vector of layer indices
matching the order of the color centers")
}
layers = "all"
# check layers argument
if (layers == "all") {
layer_idx <- 1:nrow(recolorize_obj$centers)
} else if (is.numeric(layers)) {
# use all colors
layer_idx <- layers
} else {
stop("'layers' must be 'all' or a numeric vector of layer indices
matching the order of the color centers")
}
# get color centers
centers <- recolorize_obj$centers[layer_idx, ]
# make an empty list for the layer bitmaps
color_masks <- vector("list", length = length(layer_idx))
# convert pixel assignment to cimg object
img <- imager::as.cimg(recolorize_obj$pixel_assignments)
for (i in 1:length(layer_idx)) {
# get index
px <- imager::imsub(img) == layer_idx[i]
# get color layer as a bitmap
layer <- as.numeric(px)
dim(layer) <- dim(img)[1:2]
# store bitmap
color_masks[[i]] <- layer
}
i = 1
ctr_col <- grDevices::rgb(centers[i, 1],
centers[i, 2],
centers[i, 3])
plotImageArray(color_masks[[i]],
xlim = c(0, 1),
ylim = c(0, 1.15),
main = "")
axes()
axis()
axis(1)
plotImageArray(color_masks[[i]],
xlim = c(0, 1),
ylim = c(0, 1.15),
main = "")
axis(1); axis(2)
plotImageArray(color_masks[[i]],
main = "")
axis(1); axis(2)
# graphics::rect(0, 1, 1, 1.15,
#                col = "red", border = "red")
#text(0.5, 1.05, "1")
graphics::rect(0, 1, 1, 0,
col = ctr_col)
plotImageArray(color_masks[[i]],
main = "")
# graphics::rect(0, 1, 1, 1.15,
#                col = "red", border = "red")
#text(0.5, 1.05, "1")
graphics::rect(0, 1, 1, 0,
border = ctr_col)
# graphics::rect(0, 1, 1, 1.15,
#                col = "red", border = "red")
#text(0.5, 1.05, "1")
graphics::rect(0, 1, 1, 1,
border = ctr_col)
# graphics::rect(0, 1, 1, 1.15,
#                col = "red", border = "red")
#text(0.5, 1.05, "1")
graphics::rect(0, 1, 1, 1,
col = ctr_col)
# graphics::rect(0, 1, 1, 1.15,
#                col = "red", border = "red")
#text(0.5, 1.05, "1")
graphics::rect(0, 0.5, 0.5, 1,
col = ctr_col)
axis(1); axis(2)
plotImageArray(color_masks[[i]],
ylim = c(0, 1.2),
main = "")
axis(1); axis(2)
# graphics::rect(0, 1, 1, 1.15,
#                col = "red", border = "red")
#text(0.5, 1.05, "1")
graphics::rect(0, 1, 1, 1.2,
col = ctr_col)
devtools::load_all(".")
layout(matrix(c(1, 1:9), nrow = 2))
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "over")
layout(matrix(c(1, 1:9), nrow = 2))
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
plotImageArray(color_masks[[i]],
#ylim = c(0, 1.2),
main = "")
# graphics::rect(0, 1, 1, 1.15,
#                col = "red", border = "red")
#text(0.5, 1.05, "1")
graphics::rect(0, 0, 1, 1,
col = ctr_col)
# graphics::rect(0, 1, 1, 1.15,
#                col = "red", border = "red")
#text(0.5, 1.05, "1")
graphics::rect(0, 0, 1, 1,
border = ctr_col)
devtools::load_all(".")
# graphics::rect(0, 1, 1, 1.15,
#                col = "red", border = "red")
#text(0.5, 1.05, "1")
graphics::rect(0, 0, 1, 1,
border = ctr_col)
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
plotImageArray(color_masks[[i]],
#ylim = c(0, 1.2),
main = "")
# graphics::rect(0, 1, 1, 1.15,
#                col = "red", border = "red")
#text(0.5, 1.05, "1")
graphics::rect(0, 0, 1, 1,
border = ctr_col)
axis(1)
obj <- color_masks[[i]]
dim(obj)
ctr_col
d <- dim(obj)
d[1]
round(d[1] * 0.1)
matrix(centers[i, 1],
nrow = round(d[1] * 0.1),
ncol = d[2])
test <- abind::abind(sapply(centers[i, ],
function(j) matrix(j, d1, d2)), along = 3)
d <- dim(obj); d1 <- round(d[1] * 0.1); d2 <- d[2]
test <- abind::abind(sapply(centers[i, ],
function(j) matrix(j, d1, d2)), along = 3)
dim(test)
matrix(j, d1, d2)
j <- centers[i, 1]
matrix(j, d1, d2)
dim(matrix(j, d1, d2))
test <- sapply(centers[i, ],
function(j) matrix(j, d1, d2)
test <- abind::abind(), along = 3)
test <- sapply(centers[i, ],
function(j) matrix(j, d1, d2))
test
test[[1]]
dim(test)
test <- apply(centers[i, ],
function(j) matrix(j, d1, d2))
test <- apply(centers[i, ], 2,
function(j) matrix(j, d1, d2))
centers[i, ]
test <- lapply(as.list(centers[i, ]),
function(j) matrix(j, d1, d2))
test[[1]]
dim(test[[1]])
d <- dim(obj); d1 <- round(d[1] * 0.1); d2 <- d[2]
m <- lapply(as.list(centers[i, ]),
function(j) matrix(j, d1, d2))
col_block <- abind::abind(m[[1]], m[[2]], m[[3]], along = 3)
col_block <- abind::abind(m[[1]], m[[2]], m[[3]], along = 3)
obj <- color_masks[[i]]
obj2 <- abind::abind(col_block, obj, along = 1)
col_block <- abind::abind(m[[1]], m[[2]], m[[3]], along = 3)
obj <- abind::abind(color_masks[[i]],
color_masks[[i]],
color_masks[[i]], along = 3)
obj2 <- abind::abind(col_block, obj, along = 1)
plotImageArray(obj2)
devtools::load_all(".")
# make a layout
layout(matrix(c(1, 1:9), nrow = 2))
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "over")
# plot one of the binary maps
layout(matrix(1:2, nrow = 1))
plotImageArray(corbetti_layers[[2]], main = "original layer")
# make a layout
layout(matrix(c(1, 1:9), nrow = 2))
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
devtools::load_all(".")
# make a layout
layout(matrix(c(1, 1:9), nrow = 2))
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "over")
# make a layout
layout(matrix(c(1, 1:9), nrow = 2))
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
devtools::load_all(".")
# make a layout
layout(matrix(c(1, 1:9), nrow = 2))
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
dim(img)
243/115
243/116
devtools::load_all(".")
# make a layout
layout(matrix(c(1, 1:9), nrow = 2))
# plot original
plotImageArray(recolored_corbetti$original_img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti, plot_method = "binary")
devtools::load_all(".")
