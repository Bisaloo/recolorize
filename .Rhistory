layout(1) # reset the plot window
dist_2bin <- imDist(ful_2bin$original.img,
ful_2bin$recolored.img,
main = "2 bins per channel")
# you can use different color palettes:
pal <- viridisLite::viridis(100)
imHeatmap(dist_2bin, palette = pal,
main = "viridis palette")
# including the worst palette I know of:
pal <- colorRamps::primary.colors(100)
imHeatmap(dist_2bin, palette = pal,
main = "no no no no no")
# more importantly...you can compare fits visually!
# let's use kmeans and compare with the histogram fit:
ful_k<- recolorize(fulgidissima, "k", n = 8)
# we can already see this is better:
dist_k <- imDist(ful_k$original.img,
ful_k$recolored.img)
# we see where they differ most (this one is quite arty):
k_vs_hist <- imDist(ful_k$recolored.img,
ful_2bin$recolored.img)
# potentially most useful, we can plot them side-by-side
# we need to set the same range for both images to make a fair comparison
r <- range(c(dist_k, dist_2bin), na.rm = TRUE)
# and now, we plot!
layout(matrix(1:2, nrow = 1))
imHeatmap(dist_2bin, main = "Histogram, 8 bins",
range = r, legend = F)
imHeatmap(dist_k, main = "k-means, 8 centers",
range = r)
# we can also do this in other color spaces:
layout(matrix(1:3, nrow = 1))
dist_rgb <- imDist(ful_2bin$original.img,
ful_2bin$recolored.img,
color.space = "sRGB",
main = "sRGB")
dist_luv <- imDist(ful_2bin$original.img,
ful_2bin$recolored.img,
color.space = "Luv",
main = "Luv")
dist_xyz <- imDist(ful_2bin$original.img,
ful_2bin$recolored.img,
color.space = "XYZ",
main = "XYZ")
# This one was Able's suggestion: can we look at one color cluster at a time?
# get original fit
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
recolored_corbetti <- recolorize::recolorize(corbetti, plotting = TRUE)
# make a layout
layout(matrix(c(1, 1:9), nrow = 2))
# plot original
plotImageArray(recolored_corbetti$original.img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti,
plot_method = "overlay")
# so, you could plot the layers as binary masks...
plotImageArray(recolored_corbetti$original.img)
corbetti_layers <- splitByColor(recolored_corbetti,
plot_method = "binary")
# or split the different and color the binary masks:
plotImageArray(recolored_corbetti$original.img)
corbetti_layers <- splitByColor(recolored_corbetti,
plot_method = "colormask")
# well hey, luckily we can fix that now:
corbetti_recluster <- recluster(recolored_corbetti,
similarity_cutoff = 45,
plot_hclust = T)
# and now we can look at the layers again:
layout(matrix(1:6, nrow = 2))
plotImageArray(corbetti_recluster$original.img)
corbetti_layers <- splitByColor(corbetti_recluster, plot_method = "overlay")
# we can examine the binary masks stored within the layers list:
layout(matrix(1:2, nrow = 1))
plotImageArray(corbetti_layers[[2]], main = "original layer")
# make an imager pixset so we can clean up stray pixels:
px <- imager::as.cimg(corbetti_layers[[2]] == 1)
px_clean <- imager::clean(px, 3)
# convert back to an image for plotting
plotImageArray(recolorize:::cimg.to.array(px_clean), main = "cleaned layer")
werner <- read.csv("../werner_nomenclature/werner_colors.csv")
usethis::use_data(werner)
dim(werner)
colnames(werner)
head(werner)
werner <- werner[ , 1:4]
usethis::use_data(werner)
usethis::use_data(werner, overwrite = TRUE)
devtools::load_all(".")
recolorize::werner
plotImageArray(recolorize.obj$original.img)
plotImageArray(recolorize.obj$recolored.img)
plotImageArray(recolorize.obj$recolored.img)
rm("werner")
rm(werner)
werner
color_centers <- recolorize.obj$centers
color.centers
centers <- recolorize.obj$centers
tmp <- sapply(1:nrow(centers),
function(i) apply(werner, 1,
function(v) sqrt(sum((centers[i, ]-v)^2))))
centers <- recolorize.obj$centers
tmp <- sapply(1:nrow(centers),
function(i) apply(werner, 1,
function(v) sqrt(sum((centers[i, ]-v)^2))))
centers
centers[i,]
i
werner_lab <- col2rgb(werner$hex)
werner_lab
werner_rgb <- t(col2rgb(werner$hex))
werner_rgb
werner_rgb <- t(col2rgb(werner$hex)) / 255
werner_rgb
werner_lab <- grDevices::convertColor(werner_rgb)
werner_lab <- grDevices::convertColor(werner_rgb,
"sRGB", "Lab")
# first, convert werner colors to lab
werner_rgb <- t(col2rgb(werner$hex)) / 255
werner_lab <- grDevices::convertColor(werner_rgb,
"sRGB", "Lab")
# get centers
centers <- recolorize.obj$centers
centers <- grDevices::convertColor(centers,
"sRGB", "Lab")
tmp <- sapply(1:nrow(centers),
function(i) apply(werner_lab, 1,
function(v) sqrt(sum((centers[i, ]-v)^2))))
tmp
# make returnables
center.assignments <- max.col(-t(tmp))  # find index of min distance
center.assignments
werner_centers <- werner_rgb[werner_idx, ]
# make returnables
werner_idx <- max.col(-t(tmp))  # find index of min distance
werner_centers <- werner_rgb[werner_idx, ]
# first, convert werner colors to lab
werner_rgb <- t(col2rgb(werner$hex)) / 255
werner_lab <- grDevices::convertColor(werner_rgb,
"sRGB", "Lab")
# get centers
centers <- recolorize.obj$centers
centers <- grDevices::convertColor(centers,
"sRGB", "Lab")
tmp <- sapply(1:nrow(centers),
function(i) apply(werner_lab, 1,
function(v) sqrt(sum((centers[i, ]-v)^2))))
# make returnables
werner_idx <- max.col(-t(tmp))  # find index of min distance
werner_centers <- werner_rgb[werner_idx, ]
imposeColors(recolorize.obj$recolored.img,
werner_centers, adjust.centers = FALSE)
werner_fit <- imposeColors(recolorize.obj$original.img,
werner_centers, adjust.centers = FALSE)
# text labels?
layout(matrix(1:3, nrow = 1))
plotImageArray(werner_fit$recolored.img)
plotColorPalette(werner_fit$centers)
plotColorPalette(werner_fit$centers, horiz = FALSE)
# text labels?
layout(matrix(1:3, nrow = 1))
plotImageArray(werner_fit$recolored.img)
ctrs <- werner_fit$centers[which(werner_fit$sizes > 0), ]
ctrs
werner_fit$sizes / max(werner_fit$sizes)
werner_fit$sizes / sum(werner_fit$sizes)
werner_fit$sizes / sum(werner_fit$sizes) > 0.01
which((werner_fit$sizes / sum(werner_fit$sizes) > 0.01)
)
which(werner_fit$sizes / sum(werner_fit$sizes) > 0.01)
# text labels?
layout(matrix(1:3, nrow = 1))
plotImageArray(werner_fit$recolored.img)
idx <- which(werner_fit$sizes / sum(werner_fit$sizes) > 0.01)
ctrs <- werner_fit$centers[idx, ]
plotColorPalette(ctrs, horiz = FALSE)
order(werner_fit$sizes / sum(werner_fit$sizes))
idx <- order(werner_fit$sizes / sum(werner_fit$sizes))
ctrs <- werner_fit$centers[idx[1:display], ]
display
n_colors = 5
idx <- order(werner_fit$sizes / sum(werner_fit$sizes))
ctrs <- werner_fit$centers[idx[1:n_colors], ]
plotColorPalette(ctrs, horiz = FALSE)
idx <- order(werner_fit$sizes / sum(werner_fit$sizes))
idx
idx <- order(werner_fit$sizes / sum(werner_fit$sizes), decreasing = TRUE)
ctrs <- werner_fit$centers[idx[1:n_colors], ]
plotColorPalette(ctrs, horiz = FALSE)
idx <- order(werner_fit$sizes / sum(werner_fit$sizes),
decreasing = TRUE)[1:n_colors]
ctrs <- werner_fit$centers[idx, ]
plotColorPalette(ctrs, sizes = werner_fit$sizes[idx], horiz = FALSE)
# text labels?
layout(matrix(1:3, nrow = 1))
plotImageArray(werner_fit$recolored.img)
# text labels?
idx <- order(werner_fit$sizes / sum(werner_fit$sizes),
decreasing = TRUE)[1:n_colors]
ctrs <- werner_fit$centers[idx, ]
idx
ctrs
plotImageArray(werner_fit$recolored.img)
plotColorPalette(ctrs, sizes = werner_fit$sizes[idx],
horiz = FALSE)
layout(matrix(1:3, nrow = 1))
plotImageArray(werner_fit$recolored.img)
plotColorPalette(ctrs, sizes = werner_fit$sizes[idx],
horiz = FALSE)
plot(0:1, 0:1, ann = F)
plot(0:1, 0:1, ann = F, axes = F)
plot(0:1, 0:1, ann = F, axes = F, type = "n")
plot(0:1, 0:1, ann = F, axes = F, type = "n")
layout(matrix(1:3, nrow = 1))
plotImageArray(werner_fit$recolored.img)
plotColorPalette(ctrs, sizes = werner_fit$sizes[idx],
horiz = FALSE)
plot(0:1, 0:1, ann = F, axes = F, type = "n")
?NCOL
text(0.5, seq(0, 1, length.out = n_colors),
labels = werner$name[werner_idx[idx]])
plotColorPalette(ctrs, cex.text = 0,
horiz = FALSE)
layout(matrix(1:3, nrow = 1))
plotImageArray(werner_fit$recolored.img)
plotColorPalette(ctrs, cex.text = 0,
horiz = FALSE)
plot(0:1, 0:1, ann = F, axes = F, type = "n")
text(0.5, seq(0, 1, length.out = n_colors),
labels = werner$name[werner_idx[idx]],
col = werner$hex[werner_idx[idx]],
cex = 3)
plotImageArray(werner_fit$recolored.img)
plotColorPalette(ctrs, cex.text = 0,
horiz = FALSE)
plot(0:1, 0:1, ann = F, axes = F, type = "n")
text(0.5, seq(0, 1, length.out = n_colors),
labels = werner$name[werner_idx[idx]],
col = werner$hex[werner_idx[idx]],
cex = 2)
text(0.5, seq(0.1, 0.9, length.out = n_colors),
labels = werner$name[werner_idx[idx]],
col = werner$hex[werner_idx[idx]],
cex = 2, adj = 0)
text(0.5, seq(0.1, 0.9, length.out = n_colors),
labels = werner$name[werner_idx[idx]],
col = werner$hex[werner_idx[idx]],
cex = 2, adj = 1)
text(0.5, seq(0.1, 0.9, length.out = n_colors),
labels = werner$name[werner_idx[idx]],
col = werner$hex[werner_idx[idx]],
cex = 2, font = 3)
layout(matrix(1:3, nrow = 1))
plotImageArray(werner_fit$recolored.img)
plotColorPalette(ctrs, cex.text = 0,
horiz = FALSE)
plot(0:1, 0:1, ann = F, axes = F, type = "n")
text(0.5, seq(0.1, 0.9, length.out = n_colors),
labels = werner$name[werner_idx[idx]],
col = werner$hex[werner_idx[idx]],
cex = 2, font = 3)
text(0.5, seq(0.1, 0.9, length.out = n_colors),
labels = werner$name[werner_idx[idx]],
col = werner$hex[werner_idx[idx]],
cex = 2, font = 2)
layout(matrix(1:3, nrow = 1))
plotImageArray(werner_fit$recolored.img)
plotColorPalette(ctrs, cex.text = 0,
horiz = FALSE)
plot(0:1, 0:1, ann = F, axes = F, type = "n")
text(0.5, seq(0.1, 0.9, length.out = n_colors),
labels = werner$name[werner_idx[idx]],
col = werner$hex[werner_idx[idx]],
cex = 2, font = 2)
layout(matrix(1:3, nrow = 1), widths = c(0.4, 0.2, 0.4))
plotImageArray(werner_fit$recolored.img)
plotColorPalette(ctrs, cex.text = 0,
horiz = FALSE)
plot(0:1, 0:1, ann = F, axes = F, type = "n")
text(0.5, seq(0.1, 0.9, length.out = n_colors),
labels = werner$name[werner_idx[idx]],
col = werner$hex[werner_idx[idx]],
cex = 2, font = 2)
wernerColor <- function(recolorize.obj,
which.img = "original",
n_colors = 5) {
# first, convert werner colors to lab
werner_rgb <- t(col2rgb(werner$hex)) / 255
werner_lab <- grDevices::convertColor(werner_rgb,
"sRGB", "Lab")
# get centers
centers <- recolorize.obj$centers
centers <- grDevices::convertColor(centers,
"sRGB", "Lab")
# get distances
tmp <- sapply(1:nrow(centers),
function(i) apply(werner_lab, 1,
function(v) sqrt(sum((centers[i, ]-v)^2))))
# find index of min distance
werner_idx <- max.col(-t(tmp))
# get new colors
werner_centers <- werner_rgb[werner_idx, ]
# re-fit either original or recolored image
which.img <- match.arg(which.img, c("original", "recolored"))
if (which.img == "original") {
img <- recolorize.obj$original.img
} else {
img <- recolorize.obj$recolored.img
}
# use imposeColors
werner_fit <- imposeColors(img,
werner_centers, adjust.centers = FALSE,
plotting = FALSE)
# text labels?
idx <- order(werner_fit$sizes / sum(werner_fit$sizes),
decreasing = TRUE)[1:n_colors]
ctrs <- werner_fit$centers[idx, ]
layout(matrix(1:3, nrow = 1), widths = c(0.2, 0.4, 0.4))
plotColorPalette(ctrs, cex.text = 0,
horiz = FALSE)
plotImageArray(werner_fit$recolored.img)
plot(0:1, 0:1, ann = F, axes = F, type = "n")
text(0.5, seq(0.1, 0.9, length.out = n_colors),
labels = werner$name[werner_idx[idx]],
col = werner$hex[werner_idx[idx]],
cex = 2, font = 2)
werner_fit$werner.names <- werner$name[werner_idx]
return(werner_fit)
}
devtools::load_all(".")
rm(list = c("wernerColor"))
devtools::load_all(".")
x<- wernerColor(corbetti_recluster, n_colors = 6)
recolorize.obj <- corbetti_recluster
# first, convert werner colors to lab
werner_rgb <- t(col2rgb(werner$hex)) / 255
werner_lab <- grDevices::convertColor(werner_rgb,
"sRGB", "Lab")
# get centers
centers <- recolorize.obj$centers
centers <- grDevices::convertColor(centers,
"sRGB", "Lab")
# get distances
tmp <- sapply(1:nrow(centers),
function(i) apply(werner_lab, 1,
function(v) sqrt(sum((centers[i, ]-v)^2))))
# find index of min distance
werner_idx <- max.col(-t(tmp))
# get new colors
werner_centers <- werner_rgb[werner_idx, ]
werner_centers
devtools::load_all(".")
x<- wernerColor(corbetti_recluster, n_colors = 6)
devtools::load_all(".")
x<- wernerColor(corbetti_recluster, n_colors = 6)
labels <- gsub(" ", "\n", werner$name[werner_idx[idx]])
devtools::load_all(".")
labels <- gsub(" ", "\n", werner$name[werner_idx[idx]])
x<- wernerColor(corbetti_recluster, n_colors = 6)
devtools::load_all(".")
x<- wernerColor(corbetti_recluster, n_colors = 6)
x<- wernerColor(corbetti_recluster, n_colors = 6)
devtools::load_all(".")
x<- wernerColor(corbetti_recluster, n_colors = 6)
?text
devtools::load_all(".")
x<- wernerColor(corbetti_recluster, n_colors = 6, which.img = "recolored")
x<- wernerColor(corbetti_recluster,
n_colors = 6,
which.img = "original")
x<- wernerColor(recolored_corbetti,
n_colors = 6,
which.img = "original")
x<- wernerColor(recolored_corbetti,
n_colors = 5,
which.img = "original")
x<- wernerColor(recolored_corbetti,
n_colors = 10,
which.img = "original")
x<- wernerColor(recolored_corbetti,
n_colors = 6,
which.img = "original")
werner
#' @return
#' A recolorize object with an additional list element, `werner.names`,
#' listing the Werner color names for each center.
#'
#' @details
#' See \url{https://www.c82.net/werner/} to check out the original colors.
#'
#' @examples
#'
#' # get an initial fit:
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
recolored_corbetti <- recolorize(corbetti, plotting = FALSE)
corbetti_recluster <- recluster(recolored_corbetti,
similarity_cutoff = 45,
plot_hclust = FALSE)
corbetti_werner <- wernerColor(corbetti_recluster)
corbetti_werner <- wernerColor(corbetti_recluster, which.img = "recolored")
corbetti_werner <- wernerColor(recolored_corbetti, which.img = "recolored")
corbetti_werner <- wernerColor(recolored_corbetti, which.img = "original")
corbetti_werner <- wernerColor(recolored_corbetti, which.img = "original", n_colors = 6)
corbetti_recluster <- recluster(recolored_corbetti,
similarity_cutoff = 45,
plot_hclust = FALSE)
corbetti_werner <- wernerColor(corbetti_recluster, which.img = "recolored")
corbetti_werner <- wernerColor(corbetti_recluster, which.img = "original")
corbetti_werner <- wernerColor(corbetti_recluster, which.img = "recolored")
corbetti_werner <- wernerColor(recolored_corbetti,
which.img = "original",
n_colors = 6)
devtools::load_all(".")
devtools::load_all(".")
recolorize::werner
recolorize::werner$hex
x<- wernerColor(recolored_corbetti,
n_colors = 6,
which.img = "original")
library(recolorize)
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 3)
# recluster: correct over-clustering ####
chongi <- system.file("extdata/chongi.png", package = "recolorize")
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 3)
# we can group together the most similar clusters:
reclustered_chongi <- recluster(recolored_chongi,
similarity_cutoff = 60,
plot_hclust = TRUE)
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 2)
# we can group together the most similar clusters:
reclustered_chongi <- recluster(recolored_chongi,
similarity_cutoff = 60,
plot_hclust = TRUE)
# we can also specify our final number of colors, as with kmeans:
recluster_chongi <- recluster(recolored_chongi,
n_final = 6,
plot_hclust = TRUE)
# compare with actual kmeans with n = 6; the navy is usually split into 2-3
# colors, and we get different results every time (!):
kmeans_chongi <- recolorize(chongi, "k", n = 6)
kmeans_chongi <- recolorize(chongi, "k", n = 6)
kmeans_chongi <- recolorize(chongi, "k", n = 6)
# you can also recluster a kmeans fit, which is nice
# the cutoff typically has to be lower and you do still have the issue of
# different results every time, but the recluster fit tends to be stable
kmeans_chongi <- recolorize(chongi, "k", n = 20)
kmeans_recluster <- recluster(kmeans_chongi, similarity_cutoff = 45)
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 2)
x<- wernerColor(recolored_chongi,
n_colors = 6,
which.img = "original")
library(recolorize)
devtools::load_all(".")
x<- wernerColor(recolored_chongi,
n_colors = 6,
which.img = "original")
x<- wernerColor(recolored_chongi,
n_colors = 6,
which_img = "original")
# you can use different color palettes:
pal <- viridisLite::viridis(100)
# This one was Able's suggestion: can we look at one color cluster at a time?
# get original fit
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
recolored_corbetti <- recolorize::recolorize(corbetti, plotting = TRUE)
# make a layout
layout(matrix(c(1, 1:9), nrow = 2))
# plot original
plotImageArray(recolored_corbetti$original.img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti,
plot_method = "overlay")
# so, you could plot the layers as binary masks...
plotImageArray(recolored_corbetti$original.img)
corbetti_layers <- splitByColor(recolored_corbetti,
plot_method = "binary")
# or split the different and color the binary masks:
plotImageArray(recolored_corbetti$original.img)
corbetti_layers <- splitByColor(recolored_corbetti,
plot_method = "colormask")
# well hey, luckily we can fix that now:
corbetti_recluster <- recluster(recolored_corbetti,
similarity_cutoff = 45,
plot_hclust = T)
# and now we can look at the layers again:
layout(matrix(1:6, nrow = 2))
plotImageArray(corbetti_recluster$original.img)
corbetti_layers <- splitByColor(corbetti_recluster, plot_method = "overlay")
# we can examine the binary masks stored within the layers list:
layout(matrix(1:2, nrow = 1))
plotImageArray(corbetti_layers[[2]], main = "original layer")
# make an imager pixset so we can clean up stray pixels:
px <- imager::as.cimg(corbetti_layers[[2]] == 1)
px_clean <- imager::clean(px, 3)
# convert back to an image for plotting
plotImageArray(recolorize:::cimg.to.array(px_clean), main = "cleaned layer")
x<- wernerColor(recolored_corbetti,
n_colors = 6,
which_img = "original")
x<- wernerColor(rclustered_corbetti,
n_colors = 6,
which_img = "original")
x<- wernerColor(reclustered_corbetti,
n_colors = 6,
which_img = "original")
x<- wernerColor(corbetti_recluster,
n_colors = 6,
which_img = "original")
