# make background condition
alpha.channel <- dim(img)[3] == 4 # is there a transparency channel?
bg.condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha.channel = alpha.channel)
bg.condition <- "bg.t"
# index background
bg.indexed <- backgroundIndex(img, bg.condition)
bg.condition <- backgroundCondition(transparent = TRUE)
bg.condition
bg.condition <- backgroundCondition(transparent = TRUE, alpha.channel = TRUE)
bg.condition
# index background
bg.indexed <- backgroundIndex(img, bg.condition)
length(img[,,1])
dim(img)
246*116
243*116
# make a 'paint-by-numbers' array:
cluster_array <- rep(0, prod(bg.indexed$img.dims[1:2]))
cluter_array
cluster_array
?colorClusters
devtools::load_all(".")
?backgroundIndex
# get image path and read in image
img.path <- system.file("extdata/chongi.png", package = "recolorize")
img <- png::readPNG(img.path)
recolorize::plotImageArray(img)
# generate a white background condition
bg.condition <- backgroundCondition(lower = rep(0.9, 3),
upper = rep(1, 3))
# index background pixels
bg.indexed <- backgroundIndex(img, bg.condition)
# generate a white background condition
bg.condition <- backgroundCondition()
bg.condition
# generate a white background condition
bg.condition <- backgroundCondition(alpha.channel = TRUE)
# generate a white background condition
bg.condition <- backgroundCondition(alpha.channel = TRUE,
transparent = TRUE)
# index background pixels
bg.indexed <- backgroundIndex(img, bg.condition)
img.path <- system.file("extdata/chongi", package = "recolorize")
# generate a white background condition
bg.condition <- backgroundCondition(alpha.channel = TRUE,
transparent = TRUE)
# index background pixels
bg.indexed <- backgroundIndex(img, bg.condition)
?colorClusters
# and cluster them:
color.clusters <- colorClusters(bg.indexed$non.bg,
bins = 2,
color.space = "sRGB")
# recolor image:
# 1. get pixel assignment matrix:
pix_assign <- rep(0, nrow(bg.indexed$flattened.img))
pix_assign[!idx] <- color.clusters$pixel.assignments
pix_assign[!bg.indexed$idx] <- color.clusters$pixel.assignments
# recolor image:
# 1. get pixel assignment matrix:
pix_assign <- rep(0, nrow(bg.indexed$flattened.img))
pix_assign[!bg.indexed$idx] <- color.clusters$pixel.assignments
dim(pix_assign) <- bg.indexed$img.dims[1:2]
# recolor image:
# 1. get pixel assignment matrix:
pix_assign <- rep(0, nrow(bg.indexed$flattened.img))
pix_assign[!bg.indexed$idx.flat] <- color.clusters$pixel.assignments
dim(pix_assign) <- bg.indexed$img.dims[1:2]
plotImageArray(pix_assign / max(pix_assign))
dim(pix_assign)
heatmap(pix_assign)
head(pix_assign)
hist(pix_assign)
# recolor image:
# 1. get pixel assignment matrix:
pix_assign <- rep(0, nrow(bg.indexed$flattened.img))
hist(pix_assign)
hist(color.clusters$pixel.assignments)
bg.indexed$idx
# recolor image:
# 1. get pixel assignment matrix:
pix_assign <- rep(0, nrow(bg.indexed$flattened.img))
dim(pix_assign)
pix_assign[!bg.indexed$idx.flat] <- color.clusters$pixel.assignments
hist(pix_assign)
length(color.clusters$pixel.assignments)
length(pix_assign)
pix_assign[-bg.indexed$idx.flat] <- color.clusters$pixel.assignments
dim(pix_assign) <- bg.indexed$img.dims[1:2]
plotImageArray(pix_assign / max(pix_assign))
plotImageArray(pix_assign)
plotImageArray(pix_assign / max(pix_assign))
as_cimg <- imager::as.cimg(pix_assign)
# 2. combine assignment matrix with color centers to make image:
# armed with the above two matrices, make a picture!
centers <- color.clusters$centers
index_cimg <- imager::as.cimg(pix_assign)
final_cimg <- imager::as.cimg(pix_assign)
# 2. combine assignment matrix with color centers to make image:
# armed with the above two matrices, make a picture!
centers <- color.clusters$centers
index_cimg <- imager::as.cimg(pix_assign)
final_cimg <- imager::as.cimg(pix_assign)
for (i in 1:nrow(centers)) {
layer <- index_cimg == i
substrate <- colorise(final_cimg,
layer,
centers[i, ])
}
for (i in 1:nrow(centers)) {
layer <- index_cimg == i
substrate <- imager::colorise(final_cimg,
layer,
centers[i, ])
}
# 2. combine assignment matrix with color centers to make image:
# armed with the above two matrices, make a picture!
centers <- color.clusters$centers
index_cimg <- imager::as.cimg(pix_assign)
final_cimg <- imager::as.cimg(pix_assign)
final_cimg <- sapply(1:nrow(centers), function(i) imager::colorise(final_cimg,
index_cimg == i,
centers[i, ]))
plot(final_cimg)
# 2. combine assignment matrix with color centers to make image:
# armed with the above two matrices, make a picture!
centers <- color.clusters$centers
index_cimg <- imager::as.cimg(pix_assign)
final_cimg <- imager::as.cimg(pix_assign)
final_cimg <- sapply(1:nrow(centers), function(i) imager::colorise(final_cimg,
index_cimg == i,
centers[i, ]))
plot(final_cimg)
# 2. combine assignment matrix with color centers to make image:
# armed with the above two matrices, make a picture!
centers <- color.clusters$centers
index_cimg <- imager::as.cimg(pix_assign)
final_cimg <- imager::as.cimg(pix_assign)
for (i in 1:nrow(centers)) {
substrate <- imager::colorise(final_cimg,
index_cimg == i,
centers[i, ])
}
plot(final_cimg)
centers
# 2. combine assignment matrix with color centers to make image:
# armed with the above two matrices, make a picture!
centers <- color.clusters$centers
index_cimg <- imager::as.cimg(pix_assign)
final_cimg <- imager::as.cimg(pix_assign)
for (i in 1:nrow(centers)) {
final_cimg <- imager::colorise(final_cimg,
index_cimg == i,
centers[i, ])
}
plot(final_cimg)
# 2. combine assignment matrix with color centers to make image:
# armed with the above two matrices, make a picture!
centers <- color.clusters$centers
index_cimg <- imager::as.cimg(pix_assign)
final_cimg <- imager::as.cimg(pix_assign)
final_cimg <- imager::colorise(final_cimg,
index_cimg == 0,
"#FFFFFF00")
for (i in 1:nrow(centers)) {
final_cimg <- imager::colorise(final_cimg,
index_cimg == i,
centers[i, ])
}
plot(final_cimg)
dim(final_cimg)
# 2. combine assignment matrix with color centers to make image:
# armed with the above two matrices, make a picture!
centers <- rbind(c(1, 1, 1), color.clusters$centers)
index_cimg <- imager::as.cimg(pix_assign)
final_cimg <- imager::as.cimg(pix_assign)
for (i in 0:nrow(centers)) {
final_cimg <- imager::colorise(final_cimg,
index_cimg == i,
centers[i+1, ])
}
i
nrow(centers)
# 2. combine assignment matrix with color centers to make image:
# armed with the above two matrices, make a picture!
centers <- rbind(c(1, 1, 1), color.clusters$centers)
index_cimg <- imager::as.cimg(pix_assign)
final_cimg <- imager::as.cimg(pix_assign)
for (i in 0:nrow(centers)) {
final_cimg <- imager::colorise(final_cimg,
index_cimg == i,
centers[i+1, ])
}
centers
# 2. combine assignment matrix with color centers to make image:
# armed with the above two matrices, make a picture!
centers <- rbind(c(1, 1, 1), color.clusters$centers)
index_cimg <- imager::as.cimg(pix_assign)
final_cimg <- imager::as.cimg(pix_assign)
for (i in 0:nrow(centers) - 1) {
final_cimg <- imager::colorise(final_cimg,
index_cimg == i,
centers[i+1, ])
}
# 2. combine assignment matrix with color centers to make image:
# armed with the above two matrices, make a picture!
centers <- rbind(c(1, 1, 1), color.clusters$centers)
index_cimg <- imager::as.cimg(pix_assign)
final_cimg <- imager::as.cimg(pix_assign)
for (i in 0:(nrow(centers) - 1)) {
final_cimg <- imager::colorise(final_cimg,
index_cimg == i,
centers[i+1, ])
}
plot(final_cimg)
as_array <- recolorize:::cimg.to.array(final_cimg)
alpha_layer <- pix_assign
alpha_layer[which(alpha_layer > 0)] <- 1
as_array <- abind::abind(as_array,
alpha_layer,
along = 3)
plotImageArray(as_array)
plotImageArray(as_array[,,4])
alpha_layer <- logical(pix_assign)
alpha_layer <- as.logical(pix_assign)
plotImageArray(alpha_layer)
dim(alpha_layer)
# make a vector of 0's, one per image pixel
pix_assign <- rep(0, nrow(bg_indexed$flattened.img))
bg_indexed <- bg.indexed
# make a vector of 0's, one per image pixel
pix_assign <- rep(0, nrow(bg_indexed$flattened.img))
# swap in the color assignments for the pixels
pix_assign[-bg_indexed$idx.flat] <- color_clusters$pixel.assignments
color_clusters <- color.clusters
# make a vector of 0's, one per image pixel
pix_assign <- rep(0, nrow(bg_indexed$flattened.img))
# swap in the color assignments for the pixels
pix_assign[-bg_indexed$idx.flat] <- color_clusters$pixel.assignments
# and reshape:
dim(pix_assign) <- bg_indexed$img.dims[1:2]
dim(pix_assign)
alpha_layer <- as.logical(pix_assign)
dim(alpha_layer)
devtools::load_all(".")
# first, make a pixel assignment matrix:
pixel_assignments <- pixelAssignMatrix(bg.indexed,
color.clusters)
hist(index_cimg)
final_cimg <- imager::colorise(final_cimg,
index_cimg == 8,
centers[1, ])
final_cimg <- imager::colorise(final_cimg,
index_cimg == 8,
"magenta")
plot(final_cimg)
final_cimg <- imager::colorise(final_cimg,
index_cimg == 209,
"magenta")
plot(final_cimg)
# first, make a pixel assignment matrix:
pixel_assignments <- pixelAssignMatrix(bg.indexed,
color.clusters)
# make an image from the above information:
recolored_img <- constructImage(pixel_assignments$pixel_assignments,
pixel_assignments$color_centers,
background_color = "white")
recolored_img[ , , 4] <- 1
plotImageArray(recolored_img)
# first, make a pixel assignment matrix:
pixel_assignments <- pixelAssignMatrix(bg.indexed,
color.clusters)
color.clusters$centers
# make an image from the above information:
recolored_img <- constructImage(pixel_assignments$pixel_assignments,
pixel_assignments$color_centers,
background_color = "white")
plotImageArray(recolored_img)
# index background
bg.indexed <- backgroundIndex(img, bg.condition)
# color clusters & assign pixels
color.clusters <- colorClusters(bg.indexed$non.bg, method = method,
n = n, bins = bins,
color.space = color.space,
ref.white = ref.white)
# color clusters & assign pixels
color.clusters <- colorClusters(bg.indexed$non.bg, bins = 2, color.space = "sRGB")
# first, make a pixel assignment matrix:
pixel_assignments <- pixelAssignMatrix(bg.indexed,
color.clusters)
plotImageArray(pixel_assignments$pixel_assignments / 8)
plotColorPalette(color.clusters$centers)
# make an image from the above information:
recolored_img <- constructImage(pixel_assignments$pixel_assignments,
pixel_assignments$color_centers,
background_color = "white")
plotImageArray(recolored_img)
# make an image from the above information:
recolored_img <- constructImage(pixel_assignments$pixel_assignments,
color.clusters$centers,
background_color = "white")
plotImageArray(recolored_img)
pixel_assignments <- pixel_assignments$pixel_assignments
color_centers <- color.clusters$centers
plotColorPalette(color_centers)
# make two copies of matrix as a cimg object:
index_cimg <- imager::as.cimg(pixel_assignments)
final_cimg <- index_cimg
background_color == "white"
background_color = "white"
# make two copies of matrix as a cimg object:
index_cimg <- imager::as.cimg(pixel_assignments)
final_cimg <- index_cimg
# color the background in
# you won't see this unless you remove the alpha layer:
final_cimg <- imager::colorise(final_cimg,
index_cimg == 0,
background_color)
plot(final_cimg)
devtools::load_all(".")
# only two options for background recoloring...please...i have looked at
# enough magenta backgrounds
bg.recolor <- match.arg(bg.recolor, choices = c("transparent", "white"))
# first, make a pixel assignment matrix:
pixel_assignments <- pixelAssignMatrix(bg.indexed,
color.clusters)
# make an image from the above information:
recolored_img <- constructImage(pixel_assignments$pixel_assignments,
color.clusters$centers,
background_color = "white")
plotImageArray(recolored_img)
devtools::load_all(".")
library(recolorize)
devtools::load_all(".")
# first, make a pixel assignment matrix:
pixel_assignments <- pixelAssignMatrix(bg.indexed,
color.clusters)
pixel_assignments$color_centers
# make an image from the above information:
recolored_img <- constructImage(pixel_assignments$pixel_assignments,
pixel_assignments$centers,
background_color = bg.color)
bg.color = "white"
# make an image from the above information:
recolored_img <- constructImage(pixel_assignments$pixel_assignments,
pixel_assignments$centers,
background_color = bg.color)
# make an image from the above information:
recolored_img <- constructImage(pixel_assignments$pixel_assignments,
color_centers = pixel_assignments$centers,
background_color = bg.color)
color_centers <- pixel_assignments$color_centers
color_centers
nrow(color_centers)
i
pixel_assignments <- pixel_assignments
# make two copies of matrix as a cimg object:
index_cimg <- imager::as.cimg(pixel_assignments)
pixel_assignments <- pixel_assignments$pixel_assignments
# make two copies of matrix as a cimg object:
index_cimg <- imager::as.cimg(pixel_assignments)
# make two copies of matrix as a cimg object:
index_cimg <- imager::as.cimg(pixel_assignments)
final_cimg <- index_cimg
# color the background in
# you won't see this unless you remove the alpha layer:
final_cimg <- imager::colorise(final_cimg,
index_cimg == 0,
background_color)
plot(final_cimg)
# color in every color center:
for (i in 1:nrow(color_centers)) {
final_cimg <- imager::colorise(final_cimg,
index_cimg == i,
color_centers[i, ])
}
plot(final_cimg)
recolorize(img)
devtools::load_all(".")
recolorize(img)
bg.condition
# index background
bg.indexed <- backgroundIndex(img, bg.condition)
color.clusters
# recolor based on assignments/centers
recolored <- recolorImage(bg.indexed, color.clusters,
plotting = FALSE,
remove.empty.clusters = FALSE)
# first, make a pixel assignment matrix:
pixel_assignments <- pixelAssignMatrix(bg.indexed,
color.clusters)
# make an image from the above information:
recolored_img <- constructImage(pixel_assignments$pixel_assignments,
pixel_assignments$centers,
background_color = bg.color)
color_centers <- pixel_assignments$color_centers
pixel_assignments <- pixel_assignments$pixel_assignments
# make two copies of matrix as a cimg object:
index_cimg <- imager::as.cimg(pixel_assignments)
final_cimg <- index_cimg
# color the background in
# you won't see this unless you remove the alpha layer:
final_cimg <- imager::colorise(final_cimg,
index_cimg == 0,
background_color)
plot(final_cimg)
# color in every color center:
for (i in 1:nrow(color_centers)) {
final_cimg <- imager::colorise(final_cimg,
index_cimg == i,
color_centers[i, ])
}
# convert to a regular array:
as_array <- cimg.to.array(final_cimg)
# and add an alpha channel:
alpha_layer <- pixel_assignments
alpha_layer[which(alpha_layer > 0)] <- 1
as_array <- abind::abind(as_array,
alpha_layer,
along = 3)
# make an image from the above information:
recolored_img <- constructImage(pixel_assignments$pixel_assignments,
pixel_assignments$centers,
background_color = bg.color)
img.path <- system.file("extdata/chongi", package = "recolorize")
# generate a white background condition
bg.condition <- backgroundCondition(alpha.channel = TRUE,
transparent = TRUE)
# index background pixels
bg.indexed <- backgroundIndex(img, bg.condition)
# and cluster them:
color.clusters <- colorClusters(bg.indexed$non.bg,
bins = 2,
color.space = "sRGB")
devtools::load_all(".")
img.path <- system.file("extdata/chongi", package = "recolorize")
# generate a white background condition
bg.condition <- backgroundCondition(alpha.channel = TRUE,
transparent = TRUE)
# index background pixels
bg.indexed <- backgroundIndex(img, bg.condition)
img <- system.file("extdata/chongi", package = "recolorize")
# generate a white background condition
bg.condition <- backgroundCondition(alpha.channel = TRUE,
transparent = TRUE)
# index background pixels
bg.indexed <- backgroundIndex(img, bg.condition)
img.path <- system.file("extdata/chongi", package = "recolorize")
img <- readImage(img.path)
# generate a white background condition
bg.condition <- backgroundCondition(alpha.channel = TRUE,
transparent = TRUE)
# index background pixels
bg.indexed <- backgroundIndex(img, bg.condition)
img.path <- system.file("extdata/chongi", package = "recolorize")
img <- readImage(img.path)
# generate a white background condition
bg.condition <- backgroundCondition(alpha.channel = TRUE,
transparent = TRUE)
# index background pixels
bg.indexed <- backgroundIndex(img, bg.condition)
img
img.path <- system.file("extdata/chongi", package = "recolorize")
img.path <- system.file("extdata/chongi.png", package = "recolorize")
img <- readImage(img.path)
# generate a white background condition
bg.condition <- backgroundCondition(alpha.channel = TRUE,
transparent = TRUE)
# index background pixels
bg.indexed <- backgroundIndex(img, bg.condition)
# and cluster them:
color.clusters <- colorClusters(bg.indexed$non.bg,
bins = 2,
color.space = "sRGB")
# recolor image:
pixel_assignments <- pixelAssignMatrix(bg.indexed, color.clusters)
test <- constructImage(pixel_assignments$pixel_assignments,
pixel_assignments$color_centers)
# first, make a pixel assignment matrix:
pixel_assignments <- pixelAssignMatrix(bg.indexed,
color.clusters)
# make an image from the above information:
recolored_img <- constructImage(pixel_assignments$pixel_assignments,
pixel_assignments$centers,
background_color = bg.color)
bg.color = "white"
# make an image from the above information:
recolored_img <- constructImage(pixel_assignments$pixel_assignments,
pixel_assignments$centers,
background_color = bg.color)
# make an image from the above information:
recolored_img <- constructImage(pixel_assignments$pixel_assignments,
pixel_assignments$centers)
pixel_assignments$color_centers
img.path <- system.file("extdata/chongi.png", package = "recolorize")
img <- readImage(img.path)
# generate a white background condition
bg.condition <- backgroundCondition(alpha.channel = TRUE,
transparent = TRUE)
# index background pixels
bg.indexed <- backgroundIndex(img, bg.condition)
# and cluster them:
color.clusters <- colorClusters(bg.indexed$non.bg,
bins = 2,
color.space = "sRGB")
# recolor image:
pixel_assignments <- pixelAssignMatrix(bg.indexed, color.clusters)
test <- constructImage(pixel_assignments$pixel_assignments,
pixel_assignments$color_centers)
