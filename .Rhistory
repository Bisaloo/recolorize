par(mar = rep(1, 4))
lapply(k_list, function(i) plotColorPalette(i$centers, i$sizes))
k_list <- lapply(1:3, function(i) recolorize(img_path, "k", n = 10, plotting = F))
layout(1:3)
par(mar = rep(1, 4))
lapply(k_list, function(i) plotColorPalette(i$centers, i$sizes))
options(rmarkdown.html_vignette.check_title = FALSE)
options(rmarkdown.html_vignette.check_title = FALSE)
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 50,
highlight_color = "cyan")
img
init_fit <- recolorize(img, method = "hist", bins = 2,
color_space = "sRGB")
```{r, fig.width = 4}
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 50,
highlight_color = "cyan")
refined_fit <- recluster(init_fit, similarity_cutoff = 45)
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 50,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 50,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 25,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 15,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 1,
size_condition = function(s) s <= 15,
highlight_color = "cyan")
final_fit <- editLayer(refined_fit, 3,
operation = "fill", px_size = 4)
final_fit <- editLayer(absorb_black, 3,
operation = "fill", px_size = 4)
absorb_black <- absorbLayer(refined_fit, layer_idx = 1,
size_condition = function(s) s <= 15,
highlight_color = "cyan")
final_fit <- editLayer(absorb_black, 3,
operation = "fill", px_size = 4)
absorb_red <- absorbLayer(refined_fit, layer_idx = 1,
size_condition = function(s) s <= 15,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 15,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 20,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 15,
highlight_color = "cyan")
final_fit <- editLayer(absorb_red, 3,
operation = "fill", px_size = 4)
```{r, fig.width=5}
final_fit <- editLayer(absorb_red, 3,
operation = "fill", px_size = 4)
ful <- readImage(system.file("extdata/fulgidissima.png", package = "recolorize"))
ful_blur <- blurImage(ful, "blur_anisotropic", amplitude = 10, sharpness = 0.5, plotting = FALSE)
# 2 color
ful1 <- suppressMessages(recolorize2(ful_blur, bins = 3, cutoff = 100,
color_space = "Lab", plotting = FALSE))
ful2 <- absorbLayer(ful1, 2, function(s) s <= 300, plotting=F)
# 5 color
ful3 <- recolorize2(ful_blur, bins = 3, cutoff = 60, color_space = "sRGB", plotting = F)
layout(matrix(1:3, nrow = 1))
plotImageArray(raster_to_array(ful1$original_img))
title(main = "original", font.main = 1)
plotImageArray(recoloredImage(ful2))
title(main = "map 1", font.main = 1)
plotImageArray(recoloredImage(ful3))
title(main="map 2", font.main = 1)
ful <- readImage(system.file("extdata/fulgidissima.png", package = "recolorize"))
ful_blur <- blurImage(ful, "blur_anisotropic", amplitude = 10, sharpness = 0.5, plotting = FALSE)
# 2 color
ful1 <- suppressMessages(recolorize2(ful_blur, bins = 3, cutoff = 100,
color_space = "Lab", plotting = FALSE))
ful2 <- absorbLayer(ful1, 2, function(s) s <= 300, plotting=F)
# 5 color
ful3 <- recolorize2(ful_blur, bins = 3, cutoff = 60, color_space = "sRGB", plotting = F)
layout(matrix(1:3, nrow = 1))
plotImageArray(raster_to_array(ful1$original_img))
title(main = "original", font.main = 1)
plotImageArray(recoloredImage(ful2))
title(main = "map 1", font.main = 1)
plotImageArray(recoloredImage(ful3))
title(main="map 2", font.main = 1)
ful <- readImage(system.file("extdata/fulgidissima.png", package = "recolorize"))
ful_blur <- blurImage(ful, "blur_anisotropic", amplitude = 10, sharpness = 0.5, plotting = FALSE)
# 2 color
ful1 <- suppressMessages(recolorize2(ful_blur, bins = 3, cutoff = 100,
color_space = "Lab", plotting = FALSE))
ful2 <- absorbLayer(ful1, 2, function(s) s <= 300, plotting=F)
# 5 color
ful3 <- recolorize2(ful_blur, bins = 3, cutoff = 60, color_space = "sRGB", plotting = F)
layout(matrix(1:3, nrow = 1))
plotImageArray(raster_to_array(ful1$original_img))
title(main = "original    ", font.main = 1)
plotImageArray(recoloredImage(ful2))
title(main = "map 1    ", font.main = 1)
plotImageArray(recoloredImage(ful3))
title(main="map 2    ", font.main = 1)
# using histogram
r_hist <- recolorize(img_path, method = "hist", bins = 2, plotting = T)
r_hist <- recolorize(img_path, method = "hist", bins = c(5, 2, 2), plotting = T)
# using histogram
r_hist <- recolorize(img_path, method = "hist", color_space = "Lab",
bins = 2, plotting = T)
r_hist <- recolorize(img_path,
method = "hist",
bins = c(5, 2, 2), plotting = T)
r_hist <- recolorize(img_path,
method = "hist",
bins = c(3, 2, 2), plotting = T)
r_hist <- recolorize(img_path,
method = "hist",
bins = c(3, 1, 2), plotting = T)
r_hist <- recolorize(img_path,
method = "hist",
bins = c(3, 2, 1), plotting = T)
#
r_hist_2 <- recolorize(img_path, method = "hist", color_space = "Lab",
bins = 2, plotting = T)
r_hist_322 <- recolorize(img_path,
method = "hist",
bins = c(3, 2, 2), plotting = T)
plotClusters(r_hist_2$centers, r_hist_2$sizes)
plotColorClusters(r_hist_2$centers, r_hist_2$sizes)
im1 <- system.file("extdata/ocellata.png", package = "recolorize")
im2 <- system.file("extdata/ephippigera.png", package = "recolorize")
# fit the first image
fit1 <- recolorize(im1)
# fit the second image using colors from the first
fit2 <- imposeColors(im2, fit1$centers, adjust_centers = FALSE)
recluster_results <- recluster(recolorize_defaults,
similarity_cutoff = 45)
corbetti_fit <- recolorize2(img, cutoff = 45)
# this is identical to running:
# fit1 <- recolorize(img, bins = 2)
# fit2 <- recluster(fit1, similarity_cutoff = 45)
img <- system.file("extdata/chongi.png", package = "recolorize")
chongi_fit <- recolorize2(img, cutoff = 45)
chongi_fit <- recolorize2(img, bins = 3 cutoff = 40)
chongi_fit <- recolorize2(img, bins = 3, cutoff = 40)
chongi_fit <- recolorize2(img, bins = 3, cutoff = 60)
chongi_fit <- recolorize2(img, bins = 3, cutoff = 50)
chongi_fit <- recolorize2(img, bins = 3, cutoff = 55)
# this is identical to running:
# fit1 <- recolorize(img, bins = 3)
# fit2 <- recluster(fit1, similarity_cutoff = 50)
chongi_fit <- recolorize2(img, bins = 3, cutoff = 45)
chongi_threshold <- thresholdRecolor(chongi_fit, pct = 0.05)
chongi_threshold <- thresholdRecolor(chongi_fit, pct = 0.1)
img <- system.file("extdata/fulgidissima.png", package = "recolorize")
ful_init <- recolorize2(img)
ful_init <- recolorize2(img, cutoff = 50)
ful_init <- recolorize2(img, color_space = "Lab", cutoff = 50)
ful_init <- recolorize2(img, bins = 3, cutoff = 50)
ful_init <- recolorize2(img, bins = 3, cutoff = 60)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 1000)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 500)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 400)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 300)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 200)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 250)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 250,
y_range = c(0, 0.8))
ful_init <- recolorize2(img, bins = 3, cutoff = 60, plotting = F)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 250,
y_range = c(0, 0.8),
highlight_color = "cyan")
ful_clean <- editLayers(ful_absorb, layer_idx = c(2, 5),
operations = "fill", px_sizes = 2)
ful_clean <- editLayers(ful_absorb, layer_idx = c(2, 5),
operations = "fill", px_sizes = 3, plotting = T)
merge_fit <- mergeLayers(recolorize_defaults,
merge_list = list(1, 2,
c(3, 5),
c(4, 7),
c(6, 8)))
dist_original <- imDist(recluster_results$original_img,
recluster_results$recolored_img, color_space = "Lab")
dist_original <- imDist(img,
recluster_results$recolored_img, color_space = "Lab")
dist_original <- imDist(readImage(img),
recoloredImage(ful_clean), color_space = "Lab")
```{r, fig.width = 3}
dist_original <- imDist(readImage(img),
recoloredImage(ful_clean), color_space = "Lab")
```{r, fig.width = 3, fig.height=4}
dist_original <- imDist(readImage(img),
recoloredImage(ful_clean), color_space = "Lab")
dist_original <- imDist(readImage(img),
recoloredImage(ful_clean), color_space = "Lab")
imHeatmap(dist_original, colorRamps::ygobb(100))
imHeatmap(dist_original, colorRamps::primary.colors(100))
imHeatmap(dist_original, colorRamps::blue2green(100))
imHeatmap(dist_original, colorRamps::matlab.like(100))
imHeatmap(dist_original, colorRamps::cyan2yellow(100))
imHeatmap(dist_original, colorRamps::magenta2green(100))
imHeatmap(dist_original, colorRamps::green2red(100))
imHeatmap(dist_original, colorRamps::blue2yellow(100))
imHeatmap(dist_original, viridisLite::inferno(100))
# more plotting options
imHeatmap(dist_original, viridisLite::inferno(100), range = c(0, 130))
# calculates the distance matrix and plots the results
dist_original <- imDist(readImage(img),
recoloredImage(ful_clean), color_space = "sRGB")
# more plotting options - setting the range is important for comparing
# across images
imHeatmap(dist_original, viridisLite::inferno(100), range = c(0, 130))
# more plotting options - setting the range is important for comparing
# across images
imHeatmap(dist_original, viridisLite::inferno(100), range = c(0, sqrt(3)))
```{r, fig.width = 4, fig.height=3}
hist(dist_original, main = "sRGB distances", xlab = "Distance")
layout(matrix(1:10, nrow = 2, byrow = TRUE))
# 'overlay' is not always the clearest option, but it is usually the prettiest:
layers <- splitByColor(recluster_results, plot_method = "overlay")
# layers is a list of matrices, which we can just plot:
lapply(layers, image)
layout(matrix(1:10, nrow = 2, byrow = TRUE))
# 'overlay' is not always the clearest option, but it is usually the prettiest:
layers <- splitByColor(recluster_results, plot_method = "overlay")
# layers is a list of matrices, which we can just plot:
lapply(layers, plotImageArray)
layout(matrix(1:10, nrow = 2, byrow = TRUE))
# 'overlay' is not always the clearest option, but it is usually the prettiest:
layers <- splitByColor(recluster_results, plot_method = "overlay")
# layers is a list of matrices, which we can just plot:
lapply(layers, plotImageArray)
layout(matrix(1:10, nrow = 2, byrow = TRUE))
# 'overlay' is not always the clearest option, but it is usually the prettiest:
layers <- splitByColor(recluster_results, plot_method = "overlay")
# layers is a list of matrices, which we can just plot:
lapply(layers, plotImageArray)
# type = raster gets you a raster (like original_img); type = array gets you an
# image array
recolored_img <- recoloredImage(recolorize_defaults, type = "array")
plotImageArray(recolored_img)
?pavo::coldist
library(rlang); library(magrittr)
library(rlang)
steps <- {fit <- recolorize2(img, cutoff = 45)}
fit <- recolorize2(img,bins = 3, cutoff = 50)
fit2 <- editLayers(fit, c(2, 5),
operations = "fill", px_sizes = 3)
steps <- {
fit <- recolorize2(img,bins = 3, cutoff = 50)
fit2 <- editLayers(fit, c(2, 5),
operations = "fill", px_sizes = 3)
} %>% enexprs()
steps <- {
fit <- recolorize2(img,bins = 3, cutoff = 50)
fit2 <- editLayers(fit, c(2, 5),
operations = "fill", px_sizes = 3)
} %>% enexprs
steps
rc_werner <- wernerColor(recluster_results)
rc_werner <- wernerColor(recluster_results)
img
img <- system.file("extdata/chongi.png", package = "recolorize")
img
library(recolorize)
recolorize_obj <- recolorize2(img, n_final = 1)
test <- splitByColor(img)
test <- splitByColor(recolorize_obj)
layers == "all"
layers = "all"
# check layers argument
if (layers == "all") {
layer_idx <- 1:nrow(recolorize_obj$centers)
} else if (is.numeric(layers)) {
# use all colors
layer_idx <- layers
} else {
stop("'layers' must be 'all' or a numeric vector of layer indices
matching the order of the color centers")
}
# get color centers
centers <- recolorize_obj$centers[layer_idx, ]
layer_idx
nrow(recolorize_obj$centers)
# make an empty list for the layer bitmaps
color_masks <- vector("list", length = length(layer_idx))
# convert pixel assignment to cimg object
img <- imager::as.cimg(recolorize_obj$pixel_assignments)
for (i in 1:length(layer_idx)) {
# get index
px <- imager::imsub(img) == layer_idx[i]
# get color layer as a bitmap
layer <- as.numeric(px)
dim(layer) <- dim(img)[1:2]
# store bitmap
color_masks[[i]] <- layer
}
plot_method = "overlay"
# get transparent pixset
alpha_px <- imager::imsub(img) == 0
rgb_img <- array_to_cimg(constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers))
rgb_img <- recoloredImage(recolorize_obj)
# make grayscale image
grimg <- imager::grayscale(imager::rm.alpha(rgb_img), drop = FALSE)
rgb_img <- recolorize:::array_to_cimg(constructImage(recolorize_obj$pixel_assignments,
recolorize_obj$centers))
dim(rgb_img)
rgb_img <- recoloredImage(recolorize_obj)
rgb_img <- recolorize:::array_to_cimg(rgb_img)
# make grayscale image
grimg <- imager::grayscale(imager::rm.alpha(rgb_img), drop = FALSE)
grimg[alpha_px] <- 1
centers
centers[i, 1]
centers
matrix(centers, ncol = 3)
recolorize_obj <- recolorize2(img, n_final = 2)
img
im <- system.file("extdata/chongi.png", package = "recolorize")
recolorize_obj <- recolorize2(im, n_final = 2)
# check layers argument
if (layers == "all") {
layer_idx <- 1:nrow(recolorize_obj$centers)
} else if (is.numeric(layers)) {
# use all colors
layer_idx <- layers
} else {
stop("'layers' must be 'all' or a numeric vector of layer indices
matching the order of the color centers")
}
# get color centers
centers <- recolorize_obj$centers[layer_idx, ]
centers
matrix(centers, ncol = 3)
devtools::load_all(".")
recolorize_obj <- recolorize2(im, n_final = 1)
splitByColor(recolorize_obj)
plotColorPalette(recolorize_obj$centers)
plotColorPalette(recolorize_obj$centers, recolorize_obj$sizes)
devtools::load_all(".")
?col2col
?hclust_color
devtools::load_all(".")
devtools::load_all(".")
?adjustcolor
## Illustrative examples :
opal <- palette("default")
stopifnot(identical(adjustcolor(1:8,       0.75),
adjustcolor(palette(), 0.75)))
cbind(palette(), adjustcolor(1:8, 0.75))
devtools::load_all(".")
# make colors darker/lighter, more intense
plotColorPalette(palette())
palette()
# make colors darker/lighter, more intense
plotColorPalette(palette()[-1])
palette()[-1]
# make colors darker/lighter, more intense
plotColorPalette(palette()[-c(1, 8)])
plotColorPalette(adjustcolor(palette, 0.75))
plotColorPalette(adjustcolor(palette(), 0.75))
# make colors darker/lighter, more intense
p <- palette()
# make colors darker/lighter, more intense
p <- palette()
p[1] <- "#000000"
p[8] <- gray(0.62)
plotColorPalette(p)
plotColorPalette(adjustcolor(palette(), 0.75))
plotColorPalette(adjustcolor(palette(), 1.2))
plotColorPalette(adjustcolor(palette(), 1.5))
plotColorPalette(adjustcolor(palette(), 0.5))
p <- adjustcolor(p, 0.5)
plotColorPalette(p)
p <- col2rgb(p)
p
# make colors darker/lighter, more intense
p <- palette()
p[1] <- "#000000"
p[8] <- gray(0.62)
plotColorPalette(p)
plotColorPalette(p)
p <- adjustcolor(p, 0.5)
p <- t(col2rgb(p))
p
p <- p / 255
p
# convert to HSV
col2col(p)
# convert to HSV
as_hsv <- col2col(p)
# multiply
as_hsv * c(1, 1.1, 1.5)
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
saturation <- 1.1
brightness <- 1.5
# convert to HSV
as_hsv <- col2col(p)
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv > 1
# rescale
as_hsv[which(as_hsv > 1)] <- 1
as_hsv
# convert to HSV
as_hsv <- col2col(p, to = "hsv")
# convert to HSV
as_hsv <- col2col(p, to = "HSV")
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv[which(as_hsv > 1)] <- 1
# convert to RGB
as_rgb <- col2col()
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
as_rgb
# spit out
plotColorPalette(as_rgb)
?convertColor
user_par <- par()
adjust_color <- function(rgb_color,
saturation = 1,
brightness = 1, plotting = FALSE) {
# convert to HSV
as_hsv <- col2col(rgb_color, to = "HSV")
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv[which(as_hsv > 1)] <- 1
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
if (plotting) {
# courtesy:
current_par <- graphics::par()
layout(matrix(1:2, nrow = 2))
plotColorPalette(rgb_color)
plotColorPalette(as_rgb)
# be nice!
graphics::par(mfrow = current_par$mfrow,
mar = current_par$mar)
}
# spit out
return(as_rgb)
}
adjust_color(p, saturation = 1.1, brightness = 1.1, plotting = TRUE)
adjust_color(p, saturation = 1.5, brightness = 1.1, plotting = TRUE)
adjust_color(p, saturation = 1.5, brightness = 1.5, plotting = TRUE)
adjust_color(p, saturation = 1, brightness = 1.5, plotting = TRUE)
adjust_color(p, saturation = 1.5, brightness = 0.9, plotting = TRUE)
?palette
p
palette.colors(n = NULL, palette = "Okabe-Ito", alpha, recycle = FALSE)
palette.colors(n = NULL, palette = "Okabe-Ito", recycle = FALSE)
grDevices::palette.colors()
devtools::load_all(".")
rm(adjust_color())
rm(adjust_color
)
devtools::load_all(".")
?adjust_color
devtools::load_all(".")
?adjust_color
p <- grDevices::palette.colors()
adjust_color(p)
?col2col
devtools::load_all(".")
?adjust_color
p <- grDevices::palette.colors()
p <- t(col2rgb(p)/ 255 )
adjust_color(p)
p <- grDevices::palette.colors()
p <- t(col2rgb(p)/ 255 )
adjust_color(p)
p <- grDevices::palette.colors()
p <- t(col2rgb(p)/ 255 )
adjust_color(p, plotting = T)
adjust_color(p, saturation = 1.5, brightness = 1.1, plotting = TRUE)
devtools::load_all(".")
?adjust_color
p <- grDevices::palette.colors()
p <- t(col2rgb(p)/ 255 )
p_1 <- adjust_color(p, saturation = 1.5,
brightness = 1.1,
plotting = TRUE)
p_2 <- adjust_color(p,
saturation = rep(c(0.5, 1, 1.5), 3),
brightness = rep(c(0.5, 1, 1.5), 3))
p <- grDevices::palette.colors()
p <- t(col2rgb(p)/ 255 )
p_1 <- adjust_color(p, saturation = 1.5,
brightness = 1.1,
plotting = TRUE)
p_2 <- adjust_color(p,
saturation = rep(c(0.5, 1, 1.5), 3),
brightness = rep(c(0.5, 1, 1.5), 3), plotting = T)
