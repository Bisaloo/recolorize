as.matrix(p, ncol = 3, byrow = TRUE)
matrix(p, ncol = 3, byrow = TRUE)
# generate a palette:
p <- grDevices::palette.colors()
# convert to RGB using col2rgb, then divide by 255 to get it into a
# 0-1 range:
p <- t(col2rgb(p)/ 255 )
matrix(p, ncol = 3, byrow = TRUE)
p
matrix(p, ncol = 3)
matrix(p[1, ], ncol = 3)
m1 <- matrix(0, nrow = 10, ncol = 3)
m1
m1[c(3, 5, 8), ] <- matrix(1, nrow = 3, ncol = 3)
m1
m1[c(3, 5, 8), ] <- matrix(1:9, nrow = 3, ncol = 3)
m1
m1[c(3, 5, 8), ] <- matrix(1:9, nrow = 3, ncol = 3, byrow = T)
m1
f <- function(rgb_color,
which_colors = "all",
saturation = 1,
brightness = 1,
plotting = FALSE) {
rgb_color <- matrix(rgb_color, ncol = 3)
if (which_colors == "all") {
which_colors <- 1:nrow(rgb_color)
}
# convert to HSV
as_hsv <- col2col(rgb_color[which_colors, ], to = "HSV")
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv[which(as_hsv > 1)] <- 1
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
rgb_color[which_colors, ] <- as_rgb
if (plotting) {
# courtesy:
current_par <- graphics::par()
layout(matrix(1:2, nrow = 2))
par(mar = rep(1, 4))
plotColorPalette(rgb_color)
plotColorPalette(as_rgb)
# be nice!
graphics::par(mfrow = current_par$mfrow,
mar = current_par$mar)
}
# spit out
return(as_rgb)
}
p
f <- function(rgb_color,
which_colors = "all",
saturation = 1,
brightness = 1,
plotting = FALSE) {
original_rgb <- rgb_color
rgb_color <- matrix(rgb_color, ncol = 3)
if (which_colors == "all") {
which_colors <- 1:nrow(rgb_color)
}
# convert to HSV
as_hsv <- col2col(rgb_color[which_colors, ], to = "HSV")
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv[which(as_hsv > 1)] <- 1
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
rgb_color[which_colors, ] <- as_rgb
if (plotting) {
# courtesy:
current_par <- graphics::par()
layout(matrix(1:2, nrow = 2))
par(mar = rep(1, 4))
plotColorPalette(original_rgb)
plotColorPalette(rgb_color)
# be nice!
graphics::par(mfrow = current_par$mfrow,
mar = current_par$mar)
}
# spit out
return(rgb_color)
}
f(p, which_colors = 3, saturation = 2, plotting = TRUE)
original_rgb <- rgb_color
rgb_color <- p
original_rgb <- rgb_color
rgb_color <- matrix(rgb_color, ncol = 3)
which_colors = 3
if (which_colors == "all") {
which_colors <- 1:nrow(rgb_color)
}
# convert to HSV
as_hsv <- col2col(rgb_color[which_colors, ], to = "HSV")
rgb_color[which_colors, ]
f <- function(rgb_color,
which_colors = "all",
saturation = 1,
brightness = 1,
plotting = FALSE) {
original_rgb <- rgb_color
if (which_colors == "all") {
which_colors <- 1:nrow(rgb_color)
}
# convert to HSV
rgb_color <- matrix(rgb_color[which_colors, ], ncol = 3)
as_hsv <- col2col(rgb_color, to = "HSV")
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv[which(as_hsv > 1)] <- 1
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
rgb_color[which_colors, ] <- as_rgb
if (plotting) {
# courtesy:
current_par <- graphics::par()
layout(matrix(1:2, nrow = 2))
par(mar = rep(1, 4))
plotColorPalette(original_rgb)
plotColorPalette(rgb_color)
# be nice!
graphics::par(mfrow = current_par$mfrow,
mar = current_par$mar)
}
# spit out
return(rgb_color)
}
f(p, which_colors = 3, saturation = 2, plotting = TRUE)
rgb_color
original_rgb <- rgb_color
if (which_colors == "all") {
which_colors <- 1:nrow(rgb_color)
}
# convert to HSV
rgb_color <- matrix(rgb_color[which_colors, ], ncol = 3)
rgb_color
as_hsv <- col2col(rgb_color, to = "HSV")
as_hsv
saturation
saturation = 2
brightness = 1
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
as_hsv
# rescale
as_hsv[which(as_hsv > 1)] <- 1
as_hsv
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
as_rgb
rgb_color
f <- function(rgb_color,
which_colors = "all",
saturation = 1,
brightness = 1,
plotting = FALSE) {
original_rgb <- rgb_color
if (which_colors == "all") {
which_colors <- 1:nrow(rgb_color)
}
# convert to HSV
rgb_color_temp <- matrix(rgb_color[which_colors, ], ncol = 3)
as_hsv <- col2col(rgb_color_temp, to = "HSV")
# multiply
as_hsv[ , 2] <- as_hsv[ , 2] * saturation
as_hsv[ , 3] <- as_hsv[ , 3] * brightness
# rescale
as_hsv[which(as_hsv > 1)] <- 1
# convert to RGB
as_rgb <- col2col(as_hsv, "HSV", "sRGB")
rgb_color[which_colors, ] <- as_rgb
if (plotting) {
# courtesy:
current_par <- graphics::par()
layout(matrix(1:2, nrow = 2))
par(mar = rep(1, 4))
plotColorPalette(original_rgb)
plotColorPalette(rgb_color)
# be nice!
graphics::par(mfrow = current_par$mfrow,
mar = current_par$mar)
}
# spit out
return(rgb_color)
}
f(p, which_colors = 3, saturation = 2, plotting = TRUE)
f(p, which_colors = 3, saturation = 2, brightness = 2, plotting = TRUE)
f(p, which_colors = 4,
saturation = 2,
brightness = 2, plotting = TRUE)
which_colors = 1:9
if (which_colors == "all") {
which_colors <- 1:nrow(rgb_color)
}
img
img <- system.file("extdata/corbetti.png", package = "recolorize")
devtools::load_all(".")
rc <- recolorize2(img, cutoff = 45)
img <- rc$original_img
# get transparent pixset
alpha_px <- imager::imsub(img) == 0
rgb_img <- array_to_cimg(recoloredImage(recolorize_obj))
recolorize_obj <- rc
rgb_img <- array_to_cimg(recoloredImage(recolorize_obj))
# make grayscale image
grimg <- imager::grayscale(imager::rm.alpha(rgb_img), drop = FALSE)
grimg[alpha_px] <- 1
plot(grimg)
grimg
grimg * 1.1
plot(grimg * 1.1)
plot(grimg * 100)
for (i in 1:nrow(rc)) {
centers <- rc$centers
for (j in 1:nrow(centers)[-i]) {
centers[j, ] <- mean(centers[j, ])
}
}
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
for (j in 1:nrow(centers)[-i]) {
centers[j, ] <- mean(centers[j, ])
}
}
i
1:nrow(centers)[-i]
centers
nrow(centers)
1:nrow(centers)
1:nrow(centers)[-1]
(1:nrow(centers))[-1]
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- mean(centers[j, ])
}
}
centers
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- mean(centers[j, ])
}
plot(constructImage(rc$pixel_assignments, centers))
}
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- mean(centers[j, ])
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
luminances <- convertColor(centers, "sRGB", "Lab")
luminances <- convertColor(centers, "sRGB", "Lab")[ , 1]
luminances
luminances <- convertColor(centers, "sRGB", "Lab")[ , 1] / 100
luminances
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
luminances <- convertColor(centers, "sRGB", "Lab")[ , 1] / 100
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- luminances[j] * 1.2
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
luminances <- convertColor(centers, "sRGB", "Lab")[ , 1] / 100
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- luminances[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
luminances <- col2col(centers, "sRGB", "HSV")
luminances
centers
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "HSV")[ , 3]
v <- v * 1.2
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "HSV")[ , 3]
v <- v * 1.01
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
x <- 1:100
plot(x / (1 + x))
plot(x / (1 + x))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "HSV")[ , 3]
v <- v + v / (1 + v)
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "HSV")[ , 3]
v <- v + v / (1 + v)
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "HSV")[ , 3]
v <- v + 0.05 * (v / (1 + v))
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "Lab")[ , 1]
v <- v + 0.05 * (v / (1 + v))
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "Lab")[ , 1] / 100
v <- v + 0.05 * (v / (1 + v))
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
v <- apply(centers, 1, mean)
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "Lab")[ , 1] / 100
v <- apply(centers, 1, mean)
v <- v + 0.05 * (v / (1 + v))
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
v
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "Lab")[ , 1] / 100
v <- apply(centers, 1, mean)
v <- v + 0.5 * (v / (1 + v))
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "Lab")[ , 1] / 100
v <- apply(centers, 1, mean)
v <- v + (v / (1 + v))
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
plot(x / (.5 + x))
plot(x / (.5 + x))
plot(x / (1.5 + x))
plot(x / (5 + x))
plot(x / (50 + x))
plot(x / (20 + x))
plot(x / (10 + x))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "Lab")[ , 1] / 100
v <- apply(centers, 1, mean)
v <- v + (v / (5 + v))
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "Lab")[ , 1] / 100
v <- apply(centers, 1, mean)
v <- v + (v / (5 + v))
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "Lab")[ , 1] / 100
v <- apply(centers, 1, mean)
v <- v + (v / (15 + v))
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "Lab")[ , 1] / 100
v <- apply(centers, 1, mean)
v <- v + (v / (5 + v))
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "Lab")[ , 1] / 100
v <- apply(centers, 1, mean)
v <- v + (v / (2 + v))
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
layout(matrix(1:5, nrow = 1))
for (i in 1:nrow(rc$centers)) {
centers <- rc$centers
v <- col2col(centers, "sRGB", "Lab")[ , 1] / 100
v <- apply(centers, 1, mean)
v <- v + (v / (1.5 + v))
v[which(v > 1)] <- 1
for (j in (1:nrow(centers))[-i]) {
centers[j, ] <- v[j]
}
plotImageArray(constructImage(rc$pixel_assignments, centers))
}
plot(sqrt(x))
plot(sqrt(x))
plot(x / sqrt(x))
plot(x2)
plot(x^2)
plot(x^2 + x)
plot(2*x^2 + 3*x)
plot(2*x^2 + 3*x + -10)
plot(2(x - 3)^2)
plot(2*(x - 3)^2)
plot(2*(x - 3)^2 - 8)
x = seq(0, 1, by = 0.1)
plot(2*(x - 3)^2 - 8)
plot(x, 2*(x - 3)^2 - 8)
x = -50:50
plot(x, 2*(x - 3)^2 - 8)
x = 0:100
plot(x, 2*(x - 3)^2 - 50)
plot(x, 2*(x - 3)^2 - 100)
plot(x, 2*(x - 50)^2 - 100)
plot(x, 2*(x - 50)^2)
plot(x, -2*(x - 50)^2)
?as.raster
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 45)
recolorize_to_png(rc, "corbetti_recolored.png")
devtools::load_all(".")
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 45)
recolorize_to_png(rc, "corbetti_recolored.png")
devtools::load_all(".")
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- recolorize2(img, cutoff = 45)
recolorize_to_png(rc, "corbetti_recolored.png")
