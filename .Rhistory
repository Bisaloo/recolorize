zlab = "b (blue-yellow)")
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
init_fit <- recolorize(corbetti,
color_space = "Lab",
method = "k",
n = 30)
# we still have to convert to Lab color space first, since the centers are always RGB:
centers <- grDevices::convertColor(init_fit$centers, "sRGB", "Lab")
plotColorClusters(centers, init_fit$sizes,
scaling = 25,
color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (blue-yellow)", cex.lab = 0.5)
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
init_fit <- recolorize(corbetti,
color_space = "Lab",
method = "k",
n = 30)
# we still have to convert to Lab color space first, since the centers are always RGB:
centers <- grDevices::convertColor(init_fit$centers, "sRGB", "Lab")
plotColorClusters(centers, init_fit$sizes,
scaling = 25, plus = 0.05,
color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (blue-yellow)", cex.lab = 0.5)
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
init_fit <- recolorize(corbetti,
color_space = "Lab",
method = "k",
n = 30)
# we still have to convert to Lab color space first, since the centers are always RGB:
centers <- grDevices::convertColor(init_fit$centers, "sRGB", "Lab")
plotColorClusters(centers, init_fit$sizes,
scaling = 25, plus = 0.25,
color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (blue-yellow)", cex.lab = 0.5)
par(mfrow = c(2, 2), mar = rep(2, 4))
testo()
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
init_fit <- recolorize(corbetti,
color_space = "Lab",
method = "k",
n = 30)
# we still have to convert to Lab color space first, since the centers are always RGB:
centers <- grDevices::convertColor(init_fit$centers, "sRGB", "Lab")
plotColorClusters(centers, init_fit$sizes,
scaling = 25,
color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (blue-yellow)")
testo()
par(mfrow = c(2, 2), mar = rep(2, 4))
testo()
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
init_fit <- recolorize(corbetti,
color_space = "Lab",
method = "k",
n = 30)
# we still have to convert to Lab color space first, since the centers are always RGB:
centers <- grDevices::convertColor(init_fit$centers, "sRGB", "Lab")
plotColorClusters(centers, init_fit$sizes,
scaling = 25,
color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (blue-yellow)")
testo()
par(mfrow = c(2, 2), mar = rep(2, 4))
testo()
devtools::run_examples
devtools::run_examples()
testo()
devtools::build_vignettes()
devtools::check_win_release()
devtools::load_all(".")
devtools::load_all(".")
library(recolorize)
?plotColorClusters
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
init_fit <- recolorize(corbetti,
color_space = "Lab",
method = "k",
n = 30)
# we still have to convert to Lab color space first, since the centers are always RGB:
centers <- grDevices::convertColor(init_fit$centers, "sRGB", "Lab")
plotColorClusters(centers, init_fit$sizes,
scaling = 25,
color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (blue-yellow)",
cex.lab = 0.5)
library(recolorize)
current_par <- graphics::par(no.readonly = TRUE)
img <- system.file("extdata/corbetti.png", package = "recolorize")
loaded_image <- readImage(img_path = img, resize = NULL, rotate = NULL)
blurred_image <- blurImage(loaded_image, blur_function = "medianblur", n = 3, threshold = 5)
rc_hist <- recolorize(img, method = "hist", bins = 2, color_space = "sRGB")
rc_k <- recolorize(img, method = "k", n = 8, color_space = "sRGB")
rc <- recolorize2(img, cutoff = 45)
colors <- c("tomato",
"limegreen",
"dodgerblue",
"cornsilk",
"black")
colors <- t(col2rgb(colors)) / 255
imposed <- imposeColors(img, centers = colors)
recluster_fit <- recluster(rc_hist, cutoff = 45)
rc_thresh <- thresholdRecolor(rc_hist, pct = 0.01)
rc_werner <- wernerColor(recluster_fit)
absorb_red <- absorbLayer(recluster_fit,
layer_idx = 3,
size_condition = function(s) s <= 100,
highlight_color = "cyan")
rc_edit <- editLayer(absorb_red,
layer_idx = 3,
operation = "fill",
px_size = 2)
merged_rc <- mergeLayers(rc_hist, merge_list = list(c(4, 7),
c(3, 5),
c(6, 8)))
layout(matrix(1:4, nrow = 1))
plotImageArray(loaded_image, main = "original")
plotImageArray(loaded_image[ , , 1], main = "red")
plotImageArray(loaded_image[ , , 2], main = "green")
plotImageArray(loaded_image[ , , 3], main = "blue")
layout(matrix(1:4, nrow = 1))
par(mar = c(0, 0, 2, 0))
plotImageArray(loaded_image, main = "original")
plotImageArray(loaded_image[ , , 1], main = "red")
plotImageArray(loaded_image[ , , 2], main = "green")
plotImageArray(loaded_image[ , , 3], main = "blue")
layout(matrix(1:2, nrow = 1))
par(mar = rep(0, 4))
im_dist <- imDist(im1 = raster_to_array(recluster_fit$original_img),
im2 = recoloredImage(recluster_fit), color_space = "Lab")
imHeatmap(im_dist, palette = viridisLite::viridis(100),
legend = FALSE)
par(mar = rep(1, 4))
plotColorClusters(recluster_fit$centers,
recluster_fit$sizes,
color_space = "sRGB",
xlab = "red", ylab = "green", zlab = "blue")
par(mar = rep(1, 4))
plotColorClusters(recluster_fit$centers,
recluster_fit$sizes,
color_space = "sRGB",
xlim = 0:1, ylim = 0:1, zlim = 0:1,
xlab = "red", ylab = "green", zlab = "blue")
par(mar = rep(1, 4))
plotColorClusters(recluster_fit$centers,
recluster_fit$sizes,
color_space = "sRGB",
xlim = 0:1, ylim = 0:1, zlim = 0:1,
scaling = 25, plus = 0.15,
xlab = "red", ylab = "green", zlab = "blue")
par(mar = rep(1, 4))
plotColorClusters(recluster_fit$centers,
recluster_fit$sizes,
color_space = "sRGB",
xlim = 0:1, ylim = 0:1, zlim = 0:1,
scaling = 15, plus = 0.15,
xlab = "red", ylab = "green", zlab = "blue")
par(mar = rep(1, 4))
plotColorClusters(recluster_fit$centers,
recluster_fit$sizes,
color_space = "sRGB",
xlim = 0:1, ylim = 0:1, zlim = 0:1,
scaling = 15, plus = 0.15, alpha = 0.9,
xlab = "red", ylab = "green", zlab = "blue")
devtools::install_github("hiweller/recolorize")
devtools::load_all(".")
devtools::install_github("hiweller/recolorize")
devtools::install_github("hiweller/recolorize")
devtools::install_github("hiweller/recolorize")
library(recolorize)
current_par <- graphics::par(no.readonly = TRUE)
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- suppressMessages(recolorize2(img,
cutoff = 45, plotting = FALSE))
v <- system.file("extdata/msc/corbetti_vector.rds", package = "recolorize")
v <- readRDS(v)
layout(matrix(1:4, nrow = 1), widths = c(0.3, 0.3, 0.3, 0.1))
par(mar = c(1, 1, 3, 1))
plotImageArray(readImage(img))
title("Original    ", line = 2, font.main = 1, cex.main = 1.2)
plotImageArray(recoloredImage(rc))
title("Color map (bitmap)    ", line = 2, font.main = 1, cex.main = 1.2)
par(mar = c(1, 1, 3, 1))
plot(v)
title("Color map (vector)", font.main = 1, cex.main = 1.2)
plotColorPalette(rc$centers, rc$sizes, horiz = F)
library(recolorize)
current_par <- graphics::par(no.readonly = TRUE)
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- suppressMessages(recolorize2(img,
cutoff = 45, plotting = FALSE))
v <- system.file("extdata/msc/corbetti_vector.rds", package = "recolorize")
v <- readRDS(v)
layout(matrix(1:4, nrow = 1), widths = c(0.3, 0.3, 0.3, 0.1))
par(mar = c(1, 1, 3, 1))
plotImageArray(readImage(img))
title("Original    ", line = 1, font.main = 1, cex.main = 1.2)
plotImageArray(recoloredImage(rc))
title("Color map (bitmap)    ", line = 1, font.main = 1, cex.main = 1.2)
par(mar = c(1, 1, 3, 1))
plot(v)
title("Color map (vector)", font.main = 1, cex.main = 1.2)
plotColorPalette(rc$centers, rc$sizes, horiz = F)
library(recolorize)
current_par <- graphics::par(no.readonly = TRUE)
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- suppressMessages(recolorize2(img,
cutoff = 45, plotting = FALSE))
v <- system.file("extdata/msc/corbetti_vector.rds", package = "recolorize")
v <- readRDS(v)
layout(matrix(1:4, nrow = 1), widths = c(0.3, 0.3, 0.3, 0.1))
par(mar = c(0, 0, 2, 0))
plotImageArray(readImage(img))
title("Original    ", line = 1, font.main = 1, cex.main = 1.2)
plotImageArray(recoloredImage(rc))
title("Color map (bitmap)    ", line = 1, font.main = 1, cex.main = 1.2)
plot(v)
title("Color map (vector)", font.main = 1, cex.main = 1.2)
plotColorPalette(rc$centers, rc$sizes, horiz = F)
library(recolorize)
current_par <- graphics::par(no.readonly = TRUE)
img <- system.file("extdata/corbetti.png", package = "recolorize")
rc <- suppressMessages(recolorize2(img,
cutoff = 45, plotting = FALSE))
v <- system.file("extdata/msc/corbetti_vector.rds", package = "recolorize")
v <- readRDS(v)
layout(matrix(1:4, nrow = 1), widths = c(0.3, 0.3, 0.3, 0.1))
par(mar = c(1, 1, 3, 1))
plotImageArray(readImage(img))
title("Original    ", line = 1, font.main = 1, cex.main = 1.2)
plotImageArray(recoloredImage(rc))
title("Color map (bitmap)    ", line = 1, font.main = 1, cex.main = 1.2)
par(mar = c(1, 1, 3, 1))
plot(v)
title("Color map (vector)", font.main = 1, cex.main = 1.2)
plotColorPalette(rc$centers, rc$sizes, horiz = F)
# type = raster gets you a raster (like original_img); type = array gets you an
# image array
recolored_img <- recoloredImage(final_fit, type = "array")
rc_werner <- wernerColor(final_fit)
devtools::check_win_release()
devtools::check_rhub()
?absorbLayer
img <- system.file("extdata/fulgidissima.png", package = "recolorize")
# get an initial fit using recolorize + recluster:
fit1 <- recolorize2(img, bins = 3, cutoff = 65, plotting = FALSE)
# this looks okay, but the brown patch (3) has some speckling
# in the upper right elytron due to reflection, and the orange
# patch (4) has the same issue
# the brown patch is easier to deal with, since size thresholding alone is
# sufficient; we want to leave the stripes intact, so we'll absorb components
# that are 50-250 pixels OR fewer than 20 pixels (to get the tiny speckles),
# leaving the eyes intact
fit2 <- absorbLayer(fit1, layer_idx = 3,
size_condition = function(x) x <= 250 &
x >= 50 |
x < 20,
highlight_color = "cyan")
# what about the orange speckles? this is more difficult, because
# we want to retain the border around the brown stripes, but those patches
# are quite small, so size thresholding won't work:
fit_bad <- absorbLayer(fit2, layer_idx = 4,
size_condition = function(x) x < 25)
# but we just want to target pixels in that one region, so we can first
# determine a bounding box for it by plotting a grid:
plotImageArray(constructImage(fit2$pixel_assignments,
fit2$centers))
axis(1, line = 3); axis(2, line = 1)
abline(v = seq(0, 1, by = 0.1),
h = seq(0, 1, by = 0.1),
col = grey(0.2),
lty = 2)
# x-axis range: 0.5-0.7
# y-axis range: 0.55-0.75
# let's try it:
fit3 <- absorbLayer(fit2, layer_idx = 4,
size_condition = function(x) x < 100,
x_range = c(0.5, 0.7),
y_range = c(0.55, 0.75),
highlight_color = "yellow")
# looks pretty good
devtools::check_rhub()
devtools::check_win_release()
library(recolorize)
# get path to image
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
# cluster using defaults
recolorize_defaults <- recolorize(img = corbetti)
img <- readImage(corbetti)
backgroundCondition(transparent = TRUE)
bg_condition <- backgroundCondition(transparent = TRUE)
backgroundIndex(img, bg_condition = backgroundCondition(transparent = TRUE))
pix <- backgroundIndex(img,
bg_condition = backgroundCondition(transparent = TRUE))
pix <- backgroundIndex(img,
bg_condition = backgroundCondition(transparent = TRUE,
quietly = TRUE))
pix <- backgroundIndex(img,
bg_condition = backgroundCondition(quietly = TRUE))
?backgroundCondition
pix <- backgroundIndex(img,
bg_condition = backgroundCondition(transparent = TRUE,
quietly = TRUE))
pix <- backgroundIndex(img,
bg_condition = backgroundCondition(transparent = TRUE,
alpha_channel = TRUE,
quietly = TRUE))
pix <- pix$non_bg
pix <- backgroundIndex(img,
bg_condition = backgroundCondition(transparent = TRUE,
alpha_channel = TRUE,
quietly = TRUE))
pix <- pix$non_bg[sample(1:nrow(pix$non_bg), 5000), ]
hex_colors <- rgb(pix)
head(hex_colors)
dim(pix)
plotColorClusters(pix, rep(1, length(hex_colors)),
scaling = 1, plus = 0,
color_space = "sRGB")
?plot3D::scatter3D
plot3D::scatter3D(pix[ , 1],
pix[ , 2],
pix[ , 3],
colvar = c(1:length(hex_colors)),
col = hex_colors, colkey = FALSE)
plot_colors <- function(rgb_matrix, color_space = "sRGB",
theta = 140, phi = 30, pch = 19, alpha = 0.5,
...) {
hex_colors <- rgb(r = rgb_matrix[ , 1],
g = rgb_matrix[ , 2],
b =  rgb_matrix[ , 3])
pix <- recolorize:::col2col(rgb_matrix, from = "sRGB", to = color_space)
plot3D::points3D(pix[,1], pix[,2], pix[,3],
colvar = as.numeric(as.factor(hex_colors)),
col = levels(as.factor(hex_colors)), colkey = FALSE,
theta = theta, phi = phi, pch = pch,
alpha = alpha,
...)
}
plot_colors(pix, color_space = "sRGB")
plot_colors(pix, color_space = "sRGB",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)")
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = 45)
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = -45)
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = 0)
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = 30)
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = 210)
th <- 45
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = th)
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = th + 180)
th <- 45
layout(matrix(1:2, nrow = 1))
par(mar = rep(1, 4))
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = th)
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = th + 180)
th <- 30
layout(matrix(1:2, nrow = 1))
par(mar = rep(1, 4))
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = th)
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = th + 180)
th <- 45
layout(matrix(1:2, nrow = 1))
par(mar = rep(1, 4))
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = th)
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = th + 180)
th <- 60
layout(matrix(1:2, nrow = 1))
par(mar = rep(1, 4))
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = th)
plot_colors(pix, color_space = "Lab",
xlab = "Luminance",
ylab = "a (red-green)",
zlab = "b (yellow-blue)", theta = th + 180)
plot_colors(pix, color_space = "sRGB",
xlab = "Red",
ylab = "Green",
zlab = "Blue", theta = th)
plot_colors(pix, color_space = "sRGB",
xlab = "Red",
ylab = "Green",
zlab = "Blue", theta = th + 180)
plot_colors(pix, color_space = "sRGB",
xlab = "Red",
ylab = "Green",
zlab = "Blue", theta = th,
alpha = 0.8)
plot_colors(pix, color_space = "sRGB",
xlab = "Red",
ylab = "Green",
zlab = "Blue",
alpha = 0.8,
theta = th + 180)
plot_colors(pix, color_space = "sRGB",
xlab = "Red",
ylab = "Green",
zlab = "Blue", theta = th,
alpha = 0.8,
main = "RGB color space")
plot_colors(pix, color_space = "sRGB",
xlab = "Red",
ylab = "Green",
zlab = "Blue",
alpha = 0.8,
theta = th + 180)
title("RGB color space", line = 1)
title("RGB color space", line = -1)
title("RGB color space", line = -2)
title("RGB color space", line = -3)
plot_colors(pix, color_space = "sRGB",
xlab = "Red",
ylab = "Green",
zlab = "Blue", theta = th,
alpha = 0.8)
title("RGB color space", line = -3)
plot_colors(pix, color_space = "sRGB",
xlab = "Red",
ylab = "Green",
zlab = "Blue",
alpha = 0.8,
theta = th + 180)
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_rhub()
devtools::build_vignettes()
library(recolorize)
current_par <- graphics::par(no.readonly = TRUE)
graphics::par(mar = c(0, 0, 2, 0))
layout(matrix(1:2, nrow = 1))
par(mar = rep(0, 4))
im_dist <- imDist(im1 = raster_to_array(recluster_fit$original_img),
im2 = recoloredImage(recluster_fit), color_space = "Lab")
rc_hist <- recolorize(img, method = "hist", bins = 2, color_space = "sRGB")
layout(matrix(1:2, nrow = 1))
par(mar = rep(0, 4))
im_dist <- imDist(im1 = raster_to_array(recluster_fit$original_img),
im2 = recoloredImage(recluster_fit), color_space = "Lab")
recluster_fit <- recluster(rc_hist, cutoff = 45)
layout(matrix(1:2, nrow = 1))
layout(matrix(1:2, nrow = 1))
par(mar = rep(0, 4))
im_dist <- imDist(im1 = raster_to_array(recluster_fit$original_img),
im2 = recoloredImage(recluster_fit), color_space = "Lab")
imHeatmap(im_dist, palette = colorRamps::ygobb(100),
legend = FALSE)
devtools::check_win_release()
devtools::build_vignettes()
devtools::check_win_release()
devtools::check_rhub()
devtools::release()
devtools::check_win_release()
devtools::check_rhub()
install.packages("updateR")
install.packages("installr")
installr::updateR()
devtools::check_win_devel()
