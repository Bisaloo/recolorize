for (i in 1:length(recolorize_list)) {
if (i == 1) {
adjacent_list <- recolorize_list
}
adjacent_list[[i]] <- recolorize_adjacency(recolorize_list[[i]])
}
# get image
img <- recolorize_obj$recolored_img
# fit a classify obj
# class_img <- suppressWarnings(classify(as.rimg(img),
#                       kcols = nrow(recolorize_obj$centers) + 1))
class_img <- classify_recolorize(recolorize_obj)
# get hsl colors
hsl_colors <- rgb2hsl(attr(class_img, "classRGB"))
if (colnames(hsl_colors) == colnames(hsl) &
nrow(hsl_colors) == nrow(hsl)) {
hsl_colors <- hsl
} else if (is.data.frame(hsl)) {
warning("`hsl` dataframe incorrectly formatted; calculating
hsl using standard (human) HSL values")
}
hsl = "default"
# get hsl colors
hsl_colors <- rgb2hsl(attr(class_img, "classRGB"))
if (colnames(hsl_colors) == colnames(hsl) &
nrow(hsl_colors) == nrow(hsl)) {
hsl_colors <- hsl
} else if (is.data.frame(hsl)) {
warning("`hsl` dataframe incorrectly formatted; calculating
hsl using standard (human) HSL values")
}
hsl_colors
dimnames(hsl_colors)
dimnames(hsl_colors)[[2]]
# get hsl colors
hsl_colors <- rgb2hsl(attr(class_img, "classRGB"))
if (dimnames(hsl_colors)[[2]] == colnames(hsl) &
nrow(hsl_colors) == nrow(hsl)) {
hsl_colors <- hsl
} else if (is.data.frame(hsl)) {
warning("`hsl` dataframe incorrectly formatted; calculating
hsl using standard (human) HSL values")
}
nrow(hsl_colors)
# the background will be white (we made it white),
# so we can identify it via the lightness channel:
bkgID <- which(hsl_colors$lum == max(hsl_colors$lum))
# get color distances in pavo coldist format:
# important- these are CIE Lab/human color distances
# the "chromatic" (dS) distances are in the a & b (color) channels
# the "achromatic" (dL) channels are in the luminance (L) axis
coldists <- cielab_coldist(attr(class_img, "classRGB"))
devtools::load_all(".")
rm(list = c("classify_recolorize", "recolorize_adjacency", "rgb2hsl"))
devtools::load_all(".")
?recolorize_adjacency
devtools::load_all(".")
devtools::load_all(".")
?recolorize_adjacency
img <- system.file("extdata/chongi.png", package = "recolorize")
recolorize_obj <- recolorize(img, method = "k", n = 2)
recolorize_adjacency(recolorize_obj)
devtools::load_all(".")
img <- system.file("extdata/chongi.png", package = "recolorize")
recolorize_obj <- recolorize(img, method = "k", n = 2)
recolorize_adjacency(recolorize_obj)
add_image <- function(obj, x = NULL,
y = NULL,
width = NULL,
interpolate = TRUE ){
usr <- par()$usr
pin <- par()$pin
imdim <- dim(obj)
sf <- imdim[1] / imdim[2]
w <- width / (usr[2] - usr[1]) * pin[1]
h <- w * sf
hu <- h / pin[2] * (usr[4] - usr[3])
graphics::rasterImage(image = obj,
xleft = x - (width / 2), xright = x + (width / 2),
ybottom = y - (hu / 2), ytop = y + (hu/2),
interpolate = interpolate)
}
?png::readPNG
layout(matrix(1:5, nrow = 1))
for (i in 1:length(images)) {
plotImageArray(readImage(images[i]))
}
# the gang's all here!
# KINDA NOT BAD WHEN WE SPECIFIED NOTHING ABOUT EACH INDIVIDUAL IMAGE?
layout(matrix(1:length(images), nrow = 1))
for (i in recolorize_list) {
plotImageArray(i$recolored_img)
}
# get pavo adjacency stuff
for (i in 1:length(recolorize_list)) {
if (i == 1) {
adjacent_list <- recolorize_list
}
adjacent_list[[i]] <- recolorize_adjacency(recolorize_list[[i]])
}
# get dataframe of interesting values...
for (j in 1:length(adjacent_list)) {
temp <- adjacent_list[[j]]
temp <- temp[-grep("p_|q_|t_|B|R", colnames(temp))]
if (j == 1) {
adjacent_df <- temp
} else {
adjacent_df <- rbind(adjacent_df, temp)
}
}
rownames(adjacent_df) <- names(adjacent_list)
add_image <- function(obj, x = NULL,
y = NULL,
width = NULL,
interpolate = TRUE ){
usr <- par()$usr
pin <- par()$pin
imdim <- dim(obj)
sf <- imdim[1] / imdim[2]
w <- width / (usr[2] - usr[1]) * pin[1]
h <- w * sf
hu <- h / pin[2] * (usr[4] - usr[3])
graphics::rasterImage(image = obj,
xleft = x - (width / 2), xright = x + (width / 2),
ybottom = y - (hu / 2), ytop = y + (hu/2),
interpolate = interpolate)
}
{x <- adjacent_df$m_dL; xlab = "Mean achromatic contrast"
y <- adjacent_df$m_dS; ylab = "Mean chromatic contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean achromatic contrast"
y <- adjacent_df$m_dS; ylab = "Mean chromatic contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
main = "Adjacency & boundary strength analysis")
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
main = "Adjacency & boundary strength analysis")
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.5 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
main = "Adjacency & boundary strength analysis")
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.5 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
main = "Adjacency & boundary strength analysis")
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.5 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
main = "Adjacency & boundary strength analysis",
cex.text = 2)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.5 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
main = "Adjacency & boundary strength analysis",
cex.lab = 2)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.5 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
main = "Adjacency & boundary strength analysis",
cex = 2)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.5 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
main = "Adjacency & boundary strength analysis",
cex.main = 2, cex.lab = 1.5)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.5 * length(recolorize_list)))
}
}
par(mar = rep(3, 4))
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
main = "Adjacency & boundary strength analysis",
cex.main = 2, cex.lab = 1.5)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.5 * length(recolorize_list)))
}
}
par(mar = rep(4, 4))
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
main = "Adjacency & boundary strength analysis",
cex.main = 2, cex.lab = 1.5)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.5 * length(recolorize_list)))
}
}
par(mar = rep(4.5, 4))
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
main = "Adjacency & boundary strength analysis",
cex.main = 2, cex.lab = 1.5)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.5 * length(recolorize_list)))
}
}
par(mar = rep(4.5, 4))
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
main = "Adjacency & boundary strength analysis",
cex.main = 2, cex.lab = 1.5)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1 * length(recolorize_list)))
}
}
par(mar = rep(4.5, 4))
{x <- adjacent_df$m_dL; xlab = "Mean luminance contrast"
y <- adjacent_df$m_dS; ylab = "Mean color contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
main = "Adjacency & boundary strength analysis",
cex.main = 2, cex.lab = 1.5)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.2 * length(recolorize_list)))
}
}
?adjacent
par(mar = rep(4.5, 4))
{x <- adjacent_df$m_dL; xlab = "Boundary strength (luminanc)"
y <- adjacent_df$m_dS; ylab = "Boundary strength (color)"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
cex.main = 2, cex.lab = 1.5)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.2 * length(recolorize_list)))
}
}
par(mar = c(5, 5, 2, 2))
{x <- adjacent_df$m_dL; xlab = "Boundary strength (luminance)"
y <- adjacent_df$m_dS; ylab = "Boundary strength (color)"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
cex.main = 2, cex.lab = 1.5)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.2 * length(recolorize_list)))
}
}
par(mar = c(5, 5, 2, 2))
{x <- adjacent_df$Jc; xlab = "Boundary strength (luminance)"
y <- adjacent_df$Jt; ylab = "Boundary strength (color)"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
cex.main = 2, cex.lab = 1.5)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.2 * length(recolorize_list)))
}
}
par(mar = c(5, 5, 2, 2))
{x <- adjacent_df$Jc; xlab = "Color diversity"
y <- adjacent_df$Jt; ylab = "Transition diversity"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab,
cex.main = 2, cex.lab = 1.5)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1.2 * length(recolorize_list)))
}
}
?rasterImage
images <- system.file("extdata", package = "recolorize")
images
images <- dir(system.file("extdata", package = "recolorize"))
images
images <- dir(system.file("extdata", package = "recolorize"), ".png")
images
images <- dir(system.file("extdata", package = "recolorize"), ".png", full.names = TRUE)
plot(runif(5), runif(5), type = "n", xaxt = FALSE)
plot(runif(5), runif(5), type = "n")
plot(runif(5), runif(5), type = "n", axes = F)
plot(runif(5), runif(5), type = "n", ann = F)
plot(runif(5), runif(5), type = "n", xlab = "value 1", ylab = "value 2")
x <- runif(5)
y <- runif(5)
plot(x, y)
plot(x, y, xlim = c(-0.2, 1.2), ylim = c(-0.2, 1.2))
for (i in 1:length(images)) {
img <- readImage(images[i])
add_image(img, x[i], y[i], width = 0.1) }
devtools::load_all(".")
devtools::load_all(".")
?add_image
images <- dir(system.file("extdata", package = "recolorize"),
".png", full.names = TRUE)
x <- runif(5)
y <- runif(5)
plot(x, y,
xlim = range(x) + c(-0.2, 0.2),
ylim = range(y) + c(-0.2, 0.2))
for (i in 1:length(images)) {
img <- readImage(images[i])
add_image(img, x[i], y[i], width = 0.1)
}
