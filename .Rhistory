for (i in 1:nrow(centers)) {
cc <- recolorize.obj$centers[i, ]
dim(img) <- c(dim(img)[1:2], 1, 4)
rpx <- imgsplit$`c = 1` == c1[1]
gpx <- imgsplit$`c = 2` == c1[2]
bpx <- imgsplit$`c = 3` == c1[3]
apx <- imgsplit$`c = 4` > 0
layer <- as.numeric(parall(list(rpx, gpx, bpx, apx)))
dim(layer) <- dim(img)[1:2]
plotImageArray(layer, main = i)
}
centers <- recolorize.obj$centers
layout(matrix(1:nrow(centers), nrow = 2))
img <- recolorize.obj$recolored.img
dim(img) <- c(dim(img)[1:2], 1, 4)
img <- as.cimg(img)
imgsplit <- imager::imsplit(img, axis = 'c')
for (i in 1:nrow(centers)) {
cc <- recolorize.obj$centers[i, ]
dim(img) <- c(dim(img)[1:2], 1, 4)
rpx <- imgsplit$`c = 1` == cc[1]
gpx <- imgsplit$`c = 2` == cc[2]
bpx <- imgsplit$`c = 3` == cc[3]
apx <- imgsplit$`c = 4` > 0
layer <- as.numeric(parall(list(rpx, gpx, bpx, apx)))
dim(layer) <- dim(img)[1:2]
plotImageArray(layer, main = i)
}
c1 <- recolorize.obj$centers[1, ]
img <- recolorize.obj$recolored.img
dim(img)
img <- recolorize.obj$recolored.img
idx <- which(img[,,1] == c1[1])
idx
idx <- which(img[,,1] == c1[1] &
img[,,2] == c1[2] &
img[,,3] == c1[3])
idx
length(idx)
recolorize.obj$sizes
test <- arrayInd(idx, dim(img))
test
img2 <- img
img2[idx] <- 1
img2[!idx] <- 0
plotImageArray(img2)
dim(img2)
img2[1]
idx <- which(img[,,1] == c1[1] &
img[,,2] == c1[2] &
img[,,3] == c1[3], arr.ind = TRUE)
idx
centers <- recolorize.obj$centers
layout(matrix(1:nrow(centers), nrow = 2))
img <- recolorize.obj$recolored.img
dim(img) <- c(dim(img)[1:2], 1, 4)
img <- as.cimg(img)
imgsplit <- imager::imsplit(img, axis = 'c')
for (i in 1:nrow(centers)) {
cc <- recolorize.obj$centers[i, ]
dim(img) <- c(dim(img)[1:2], 1, 4)
rpx <- imgsplit$`c = 1` == cc[1]
gpx <- imgsplit$`c = 2` == cc[2]
bpx <- imgsplit$`c = 3` == cc[3]
apx <- imgsplit$`c = 4` > 0
layer <- as.numeric(parall(list(rpx, gpx, bpx, apx)))
dim(layer) <- dim(img)[1:2]
plotImageArray(layer, main = i)
}
parall(list(rpx, gpx, bpx, apx))
cc <- recolorize.obj$centers[i, ]
dim(img) <- c(dim(img)[1:2], 1, 4)
rpx <- imgsplit$`c = 1` == cc[1]
gpx <- imgsplit$`c = 2` == cc[2]
bpx <- imgsplit$`c = 3` == cc[3]
apx <- imgsplit$`c = 4` > 0
layer <- as.numeric(parall(list(rpx, gpx, bpx, apx)))
layer
dim(layer) <- dim(img)[1:2]
test <- array(c(layer, layer, layer), dim = c(dim(layer), 3))
layer <- as.numeric(parall(list(rpx, gpx, bpx, apx)))
dim(layer) <- dim(img)[1:2]
plot(layer)
layer <- as.numeric(parall(list(rpx, gpx, bpx, apx)))
dim(layer) <- dim(img)[1:2]
plot(parall(list(rpx, gpx, bpx, apx)))
plot(parall(list(rpx, gpx, bpx, apx)))
plot(parall(list(rpx, gpx, bpx, apx)), color = "red")
colorise(img, parall(list(rpx, gpx, bpx, apx)), col = "red")
centers <- recolorize.obj$centers
layout(matrix(1:nrow(centers), nrow = 2))
img <- recolorize.obj$recolored.img
dim(img) <- c(dim(img)[1:2], 1, 4)
img <- as.cimg(img)
imgsplit <- imager::imsplit(img, axis = 'c')
cc <- recolorize.obj$centers[i, ]
rpx <- imgsplit$`c = 1` == cc[1]
gpx <- imgsplit$`c = 2` == cc[2]
bpx <- imgsplit$`c = 3` == cc[3]
apx <- imgsplit$`c = 4` > 0
layer <- as.numeric(parall(list(rpx, gpx, bpx, apx)))
dim(layer) <- dim(img)[1:2]
test <- array(c(layer, layer, layer), dim = c(dim(layer), 3))
colorise(img, parall(list(rpx, gpx, bpx, apx)), col = "red")
dim(img)
px <- parall(list(rpx, gpx, bpx, apx))
layer <- as.numeric(px)
dim(layer) <- dim(img)[1:2]
plot(colorise(img, px, col = "red"))
dim(img)
dim(px)
plot(img)
plot(img)
highlight(px)
colorise(img, px, "red")
colorise(img[,,,1], px, "red")
gs <- grascale(img)
gs <- grayscale(img)
colorise(imgsplit$`c = 1`, px, "red")
plot(colorise(imgsplit$`c = 1`, px, "red"))
rgb(cc)
cc
rgb(cc[1], cc[2], cc[3])
color <- rgb(cc[1], cc[2], cc[3])
plot(colorise(img, px, col = color))
plot(colorise(imgsplit$`c = 1`, px, col = color))
img <- im2cimg(img)
img <- recolorize.obj$recolored.img
img <- im2cimg(img)
img
?im2cimg
?imsub()
img <- as.cimg(img)
centers <- recolorize.obj$centers
layout(matrix(1:nrow(centers), nrow = 2))
img <- recolorize.obj$recolored.img
dim(img) <- c(dim(img)[1:2], 1, 4)
img <- as.cimg(img)
rpx <- imsub(img, cc == 1) == cc[1]
gpx <- imgsplit$`c = 2` == cc[2]
bpx <- imgsplit$`c = 3` == cc[3]
apx <- imgsplit$`c = 4` > 0
px <- parall(list(rpx, gpx, bpx, apx))
layer <- as.numeric(px)
dim(layer) <- dim(img)[1:2]
plot(colorise(imgsplit$`c = 1`, px, col = color))
plot(colorise(imgsplit$`c = 1`, px, col = color))
imsub(img, cc == c(1, 2, 3))
imsub(img, cc == (1 | 2 | 3))
plot(imsub(img, cc == (1 | 2 | 3)))
plot(imsub(img, cc == (1 | 2 | 3)))
plot(imsub(img, cc == 1))
plot(imsub(img, cc == 2))
plot(imsub(img, cc == 3))
plot(imsub(img, cc == 1 | cc == 2 | cc == 3))
im2 <- img[,,,1:3]
class(im)
class(im2)
im2 <- as.cimg(img[,,,1:3])
plot(im2)
im2 <- grayscale(img[,,,1:3])
im2 <- rm.alpha(img)
im2
im2 <- grayscale(rm.alpha(img))
plot(im2)
plot(colorise(grimg, px, col = color))
grimg <- grayscale(rm.alpha(img))
plot(colorise(grimg, px, col = color))
plot(colorise(grimg, px, col = color))
test <- colorise(grimg, px, col = color)
test
imager::depth(test)
?color.at
im <- as.cimg(function(x,y) x+y,50,50)
at(im,10,1)
at(im,10:12,1)
at(im,10:12,1:3)
at(im,1,2) <- 10
at(im,1,2)
color.at(boats,x=10,y=10)
im <- boats
color.at(im,x=10,y=10) <- c(255,0,0)
#There should now be a red dot
imsub(im, x %inr% c(1,100), y %inr% c(1,100)) %>% plot
imager::color.at(img, px)
imager::color.at(img, which(px))
test <- colorise(grimg, px, col = color)
dim(recolorize.obj$original.img)
dim(test) <- dim(test)[c(1:2, 4)]
class(test)
dim(test)
px
plotImageArray(test)
grimg <- colorise(grimg, apx, "white", alpha = 0)
plot(grimg)
grimg <- grayscale(rm.alpha(img))
plot(grimg)
grimg <- colorise(grimg, apx, "white", alpha = 0)
grimg <- colorise(grimg, apx, "red", alpha = 0)
plot(grimg)
apx <- imsub(img, cc == 4) < 0
grimg <- grayscale(rm.alpha(img))
grimg <- colorise(grimg, apx, "red", alpha = 0)
plot(grimg)
apx <- imsub(img, cc == 4) < 0
plot(apx)
apx <- imsub(img, cc == 4) > 0
plot(apx)
apx <- imsub(img, cc == 4) == 0
plot(apx)
grimg <- grayscale(rm.alpha(img))
grimg <- colorise(grimg, apx, "red", alpha = 0)
plot(grimg)
grimg <- colorise(grimg, apx, "red")
plot(grimg)
grimg <- colorise(grimg, apx, "white")
plot(grimg)
test <- as.array(colorise(grimg, px, col = color), dim = dim(img))
test
dim(test)
dim(test) <- dim(test)[c(1:2, 4)]
plotImageArray(test)
for (i in 1:nrow(centers)) {
cc <- recolorize.obj$centers[i, ]
color <- rgb(cc[1], cc[2], cc[3])
rpx <- imsub(img, cc == 1) == cc[1]
gpx <- imsub(img, cc == 2) == cc[2]
bpx <- imsub(img, cc == 3) == cc[3]
px <- parall(list(rpx, gpx, bpx, apx))
layer <- as.numeric(px)
dim(layer) <- dim(img)[1:2]
layer_colored <- as.array(colorise(grimg, px, col = color),
dim = dim(img))
dim(layer_colored) <- dim(layer_colored)[c(1:2, 4)]
plotImageArray(layer_colored, main = i)
}
centers <- recolorize.obj$centers
layout(matrix(1:nrow(centers), nrow = 2))
img <- recolorize.obj$recolored.img
dim(img) <- c(dim(img)[1:2], 1, 4)
img <- as.cimg(img)
apx <- imsub(img, cc == 4) == 0
plot(apx)
for (i in 1:nrow(centers)) {
cc <- recolorize.obj$centers[i, ]
color <- rgb(cc[1], cc[2], cc[3])
rpx <- imsub(img, cc == 1) == cc[1]
gpx <- imsub(img, cc == 2) == cc[2]
bpx <- imsub(img, cc == 3) == cc[3]
px <- parall(list(rpx, gpx, bpx, apx))
layer <- as.numeric(px)
dim(layer) <- dim(img)[1:2]
layer_colored <- as.array(colorise(grimg, px, col = color),
dim = dim(img))
dim(layer_colored) <- dim(layer_colored)[c(1:2, 4)]
plotImageArray(layer_colored, main = i)
}
layout(matrix(1:nrow(centers), nrow = 2))
img <- recolorize.obj$recolored.img
dim(img) <- c(dim(img)[1:2], 1, 4)
img <- as.cimg(img)
apx <- imsub(img, cc == 4) == 0
grimg <- grayscale(rm.alpha(img))
grimg <- colorise(grimg, apx, "white")
for (i in 1:nrow(centers)) {
cc <- recolorize.obj$centers[i, ]
color <- rgb(cc[1], cc[2], cc[3])
rpx <- imsub(img, cc == 1) == cc[1]
gpx <- imsub(img, cc == 2) == cc[2]
bpx <- imsub(img, cc == 3) == cc[3]
px <- parall(list(rpx, gpx, bpx, apx))
layer <- as.numeric(px)
dim(layer) <- dim(img)[1:2]
layer_colored <- as.array(colorise(grimg, px, col = color),
dim = dim(img))
dim(layer_colored) <- dim(layer_colored)[c(1:2, 4)]
plotImageArray(layer_colored, main = i)
}
i
i = 1
cc <- recolorize.obj$centers[i, ]
color <- rgb(cc[1], cc[2], cc[3])
rpx <- imsub(img, cc == 1) == cc[1]
gpx <- imsub(img, cc == 2) == cc[2]
bpx <- imsub(img, cc == 3) == cc[3]
px <- parall(list(rpx, gpx, bpx))
layer <- as.numeric(px)
for (i in 1:nrow(centers)) {
cc <- recolorize.obj$centers[i, ]
color <- rgb(cc[1], cc[2], cc[3])
rpx <- imsub(img, cc == 1) == cc[1]
gpx <- imsub(img, cc == 2) == cc[2]
bpx <- imsub(img, cc == 3) == cc[3]
opx <- px <- imsub(img, cc == 4) > 0 # opacity
px <- parall(list(rpx, gpx, bpx, opx))
layer <- as.numeric(px)
dim(layer) <- dim(img)[1:2]
layer_colored <- as.array(colorise(grimg, px, col = color),
dim = dim(img))
dim(layer_colored) <- dim(layer_colored)[c(1:2, 4)]
plotImageArray(layer_colored, main = i)
}
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
test <- imposeColors(corbetti, wernerrgb,
adjust.centers = F, resid = F)
recolorize.obj <- recolorize(corbetti, "k", n = 10)
centers <- recolorize.obj$centers
layout(matrix(1:nrow(centers), nrow = 2))
img <- recolorize.obj$recolored.img
dim(img) <- c(dim(img)[1:2], 1, 4)
img <- as.cimg(img)
apx <- imsub(img, cc == 4) == 0
grimg <- grayscale(rm.alpha(img))
grimg <- colorise(grimg, apx, "white")
for (i in 1:nrow(centers)) {
cc <- recolorize.obj$centers[i, ]
color <- rgb(cc[1], cc[2], cc[3])
rpx <- imsub(img, cc == 1) == cc[1]
gpx <- imsub(img, cc == 2) == cc[2]
bpx <- imsub(img, cc == 3) == cc[3]
opx <- px <- imsub(img, cc == 4) > 0 # opacity
px <- parall(list(rpx, gpx, bpx, opx))
layer <- as.numeric(px)
dim(layer) <- dim(img)[1:2]
layer_colored <- as.array(colorise(grimg, px, col = color),
dim = dim(img))
dim(layer_colored) <- dim(layer_colored)[c(1:2, 4)]
plotImageArray(layer_colored, main = i)
}
nrow(centers)
nrow(centers) % 2
nrow(centers) %% 2
11 %% 2
nrow(centers) + nrow(centers) %% 2
centers
length(centers)
nrow(centers)
# make an empty list for the layer bitmaps
color_masks <- vector("list", length = nrow(centers))
# we need imager for this!
require(imager)
# if only plotting some layers, then extract those centers
if (is.numeric(colors)) {
centers <- recolorize.obj$centers[colors, ]
} else {
# use all colors
centers <- recolorize.obj$centers
}
# convert img to cimg object
img <- recolorize.obj$recolored.img
dim(img) <- c(dim(img)[1:2], 1, 4)
img <- as.cimg(img)
# get transparent pixset
alpha_px <- imsub(img, cc == 4) == 0
# for each color center...
for (i in 1:nrow(centers)) {
# extract color
cc <- recolorize.obj$centers[i, ]
color <- rgb(cc[1], cc[2], cc[3])
# get r, g, b channel matches
rpx <- imsub(img, cc == 1) == cc[1]
gpx <- imsub(img, cc == 2) == cc[2]
bpx <- imsub(img, cc == 3) == cc[3]
opx <- px <- imsub(img, cc == 4) > 0 # opacity
# get pixset for color indices
px <- parall(list(rpx, gpx, bpx, opx))
# get color layer as a bitmap
layer <- as.numeric(px)
dim(layer) <- dim(img)[1:2]
# store bitmap
color_masks[[i]] <- layer
}
plot_method = "overlay"
plot_method <- match.arg(plot_method,
choices = c("overlay",
"binary",
"colormask"))
if (plot_method == "overlay") {
# get transparent pixset
alpha_px <- imsub(img, cc == 4) == 0
# make grayscale image
grimg <- grayscale(rm.alpha(img))
grimg <- colorise(grimg, alpha_px, "white")
# plot em!
for (i in 1:length(color_masks)) {
index_image <- as.array(colorise(grimg, px, col = color),
dim = dim(img))
dim(layer_colored) <- dim(layer_colored)[c(1:2, 4)]
plotImageArray(layer_colored, main = i)
}
}
px <- color_masks[[i]]
index_image <- as.array(colorise(grimg, px, col = color),
dim = dim(img))
color_masks
plotImageArray(px)
px <- as.pixset(px)
dim(px)
dim(px) <- c(dim(px), 1, 1)
px <- as.pixset(px)
px <- as.logical(color_masks[[i]])
dim(px) <- c(dim(px), 1, 1)
px <- as.logical(color_masks[[i]])
px
dim(px)
px <- color_masks[[i]]
as.cimg(px)
as.cimg(px) > 0
px as.cimg(color_masks[[i]]) > 0
px <- as.cimg(color_masks[[i]]) > 0
index_image <- as.array(colorise(grimg, px, col = color),
dim = dim(img))
dim(layer_colored) <- dim(layer_colored)[c(1:2, 4)]
dim(layer_colored) <- dim(index_image)[c(1:2, 4)]
# plot em!
for (i in 1:length(color_masks)) {
px <- as.cimg(color_masks[[i]]) > 0
index_image <- as.array(colorise(grimg, px, col = color),
dim = dim(img))
dim(index_image) <- dim(index_image)[c(1:2, 4)]
plotImageArray(index_image, main = i)
}
# plot as binary map
lapply(color_masks, plotImageArray(main = i))
# get color
color <- rgb(centers[i, ])
# get color
color <- rgb(centers[i, 1],
centers[i, 2],
centers[i, 3])
devtools::load_all(".")
splitByColor(recolorize.obj)
layout(matrix(1:10, nrow = 5))
test <- splitByColor(recolorize.obj)
layout(matrix(1:10, nrow = 2))
test <- splitByColor(recolorize.obj)
test <- splitByColor(recolorize.obj, plot_method = "binary")
test <- splitByColor(recolorize.obj, plot_method = "color")
devtools::load_all(".")
test <- splitByColor(recolorize.obj, plot_method = "color")
devtools::load_all(".")
test <- splitByColor(recolorize.obj, plot_method = "color")
# get color
color <- rgb(centers[i, 1],
centers[i, 2],
centers[i, 3])
# get pixset
px <- as.cimg(color_masks[[i]]) > 0
# color it in
index_img <- as.array(colorise(as.cimg(color_masks[[i]]),
px, col = color),
dim = dim(img))
devtools::load_all(".")
# color it in
index_img <- as.array(colorise(as.cimg(color_masks[[i]]),
px, col = color),
dim = dim(img))
test <- splitByColor(recolorize.obj, plot_method = "color")
test <- imposeColors(corbetti, wernerrgb,
adjust.centers = F, resid = F)
recolorize.obj <- recolorize(corbetti, "k", n = 10)
layout(matrix(1:10, nrow = 2))
test <- splitByColor(recolorize.obj, plot_method = "color")
test <- splitByColor(recolorize.obj, plot_method = "binary")
test <- splitByColor(recolorize.obj, plot_method = "overlay")
recluster.obj <- recluster(recolorize.obj)
devtools::load_all(".")
recluster.obj <- recluster(recolorize.obj)
devtools::load_all(".")
recluster.obj <- recluster(recolorize.obj)
recluster.obj <- recluster(recolorize.obj, n_final = 5)
recluster.obj <- recluster(recolorize.obj, n_final = 6)
recolorize.obj <- recolorize(corbetti, "k", n = 20)
recluster.obj <- recluster(recolorize.obj, n_final = 6)
recolorize.obj <- recolorize(corbetti, bins = 4)
recluster.obj <- recluster(recolorize.obj, n_final = 6)
recluster.obj <- recluster(recolorize.obj)
recluster.obj <- recluster(recolorize.obj, plot_hclust = TRUE)
recluster.obj <- recluster(recolorize.obj, similarity_cutoff = 65,
plot_hclust = TRUE)
recluster.obj <- recluster(recolorize.obj, similarity_cutoff = 70,
plot_hclust = TRUE)
recluster.obj <- recluster(recolorize.obj, similarity_cutoff = 60,
plot_hclust = TRUE)
layout(matrix(1:10, nrow = 2))
dim(recluster.obj$centers)
layout(matrix(1:10, nrow = 2))
test <- splitByColor(recluster.obj, plot_method = "overlay")
recolorize.obj <- recolorize(corbetti, "kmeans", 20)
recolorize.obj <- recolorize(corbetti, "kmeans", 20)
recolorize.obj <- recolorize(corbetti, "kmeans", n = 20)
recluster.obj <- recluster(recolorize.obj, similarity_cutoff = 60,
plot_hclust = TRUE)
recluster.obj <- recluster(recolorize.obj, similarity_cutoff = 40,
plot_hclust = TRUE)
layout(matrix(1:10, nrow = 2))
test <- splitByColor(recluster.obj, plot_method = "overlay")
layout(matrix(1:6, nrow = 2))
test <- splitByColor(recluster.obj, plot_method = "overlay")
test <- splitByColor(recluster.obj, plot_method = "binary")
test <- splitByColor(recluster.obj, plot_method = "color")
# and plot it
plotImageArray(index_image, main = i)
implot(img)
plot(img)
highlight(px)
plot(img)
highlight(px)
highlight(px, col = "cyan")
devtools::load_all(".")
test <- splitByColor(recluster.obj, plot_method = "color")
test <- splitByColor(recluster.obj, plot_method = "overlay")
