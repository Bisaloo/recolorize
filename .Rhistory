dir.create("../output/")
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])), res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 10, height = 5,
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 10, height = 5,units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
why_are_you_like_this <- function(img.path) {
img <- png::readPNG(img.path)
bg.condition <- backgroundCondition(transparent = TRUE,
alpha.channel = TRUE)
bg.indexed <- backgroundIndex(img, bg.condition)
# normal things
kmeans.colors <- colorClusters(bg.indexed$non.bg,
method = "kmeans",
n = 5)
hist.colors <- colorClusters(bg.indexed$non.bg,
method = "hist", bins = 2)
# stupid things
shuffle <- function(m) {
m[sample(1:nrow(m), nrow(m)), ]
}
kmeans.shuffle <- kmeans.colors
kmeans.shuffle$centers <- shuffle(kmeans.shuffle$centers)
hist.shuffle <- hist.colors
hist.shuffle$centers <- shuffle(hist.shuffle$centers)
# recoloring...
kmeans.recolor <- recolorImage(bg.indexed, kmeans.colors)
hist.recolor <- recolorImage(bg.indexed, hist.colors)
kmeans.chaos <- recolorImage(bg.indexed, kmeans.shuffle)
hist.chaos <- recolorImage(bg.indexed, hist.shuffle)
layout(matrix(c(1, 2, 3, 4, 5),
ncol = 5))
plotImageArray(img, main = "original")
plotImageArray(kmeans.recolor$recolored.img, main = "kmeans")
plotImageArray(hist.recolor$recolored.img, main = "binning")
plotImageArray(kmeans.chaos$recolored.img, main = "I did this on purpose")
plotImageArray(hist.chaos$recolored.img, main = "THIS TOO I MEAN IT")
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
for (i in 1:length(images)) {
png(paste0("../output/", basename(images[i])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
}
png(paste0("../output/", basename(images[2])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[i])
dev.off()
i
i = 5
i = 2
png(paste0("../output/", basename(images[2])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[2])
dev.off()
png(paste0("../output/", basename(images[2])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[2])
dev.off()
png(paste0("../output/", basename(images[2])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[2])
dev.off()
png(paste0("../output/", basename(images[2])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[2])
dev.off()
png(paste0("../output/", basename(images[2])),
width = 8, height = 4, units = "in",
res = 300)
why_are_you_like_this(images[2])
dev.off()
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
system.file("extdata", package = "recolorize")
dir(system.file("extdata", package = "recolorize")_
dir(system.file("extdata", package = "recolorize"))
dir(system.file("extdata", package = "recolorize"), pattern = "png")
images <-dir(system.file("extdata", package = "recolorize"), pattern = "png")
recolorize(images[1])
devtools::load_all(".")
recolorize(images[1])
images <- dir(system.file("extdata", package = "recolorize"), pattern = "png")
images
images <- dir(system.file("extdata", package = "recolorize"),
pattern = "png", full.names = TRUE)
recolorize(images[1])
recolorize(images[1], method = "hist", bins = 2)
# kmeans, 10 colors
recolorize(images[1], n = 8)
recolorize(images[1], method = "hist", bins = 2)
# kmeans, 10 colors
kmeans.recolor <- recolorize(images[1], n = 8)
hist.recolor <- recolorize(images[1], method = "hist", bins = 2)
layout(matrix(c(1, 2, 3), ncol = 3))
# kmeans, 10 colors
kmeans.recolor <- recolorize(images[1], n = 8)
hist.recolor <- recolorize(images[1], method = "hist", bins = 2)
plotImageArray(kmeans.recolor$original.img, main = "original")
plotImageArray(kmeans.recolor$recolored.img, main = "kmeans")
plotImageArray(hist.recolor$recolored.img, main = "binning")
# increasing numbers of kmean colors
for (i in 1:10) {
recolorize(images[1], n = i)
}
devtools::load_all(".")
# default
recolorize(images[1])
recolorize(images[1], method = "kmeans")
recolorize(images[1], method = "kmeans", n = 8)
recolorize(images[1], bins = c(1, 3, 3))
recolorize(images[1], bins = c(2, 3, 3))
recolorize(images[1], bins = c(2, 3, 1))
recolorize(images[1], bins = c(2, 1, 1))
recolorize(images[1], bins = c(3, 2, 2))
# default: histogram, 2 bins/channel
recolorize(images[4])
# default: histogram, 2 bins/channel
recolorize(images[5])
# default: histogram, 2 bins/channel
recolorize(images[2])
# default: histogram, 2 bins/channel
recolorize(images[3])
# default: histogram, 2 bins/channel
recolorize(images[2])
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[1], bins = c(3, 2, 2))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[2], bins = c(3, 2, 2))
recolorize(images[2], bins = c(2, 3, 2))
recolorize(images[2], bins = c(2, 2, 3))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[2], bins = c(3, 2, 2))
recolorize(images[2], bins = c(2, 3, 2))
recolorize(images[2], bins = c(2, 2, 3))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[2], bins = c(10, 2, 2))
recolorize(images[2], bins = c(2, 10, 2))
recolorize(images[2], bins = c(2, 2, 10))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[2], bins = c(3, 1, 1))
recolorize(images[2], bins = c(1, 3, 1))
recolorize(images[2], bins = c(1, 1, 3))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[1], bins = c(3, 1, 1))
recolorize(images[1], bins = c(1, 3, 1))
recolorize(images[1], bins = c(1, 1, 3))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[1], bins = c(3, 2, 2))
recolorize(images[1], bins = c(2, 3, 2))
recolorize(images[1], bins = c(2, 2, 3))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[4], bins = c(3, 2, 2))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[3], bins = c(3, 2, 2))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[3], bins = c(3, 2, 2))
recolorize(images[3], bins = c(2, 3, 2))
recolorize(images[3], bins = c(2, 2, 3))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[3], bins = c(3, 1, 1))
recolorize(images[3], bins = c(1, 3, 1))
recolorize(images[3], bins = c(1, 1, 3))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[3], bins = c(5, 2, 2))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[3], bins = c(5, 2, 2))
recolorize(images[3], bins = c(2, 5, 2))
recolorize(images[3], bins = c(2, 2, 5))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[1], bins = c(5, 2, 2))
recolorize(images[1], bins = c(2, 5, 2))
recolorize(images[1], bins = c(2, 2, 5))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[2], bins = c(5, 2, 2))
recolorize(images[2], bins = c(2, 5, 2))
recolorize(images[2], bins = c(2, 2, 5))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[1], bins = c(5, 1, 1))
recolorize(images[1], bins = c(1, 5, 1))
recolorize(images[1], bins = c(1, 1, 5))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[1], bins = c(5, 1, 1))
recolorize(images[1], bins = c(1, 5, 1))
recolorize(images[1], bins = c(1, 1, 5))
# we can also have different numbers of bins per channel
# more red bins:
recolorize(images[1], bins = c(4, 1, 1))
recolorize(images[1], bins = c(1, 4, 1))
recolorize(images[1], bins = c(1, 1, 4))
# default: histogram, 2 bins/channel
recolorize(images[2])
# we can also have different numbers of bins per channel
recolorize(images[2], bins = c(4, 1, 1)) # mostly red
recolorize(images[2], bins = c(1, 1, 4)) # mostly blue
recolorize(images[1], method = "kmeans", n = 8)
# we can also have different numbers of bins per channel
recolorize(images[2], bins = c(4, 1, 1)) # mostly red
recolorize(images[2], bins = c(1, 4, 1)) # mostly green
recolorize(images[2], bins = c(1, 1, 4)) # mostly blue
# we can also have different numbers of bins per channel
recolorize(images[1], bins = c(4, 1, 1)) # mostly red
recolorize(images[1], bins = c(1, 4, 1)) # mostly green
recolorize(images[1], bins = c(1, 1, 4)) # mostly blue
# default: histogram, 2 bins/channel
recolorize(images[1])
# kmeans can produce a better fit with fewer colors
recolorize(images[1], method = "kmeans", n = 8)
# increasing numbers of kmean colors
recolored.images <- setNames(vector("list", length = 10), c(1:10))
recolored.images
# increasing numbers of kmean colors
recolored.images <- setNames(vector("list", length = 10), c(1:10))
for (i in 1:10) {
kmeans.temp <- recolorize(images[1], n = i, plotting = FALSE)
recolored.images[[i]] <- kmeans.temp$recolored.img
}
# increasing numbers of kmean colors
recolored.images <- setNames(vector("list", length = 10), c(1:10))
for (i in 1:10) {
kmeans.temp <- recolorize(images[1], method = "kmeans",
n = i, plotting = FALSE)
recolored.images[[i]] <- kmeans.temp$recolored.img
}
layout(matrix(c(1:10), nrow = 2))
sapply(c(1:10), function(i) plotImageArray(recolored.images[[i]],
main = i))
layout(matrix(c(1:10), nrow = 2, byrow = TRUE))
sapply(c(1:10), function(i) plotImageArray(recolored.images[[i]],
main = i))
# increasing numbers of kmean colors
recolored.images <- setNames(vector("list", length = 10), c(1:10))
for (i in 1:10) {
kmeans.temp <- recolorize(images[1], method = "kmeans",
n = i)
invisible(readline(prompt = "Press [enter] to continue or [esc] to exit"))
}
# increasing numbers of kmean colors
recolored.images <- setNames(vector("list", length = 10), c(1:10))
for (i in 1:10) {
kmeans.temp <- recolorize(images[1], method = "kmeans",
n = i)
}
# default: histogram, 2 bins/channel
hist.recolor <- recolorize(images[1])
# kmeans, 10 colors
kmeans.recolor <- recolorize(images[1], method = "kmeans",
n = 8, plotting = FALSE)
hist.recolor <- recolorize(images[1], method = "hist",
bins = 2, plotting = FALSE)
# compare binning vs. kmeans clustering
layout(matrix(c(1, 2, 3), ncol = 3))
plotImageArray(kmeans.recolor$original.img, main = "original")
plotImageArray(kmeans.recolor$recolored.img, main = "kmeans")
plotImageArray(hist.recolor$recolored.img, main = "binning")
images <- system.file("extdata/chongi.png", package = "recolorize")
# default: histogram, 2 bins/channel
recolorize(images[1])
library(recolorize)
help(colordistance)
usethis::use_ccby_license()
usethis::use_gpl3_license()
usethis::use_ccby_license(name = "Hannah Weller")
img <- system.file("extdata/corbetti.png", package = "recolorize")
bg.condition <- backgroundCondition(transparent = TRUE, alpha.channel = TRUE)
bg.indexed <- backgroundIndex(img, bg.condition)
# flatten it first -- faster indexing!
img.dims <- dim(img)
flattened.img <- img
dim(flattened.img) <- c(img.dims[1] * img.dims[2],
img.dims[3])
img.dims
dim(img)
img
img.path <- img
img <- readImage(img.path)
bg.indexed <- backgroundIndex(img, bg.condition)
detach("package:recolorize", unload = TRUE)
library(recolorize)
# install & load package
#devtools::install_github("hiweller/recolorize")
library(recolorize)
# recolorize: simplify image colors ####
# get images that come with the package (thanks Nathan & Able!)
images <- dir(system.file("extdata/", package = "recolorize"),
pattern = "png", full.names = TRUE)
# default behavior is to bin the colors (histogram method)
# note: we don't have to specify a background because this is a PNG with
# transparency; if your background is a color use the `upper` and `lower`
# arguments
chongi_recolored <- recolorize(images[1], method = "kmeans", n = 4)
# we can also use kmeans clustering
recolorize(images[1], method = "kmeans", n = 8)
# default behavior is to bin the colors (histogram method)
# note: we don't have to specify a background because this is a PNG with
# transparency; if your background is a color use the `upper` and `lower`
# arguments
chongi_recolored <- recolorize(images[1], method = "hist", n = 2)
# save the output using writePNG
png::writePNG(chongi_recolored$recolored.img, target = "chongi_recolored.png")
# we can also use kmeans clustering
recolorize(images[1], method = "kmeans", n = 8)
# you get different clusters each time you run kmeans:
layout(matrix(1:5, nrow = 1))
for (i in 1:5) {
if (i == 1) {kmeans.repeat <- vector("list", 5)}
kmeans.repeat[[i]] <- recolorize(images[3], n = 8,
method = "kmeans",
plotting = FALSE)
plotImageArray(kmeans.repeat[[i]]$recolored.img,
main = paste0("Iteration ", i))
}
kmeans.repeat[[i]] <- recolorize(images[1], n = 8,
method = "kmeans",
plotting = FALSE)
# you get different clusters each time you run kmeans:
layout(matrix(1:5, nrow = 1))
for (i in 1:5) {
if (i == 1) {kmeans.repeat <- vector("list", 5)}
kmeans.repeat[[i]] <- recolorize(images[1], n = 8,
method = "kmeans",
plotting = FALSE)
plotImageArray(kmeans.repeat[[i]]$recolored.img,
main = paste0("Iteration ", i))
}
# you get different clusters each time you run kmeans:
layout(matrix(1:5, nrow = 1))
for (i in 1:5) {
if (i == 1) {kmeans.repeat <- vector("list", 5)}
kmeans.repeat[[i]] <- recolorize(images[1], n = 4,
method = "kmeans",
plotting = FALSE)
plotImageArray(kmeans.repeat[[i]]$recolored.img,
main = paste0("Iteration ", i))
}
# you get different clusters each time you run kmeans:
layout(matrix(1:5, nrow = 1))
for (i in 1:5) {
if (i == 1) {kmeans.repeat <- vector("list", 5)}
kmeans.repeat[[i]] <- recolorize(images[2], n = 4,
method = "kmeans",
plotting = FALSE)
plotImageArray(kmeans.repeat[[i]]$recolored.img,
main = paste0("Iteration ", i))
}
# you get different clusters each time you run kmeans:
layout(matrix(1:5, nrow = 1))
for (i in 1:5) {
if (i == 1) {kmeans.repeat <- vector("list", 5)}
kmeans.repeat[[i]] <- recolorize(images[4], n = 4,
method = "kmeans",
plotting = FALSE)
plotImageArray(kmeans.repeat[[i]]$recolored.img,
main = paste0("Iteration ", i))
}
# you get different clusters each time you run kmeans:
layout(matrix(1:5, nrow = 1))
for (i in 1:5) {
if (i == 1) {kmeans.repeat <- vector("list", 5)}
kmeans.repeat[[i]] <- recolorize(images[5], n = 4,
method = "kmeans",
plotting = FALSE)
plotImageArray(kmeans.repeat[[i]]$recolored.img,
main = paste0("Iteration ", i))
}
# with histograms, it's the same every time
layout(matrix(1:5, nrow = 1))
for (i in 1:5) {
if (i == 1) {hist.repeat <- vector("list", 5)}
hist.repeat[[i]] <- recolorize(images[5], bins = 2,
method = "hist",
plotting = FALSE)
plotImageArray(hist.repeat[[i]]$recolored.img,
main = paste0("Iteration ", i))
}
# compare binning vs. kmeans
for (i in 1:length(images)) {
# kmeans recolor
kmeans.recolor <- recolorize(images[i], method = "kmeans",
n = 8, plotting = FALSE)
# hist recolor
hist.recolor <- recolorize(images[i], method = "hist",
bins = 2, plotting = FALSE)
# plot all three side by side
layout(matrix(c(1:3), ncol = 3))
plotImageArray(kmeans.recolor$original.img, main = "original")
plotImageArray(kmeans.recolor$recolored.img, main = "kmeans")
plotImageArray(hist.recolor$recolored.img, main = "binning")
# pausing
invisible(readline(prompt = "Press [enter] to continue or [esc] to exit"))
}
# imposeColors: you can map an image to custom colors ####
# RGB extremes (white, black, red, green, blue, yellow, magenta, cyan)
ctrs <- matrix(c(1, 1, 1,
0, 0, 0,
1, 0, 0,
0, 1, 0,
0, 0, 1,
1, 1, 0,
1, 0, 1,
0, 1, 1), byrow = TRUE, ncol = 3)
# yuck (but you get the point):
sapply(1:5, function(i) imposeColors(images[i], ctrs,
adjust.centers = FALSE))
# try it out with heliconius:
heliconius <- dir(system.file("extdata", package = "colordistance"),
pattern = "Heliconius",
recursive = TRUE, full.names = TRUE)
# plot them to see what we're working with:
layout(matrix(c(1:8), nrow = 2, byrow = TRUE))
sapply(heliconius, function(i) plotImageArray(readImage(i),
main = basename(i)))
heliconius
install.packages("colordistance")
# try it out with heliconius:
# install.packages("colordistance")
heliconius <- dir(system.file("extdata", package = "colordistance"),
pattern = "Heliconius",
recursive = TRUE, full.names = TRUE)
# plot them to see what we're working with:
layout(matrix(c(1:8), nrow = 2, byrow = TRUE))
sapply(heliconius, function(i) plotImageArray(readImage(i),
main = basename(i)))
# get one set of colors...
# (notice we have to mask the white background)
heliconius.colors <- recolorize(heliconius[7],
lower = rep(0.9, 3), upper = rep(1, 3),
method = "kmeans", n = 3)
# map all the other images to those colors
for (i in 1:length(heliconius)) {
imposeColors(heliconius[i], heliconius.colors$centers,
adjust.centers = FALSE,
lower = rep(0.9, 3), upper = rep(1, 3))
} # not bad!
