# if specified: make new color centers based on average of assigned pixels
if (adjust.centers) {
for (i in 1:nrow(ctrs)) {
pixel.idx <- which(pixel.assignments == i)
if (length(pixel.idx) == 0) { next } else {
ctrs[i, ] <- colMeans(pm[pixel.idx, ])
}
}
}
# and convert back to sRGB
if (color.space != "sRGB") {
color.centers <- grDevices::convertColor(ctrs,
from = color.space,
to = "sRGB",
from.ref.white = ref.white)
}
color.clusters <- list(pixel.assignments = pixel.assignments,
centers = color.centers,
sizes = sizes)
class(color.clusters) <- "color.clusters"
return(color.clusters)
}
convertColor(rbind(c(0, 0, 1),))
convertColor(rbind(c(0, 0, 1),
c(1, 1, 0)), "sRGB", "Lab")
convertColor(rbind(c(0, 0, 1), c(1, 1, 0)), "sRGB", "sRGB")
convertColor(rbind(c(0, 0, 1), c(1, 1, 0), c(1, 0, 1)), "sRGB", "sRGB")
convertColor(rbind(c(0, 0, 1), c(1, 1, 0), c(1, 0, 1)), "sRGB", "Lab")
x <- convertColor(rbind(c(0, 0, 1), c(1, 1, 0), c(1, 0, 1)), "sRGB", "Lab")
convertColor(x, "Lab", "sRGB")
convertColor(x, "Lab", "XYZ")
convertColor(x, "Lab", "Luv")
color.space <- "XYZ"
color.space == "sRGB"|"XYZ"
grepl("sRGB|XYZ", color.space)
color.space <- "XYZ"
match.arg(color.space c("a", "XYZ"))
match.arg(color.space, c("a", "XYZ"))
bins = 2
# format bins
if (length(bins) == 1) {
message(paste("\nUsing ", bins, "^3 = ", paste(bins^3),
" total bins", sep = ""))
bins <- rep(bins, 3)
} else {
message(paste("\nUsing ", bins[1], "*", bins[2],
"*", bins[3], " = ", bins[1] * bins[2] * bins[3],
" bins", sep = ""))
}
bins
# color space ranges
if (grepl("sRGB|XYZ", color.space)) {
#sRGB and XYZ range is 0-1 in all channels
brange <- list(c(0, 1),
c(0, 1),
c(0, 1))
} else if (grepl("Luv|Lab", color.space)) {
# Lab is 0-100 (L), -127-127 (a and b)
# Luv is greater (?) than that (?) but this works
brange <- list(c(0, 100),
c(-127, 127),
c(-127, 127))
}
brange
color.space = "Lab"
# color space ranges
if (grepl("sRGB|XYZ", color.space)) {
#sRGB and XYZ range is 0-1 in all channels
brange <- list(c(0, 1),
c(0, 1),
c(0, 1))
} else if (grepl("Luv|Lab", color.space)) {
# Lab is 0-100 (L), -127-127 (a and b)
# Luv is greater (?) than that (?) but this works
brange <- list(c(0, 100),
c(-127, 127),
c(-127, 127))
}
brange
bins + 1
# from bins, generate breaks/ranges
breaks <- lapply(bins + 1, function(x) seq(0, 1, length = x))
breaks
bins
brange[i][1]
brange[1][1]
brange[[1]][1]
bins
brange
# from bins, generate breaks/ranges
breaks <- lapply(1:3, function(x) seq(brange[[x]][1],
brange[[x]][2],
length = bins[x] + 1))
breaks
pixel.matrix
strsplit(color.space, "")
strsplit(gsub("s", "", color.space), "")
strsplit(gsub("s", "", color.space), "")[[1]]
?recolorize
img <- system.file("extdata/chongi.png", package = "recolorize")
recolorize(img)
devtools::load_all(".")
recolorize(img)
test <- recolorize(img)
test$centers
test <- recolorize(img, bins = 3)
test <- recolorize(img, method = "k")
test <- recolorize(img, method = "k", n = 5)
test <- recolorize(img, method = "k", n = 25)
test <- recolorize(img, method = "k", n = 20)
test <- recolorize(img, method = "k", n = 10)
devtools::load_all(".")
test <- recolorize(img, method = "k", n = 10)
test <- recolorize(img, method = "k", n = 10, color.space = "sRGB")
test <- recolorize(img, color.space = "sRGB")
test <- recolorize(img, color.space = "sRGB", bins = 3)
test <- recolorize(img, color.space = "Lab", bins = 3)
rgbrand <- runif(3000)
r <- matrix(rgbrand, ncol = 3)
dim(r)
apply(convertColor(r, "sRGB", "Lab"), 2, range)
apply(convertColor(matrix(rgbrand, ncol = 3), "sRGB", "Lab"), 2, range)
apply(convertColor(matrix(runif(3000), ncol = 3), "sRGB", "Lab"), 2, range)
apply(convertColor(matrix(runif(3000), ncol = 3), "sRGB", "Lab"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "Lab"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "Lab"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "Lab"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "Lab"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "Lab"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "Lab"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "Lab"), 2, range)
devtools::load_all(".")
test <- recolorize(img, color.space = "Lab", bins = 3)
test <- recolorize(img, color.space = "Lab", bins = 3)
test <- recolorize(img, color.space = "Lab", bins = c(3, 5, 3))
test <- recolorize(img, color.space = "Lab", bins = 5
)
test <- recolorize(img, color.space = "Lab", bins = 6)
beetles <- dir(system.file("int/extdata", "recolorize"))
beetles
beetles <- dir(system.file("inst/extdata", "recolorize"))
beetles
beetles <- dir(system.file("extdata", "recolorize"))
beetles
beetles <- dir(system.file("extdata*", "recolorize"))
beetles
beetles <- dir(system.file("extdata/", "recolorize"))
beetles
system.file("extdata/", "recolorize")
system.file("extdata/chongi", "recolorize")
system.file("extdata/chongi.png", "recolorize")
system.file("extdata/chongi.png", package = "recolorize")
system.file("extdata/", package = "recolorize")
dir(system.file("extdata/", package = "recolorize"))
dir(system.file("extdata/", package = "recolorize"), "png", full.names = TRUE)
beetles <- dir(system.file("extdata/", package = "recolorize"), "png", full.names = TRUE)
test <- recolorize(beetles[2], color.space = "Lab", bins = 5)
test <- recolorize(beetles[2], color.space = "Lab", bins = 2)
test <- recolorize(beetles[2], color.space = "Lab", bins = 3)
test <- recolorize(beetles[2], color.space = "sRGB", bins = 3)
?cut
test <- recolorize(beetles[2], color.space = "sRGB", bins = 2)
test <- recolorize(beetles[2], color.space = "XYZ", bins = 2)
apply(convertColor(matrix(runif(3000), ncol = 3), "sRGB", "Luv"), 2, range)
apply(convertColor(matrix(runif(3000), ncol = 3), "sRGB", "XYZ"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "XYZ"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "XYZ"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "XYZ"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "XYZ"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "XYZ"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "XYZ"), 2, range)
devtools::load_all(".")
test <- recolorize(beetles[2], color.space = "sRGB", bins = 3)
test <- recolorize(beetles[2], color.space = "xyz", bins = 2)
test <- recolorize(beetles[2], color.space = "XYZ", bins = 2)
devtools::load_all(".")
test <- recolorize(beetles[2], color.space = "Luv", bins = 2)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "Luv"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "Luv"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "Luv"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "Luv"), 2, range)
apply(convertColor(matrix(runif(30000), ncol = 3), "sRGB", "Luv"), 2, range)
apply(convertColor(matrix(runif(300000), ncol = 3), "sRGB", "Luv"), 2, range)
apply(convertColor(matrix(runif(300000), ncol = 3), "sRGB", "Luv"), 2, range)
apply(convertColor(matrix(runif(300000), ncol = 3), "sRGB", "Luv"), 2, range)
devtools::load_all(".")
test <- recolorize(beetles[2], color.space = "Luv", bins = 2)
test <- recolorize(beetles[2], color.space = "Luv", bins = 3)
test <- recolorize(beetles[2], color.space = "Lab", bins = 3)
apply(convertColor(matrix(runif(300000), ncol = 3), "sRGB", "Lab"), 2, range)
apply(convertColor(matrix(runif(300000), ncol = 3), "sRGB", "Lab"), 2, range)
apply(convertColor(matrix(runif(300000), ncol = 3), "sRGB", "Lab"), 2, range)
apply(convertColor(matrix(runif(300000), ncol = 3), "sRGB", "Lab"), 2, range)
devtools::load_all(".")
test <- recolorize(beetles[2], color.space = "Lab", bins = 3)
test <- recolorize(beetles[2], color.space = "Lab", bins = 2)
test <- recolorize(beetles[2], color.space = "Lab", bins = 3)
devtools::load_all(".")
test <- recolorize(beetles[2], bins = 3)
test <- recolorize(beetles[2], bins = 2)
test <- recolorize(beetles[3], bins = 2)
test <- recolorize(beetles[3], bins = 2, color.space = "Lab")
test <- recolorize(beetles[3], bins = 3, color.space = "Lab")
test <- recolorize(beetles[3], bins = 3, color.space = "sRGB")
# install and load the updated package:
devtools::install_github("hiweller/recolorize")
devtools::load_all(".")
library(recolorize)
# these are the new functions of interest:
?recluster
?imDist
?splitByColor
# recluster: correct over-clustering ####
chongi <- system.file("extdata/chongi.png", package = "recolorize")
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 2)
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 2, color.space = "Luv")
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 2, color.space = "sRGB")
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 3, color.space = "sRGB")
recolored_chongi <- recolorize(chongi, "k", n = 5, color.space = "sRGB")
recluster(recolored_chongi, similarity_cutoff = 45, plot_hclust = TRUE)
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 3, color.space = "sRGB")
recluster(recolored_chongi, similarity_cutoff = 45, plot_hclust = TRUE)
x <- recluster(recolored_chongi, similarity_cutoff = 60, plot_hclust = TRUE)
?logLik
pm
?colorClusters
?colorCluster
devtools::load_all(".")
devtools::load_all(".")
?colorCluster
?colorClusters
img <- array(runif(30000), dim = c(100, 100, 3))
dim(img)
img.2d <- img
dim(img.2d) <- c(100 * 100, 3)
head(img.2d)
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 3, color.space = "sRGB")
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 2, color.space = "sRGB")
ocellata <- system.file("extdata/ocellata.png", package = "recolorize")
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_o <- recolorize(ocellata, bins = 2, color.space = "sRGB")
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_o <- recolorize(ocellata, bins = 3, color.space = "sRGB")
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_o <- recolorize(ocellata, bins = 4, color.space = "sRGB")
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_o <- recolorize(ocellata, bins = 2, color.space = "sRGB")
x <- splitByColor(recolored_o)
devtools::load_all(".")
?recolorize
?rect.hclust
hca <- hclust(dist(USArrests))
plot(hca)
rect.hclust(hca, k = 3, border = "red")
x <- rect.hclust(hca, h = 50, which = c(2,7), border = 3:4)
plot(hca)
rect.hclust(hca, k = 3, border = "red")
x <- rect.hclust(hca, h = 50, which = c(2,7), border = 3:4)
x <- rect.hclust(hca, h = 50, border = 3:4)
plot(hca)
x <- rect.hclust(hca, h = 50, border = 3:4)
?recolorize
# filepath to image
img <- system.file("extdata/chongi.png", package = "recolorize")
# default: histogram, 2 bins/channel
recolorize(img)
# default: histogram, 2 bins/channel
recolorize(img, resize = 0.5)
img
method = "histogram"
bins = 2
color.space = "sRGB"
ref.white = "D65"
lower = NULL
upper = NULL
transparent = TRUE
resid = FALSE
resize = 0.5
rotate = NULL
# get method
method <- match.arg(tolower(method), c("kmeans", "histogram"))
# if 'img' is a filepath, read in image
if (is.character(img) & file.exists(img)) {
img <- readImage(img, resize = resize, rotate = rotate)
} else if (!is.array(img) | length(dim(img)) != 3) {
# otherwise, make sure it's an image array
stop("'img' must be a path or an image or an image array.")
}
img
class(img)
plotImageArray(img)
dim(img)
# make background condition
alpha.channel <- dim(img)[3] == 4 # is there a transparency channel?
alpha.channel
bg.condition <- backgroundCondition(lower = lower, upper = upper,
center = NULL, radius = NULL,
transparent = transparent,
alpha.channel = alpha.channel)
bg.condition
# index background
bg.indexed <- backgroundIndex(img, bg.condition)
bg.indexed
bg.indexed$img.dims
# color clusters & assign pixels
color.clusters <- colorClusters(bg.indexed$non.bg, method = method,
n = n, bins = bins,
color.space = color.space,
ref.white = ref.white)
pixel.matrix <- bg.indexed$non.bg
# we don't care about the alpha channel; remove if present
pixel.matrix <- pixel.matrix[ , 1:3]
pixel.matrix
dim(bg.indexed$non.bg)
# flatten it first -- faster indexing!
img.dims <- dim(img)
flattened.img <- img
dim(flattened.img) <- c(img.dims[1] * img.dims[2],
img.dims[3])
dim(flattened.img)
ncol(flattened.img)
which(flattened.img[ , 4] < 1)
hist(flattened.img[ , 4])
hist(flattened.img[ , 4], breaks = 100)
sum(which(flattened.img[ , 4] == 1))
max(flattened.img[ , 4])
sum(which(flattened.img[ , 4] > 0.99999))
length(which(flattened.img[ , 4] > 0.99999))
dim(flattened.img)
sum(flattened.img[ , 4] > 0.99999)
hist(round(flattened.img[ , 4]))
plot(round(flattened.img[ , 4]))
sum(round(flattened.img[ , 4]) == 1)
devtools::load_all(".")
# default: histogram, 2 bins/channel
recolorize(img, resize = 0.5)
# filepath to image
img <- system.file("extdata/chongi.png", package = "recolorize")
# default: histogram, 2 bins/channel
recolorize(img, resize = 0.5)
# default: histogram, 2 bins/channel
recolorize(img, resize = 2)
# default: histogram, 2 bins/channel
recolorize(img, resize = 1)
# default: histogram, 2 bins/channel
recolorize(img, resize = 2)
devtools::load_all(".")
?colorClusters
# default: histogram, 2 bins/channel
recolorize(img, resize = 0.5)
# filepath to image
img <- system.file("extdata/chongi.png", package = "recolorize")
# default: histogram, 2 bins/channel
recolorize(img, resize = 0.5)
birds <- "../../projects/ghislaine_woodpeckers/whole_bird/Blythipicus_pyrrhotis_pyrrhotis.png"
recolorize(birds, resize = 0.5
)
/pavo::classify()
?pavo::classify()
?pavo::adjacent
library(recolorize)
# recluster: correct over-clustering ####
chongi <- system.file("extdata/chongi.png", package = "recolorize")
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 2, color.space = "Luv")
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 2,
color.space = "sRGB")
# we can group together the most similar clusters:
reclustered_chongi <- recluster(recolored_chongi,
similarity_cutoff = 60,
plot_hclust = TRUE)
# we can group together the most similar clusters:
reclustered_chongi <- recluster(recolored_chongi,
similarity_cutoff = 60, color.space.fit = "sRGB",
plot_hclust = TRUE)
# using 3 bins/channel splits uniform regions (e.g. the navy):
recolored_chongi <- recolorize(chongi, bins = 2,
color.space = "sRGB")
# we can group together the most similar clusters:
reclustered_chongi <- recluster(recolored_chongi,
similarity_cutoff = 40,
color.space.fit = "sRGB",
plot_hclust = TRUE)
# we can also specify our final number of colors, as with kmeans:
recluster_chongi <- recluster(recolored_chongi,
n_final = 6,
plot_hclust = TRUE)
# compare with actual kmeans with n = 6; the navy is usually split into 2-3
# colors, and we get different results every time (!):
kmeans_chongi <- recolorize(chongi, "k", n = 6)
kmeans_chongi <- recolorize(chongi, "k", n = 6)
kmeans_chongi <- recolorize(chongi, "k", n = 6)
# you can also recluster a kmeans fit, which is nice
# the cutoff typically has to be lower and you do still have the issue of
# different results every time, but the recluster fit tends to be stable
kmeans_chongi <- recolorize(chongi, "k", n = 20)
kmeans_recluster <- recluster(kmeans_chongi, similarity_cutoff = 45)
# note the 'residuals' option (also now in imposeColors and recolorize):
kmeans_chongi <- recolorize(chongi, "k", n = 20, resid = TRUE)
kmeans_recluster <- recluster(kmeans_chongi,
resid = TRUE,
similarity_cutoff = 45)
# we can plot the residuals (log transformed - easier to inspect)
layout(matrix(1:2, nrow = 2))
hist(log(kmeans_chongi$resids$sq_residuals),
xlim = c(-2, 5),
breaks = seq(-2, 5, by = 0.1),
xlab = "log residuals",
main = "K-means (20 clusters)")
# these are a bit higher (we're using fewer parameters),
# but really not much different:
hist(log(kmeans_recluster$resids$sq_residuals),
xlim = c(-2, 5),
breaks = seq(-2, 5, by = 0.1),
xlab = "log residuals",
main = "Reclustered (6 clusters)")
# imDist: check color fit using a heatmap ####
# fit a recolorize object:
fulgidissima <- system.file("extdata/fulgidissima.png", package = "recolorize")
# we can do a not-so-great histogram fit:
ful_2bin <- recolorize(fulgidissima, "hist", bins = 2)
# we can see the areas that are described most poorly:
layout(1) # reset the plot window
dist_2bin <- imDist(ful_2bin$original.img,
ful_2bin$recolored.img,
main = "2 bins per channel")
# you can use different color palettes:
pal <- viridisLite::viridis(100)
imHeatmap(dist_2bin, palette = pal,
main = "viridis palette")
# including the worst palette I know of:
pal <- colorRamps::primary.colors(100)
imHeatmap(dist_2bin, palette = pal,
main = "no no no no no")
# more importantly...you can compare fits visually!
# let's use kmeans and compare with the histogram fit:
ful_k<- recolorize(fulgidissima, "k", n = 8)
# we can already see this is better:
dist_k <- imDist(ful_k$original.img,
ful_k$recolored.img)
# we see where they differ most (this one is quite arty):
k_vs_hist <- imDist(ful_k$recolored.img,
ful_2bin$recolored.img)
# potentially most useful, we can plot them side-by-side
# we need to set the same range for both images to make a fair comparison
r <- range(c(dist_k, dist_2bin), na.rm = TRUE)
# and now, we plot!
layout(matrix(1:2, nrow = 1))
imHeatmap(dist_2bin, main = "Histogram, 8 bins",
range = r, legend = F)
imHeatmap(dist_k, main = "k-means, 8 centers",
range = r)
# we can also do this in other color spaces:
layout(matrix(1:3, nrow = 1))
dist_rgb <- imDist(ful_2bin$original.img,
ful_2bin$recolored.img,
color.space = "sRGB",
main = "sRGB")
dist_luv <- imDist(ful_2bin$original.img,
ful_2bin$recolored.img,
color.space = "Luv",
main = "Luv")
dist_xyz <- imDist(ful_2bin$original.img,
ful_2bin$recolored.img,
color.space = "XYZ",
main = "XYZ")
# This one was Able's suggestion: can we look at one color cluster at a time?
# get original fit
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")
recolored_corbetti <- recolorize::recolorize(corbetti, plotting = TRUE)
# make a layout
layout(matrix(c(1, 1:9), nrow = 2))
# plot original
plotImageArray(recolored_corbetti$original.img)
# plot layers
corbetti_layers <- splitByColor(recolored_corbetti,
plot_method = "overlay")
# so, you could plot the layers as binary masks...
plotImageArray(recolored_corbetti$original.img)
corbetti_layers <- splitByColor(recolored_corbetti,
plot_method = "binary")
# or split the different and color the binary masks:
plotImageArray(recolored_corbetti$original.img)
corbetti_layers <- splitByColor(recolored_corbetti,
plot_method = "colormask")
# well hey, luckily we can fix that now:
corbetti_recluster <- recluster(recolored_corbetti,
similarity_cutoff = 45,
plot_hclust = T)
# and now we can look at the layers again:
layout(matrix(1:6, nrow = 2))
plotImageArray(corbetti_recluster$original.img)
corbetti_layers <- splitByColor(corbetti_recluster, plot_method = "overlay")
# we can examine the binary masks stored within the layers list:
layout(matrix(1:2, nrow = 1))
plotImageArray(corbetti_layers[[2]], main = "original layer")
# make an imager pixset so we can clean up stray pixels:
px <- imager::as.cimg(corbetti_layers[[2]] == 1)
px_clean <- imager::clean(px, 3)
# convert back to an image for plotting
plotImageArray(recolorize:::cimg.to.array(px_clean), main = "cleaned layer")
x<- wernerColor(corbetti_recluster,
n_colors = 6,
which_img = "original")
