names(recolorize_list) <- basename(images)
}
recolorize_list[[i]] <- cleaned
}
# the gang's all here!
# KINDA NOT BAD WHEN WE SPECIFIED NOTHING ABOUT EACH INDIVIDUAL IMAGE?
layout(matrix(1:length(images), nrow = 1))
for (i in recolorize_list) {
plotImageArray(i$recolored_img)
}
# get pavo adjacency stuff
for (i in 1:length(recolorize_list)) {
if (i == 1) {
adjacent_list <- recolorize_list
}
adjacent_list[[i]] <- recolorize_adjacency(recolorize_list[[i]])
}
# get dataframe of interesting values...
for (j in 1:length(adjacent_list)) {
temp <- adjacent_list[[j]]
temp <- temp[-grep("p_|q_|t_|B|R", colnames(temp))]
if (j == 1) {
adjacent_df <- temp
} else {
adjacent_df <- rbind(adjacent_df, temp)
}
}
rownames(adjacent_df) <- names(adjacent_list)
add_image <- function(obj, x = NULL,
y = NULL,
width = NULL,
interpolate = TRUE ){
usr <- par()$usr
pin <- par()$pin
imdim <- dim(obj)
sf <- imdim[1] / imdim[2]
w <- width / (usr[2] - usr[1]) * pin[1]
h <- w * sf
hu <- h / pin[2] * (usr[4] - usr[3])
graphics::rasterImage(image = obj,
xleft = x - (width / 2), xright = x + (width / 2),
ybottom = y - (hu / 2), ytop = y + (hu/2),
interpolate = interpolate)
}
x <- adjacent_df$k
y <- adjacent_df$N
pad <- 0.05
plot(x, y,
xlim = range(x) + c(-pad*diff(range(x))), pad*diff(range(x)),
ylim = range(y) + c(-pad*diff(range(y))), pad*diff(range(y)),
type = 'n')
plot(x, y,
xlim = range(x) + c(-pad*diff(range(x)), pad*diff(range(x))),
ylim = range(y) + c(-pad*diff(range(y)), pad*diff(range(y))),
type = 'n')
plot(x, y,
xlim = range(x) + c(-pad*diff(range(x)), pad*diff(range(x))),
ylim = range(y) + c(-pad*diff(range(y)), pad*diff(range(y))),
type = 'n')
abline(y ~ x, lty = 2, col = "blue")
y ~ x
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(y)) / (2 * length(recolorize_list)))
}
diff(range(y)) / (2 * length(recolorize_list))
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
plot(x, y,
xlim = range(x) + c(-pad*diff(range(x)), pad*diff(range(x))),
ylim = range(y) + c(-pad*diff(range(y)), pad*diff(range(y))),
type = 'n')
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
?adjacent
x <- adjacent_df$Jc
y <- adjacent_df$Jt
pad <- 0.05
plot(x, y,
xlim = range(x) + c(-pad*diff(range(x)), pad*diff(range(x))),
ylim = range(y) + c(-pad*diff(range(y)), pad*diff(range(y))),
type = 'n')
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
plot(x, y,
xlim = range(x) + c(-pad*diff(range(x)), pad*diff(range(x))),
ylim = range(y) + c(-pad*diff(range(y)), pad*diff(range(y))),
type = 'n')
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (4 * length(recolorize_list)))
}
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (4 * length(recolorize_list)))
}}
{x <- adjacent_df$Jc
y <- adjacent_df$Jt
pad <- 0.1
plot(x, y,
xlim = range(x) + c(-pad*diff(range(x)), pad*diff(range(x))),
ylim = range(y) + c(-pad*diff(range(y)), pad*diff(range(y))),
type = 'n')
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (4 * length(recolorize_list)))
}
}
{x <- adjacent_df$Jc
y <- adjacent_df$Jt
pad <- 0.1
plot(x, y,
xlim = range(x) + c(-pad*diff(range(x)), pad*diff(range(x))),
ylim = range(y) + c(-pad*diff(range(y)), pad*diff(range(y))),
type = 'n')
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (3 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL
y <- adjacent_df$m_dS
pad <- 0.1
plot(x, y,
xlim = range(x) + c(-pad*diff(range(x)), pad*diff(range(x))),
ylim = range(y) + c(-pad*diff(range(y)), pad*diff(range(y))),
type = 'n')
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (3 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL
y <- adjacent_df$m_dS
pad <- 0.25
plot(x, y,
xlim = range(x) + c(-pad*diff(range(x)), pad*diff(range(x))),
ylim = range(y) + c(-pad*diff(range(y)), pad*diff(range(y))),
type = 'n')
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (1 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL
y <- adjacent_df$m_dS
pad <- 0.25
plot(x, y,
xlim = range(x) + c(-pad*diff(range(x)), pad*diff(range(x))),
ylim = range(y) + c(-pad*diff(range(y)), pad*diff(range(y))),
type = 'n')
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL
y <- adjacent_df$m_dS
xpad <- 0.05
ypad <- 0.3
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n')
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL
y <- adjacent_df$m_dS
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n')
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean achromatic contrast"
y <- adjacent_df$m_dS; ylab = "Mean chromatic contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n')
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean achromatic contrast"
y <- adjacent_df$m_dS; ylab = "Mean chromatic contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
}
# a possible workflow
library(recolorize)
img <- system.file("extdata/fulgidissima.png", package = "recolorize")
img <- readImage(img)
plotImageArray(img) # ok, let's say we want to simplify to the green and red colors
# well, we can just use k-means clustering, that should work, right?
kmeans_test <- recolorize(img, method = "k", n = 2)
# we could just use another color space where red and green are more separated:
kmeans_test <- recolorize(img, method = "k",
n = 2,
color_space = "Lab")
# the shininess and features are getting in our way here:
blur_img <- blurImage(img, "median",
n = 11, threshold = 0.5) # blur with edge retention
blur_img <- blurImage(img, "blur_anisotropic",
amplitude = 10, sharpness = 0.2)
# then over-fit:
fit1 <- recolorize(blur_img, bins = 3)
# then cluster by similarity:
fit2 <- recluster(fit1)
cutree(hclust(dist(fit1$centers[ , 1:2])), h = 0.5)
# then merge:
fit3 <- mergeLayers(fit2, list(c(2, 3, 5, 6),
c(1, 4, 7)))
# then merge:
fit3 <- mergeLayers(fit2, list(1:4, 5))
# then clean up:
fit4 <- editLayers(fit3,
operations = c("fill", "clean"),
px_sizes = c(3, 3))
# what do our patches look like?
layout(matrix(1:2, nrow = 1))
layers <- splitByColor(fit4, plot_method = "color") # NICE!
# if you really want to double-down on the eye searing:
fit5 <- imposeColors(fit4$recolored_img,
centers = matrix(c(1, 0, 0,
0, 1, 0),
ncol = 3, byrow = TRUE),
adjust_centers = FALSE)
# or my favorite thing
stupid <- wernerColor(fit4)
# then clean up:
fit4 <- editLayers(fit3,
operations = c("fill", "clean"),
px_sizes = c(3, 3))
# or my favorite thing
stupid <- wernerColor(fit4)
?wernerColor
# or my favorite thing
stupid <- wernerColor(fit4, which_img = "recolored")
stupid <- wernerColor(fit2, which_img = "recolored")
stupid <- wernerColor(fit3, which_img = "recolored")
stupid <- wernerColor(fit5, which_img = "recolored")
imDist(fit4$original_img, fit4$recolored_img)
imDist(img, fit4$recolored_img)
imDist(fit4$original_img, fit4$recolored_img)
images <- dir(system.file("extdata/", package = "recolorize"),
pattern = "png", full.names = TRUE)
images
# a possible workflow
library(recolorize)
img <- system.file("extdata/fulgidissima.png", package = "recolorize")
img <- readImage(img)
plotImageArray(img) # ok, let's say we want to simplify to the green and red colors
# well, we can just use k-means clustering, that should work, right?
kmeans_test <- recolorize(img, method = "k", n = 2)
# we could just use another color space where red and green are more separated:
kmeans_test <- recolorize(img, method = "k",
n = 2,
color_space = "Lab")
# the shininess and features are getting in our way here:
blur_img <- blurImage(img, "median",
n = 11, threshold = 0.5) # blur with edge retention
blur_img <- blurImage(img, "blur_anisotropic",
amplitude = 10, sharpness = 0.2)
# the shininess and features are getting in our way here:
blur_img <- blurImage(img, "median",
n = 11, threshold = 0.5) # blur with edge retention
blur_img <- blurImage(img, "blur_anisotropic",
amplitude = 10, sharpness = 0.2)
# the shininess and features are getting in our way here:
blur_img <- blurImage(img, "median",
n = 11, threshold = 0.5) # blur with edge retention
# then over-fit:
fit1 <- recolorize(blur_img, bins = 3)
# then cluster by similarity:
fit2 <- recluster(fit1, plot_hclust = TRUE)
# the shininess and features are getting in our way here:
blur_img <- blurImage(img, "median",
n = 11, threshold = 0.5) # blur with edge retention
# then over-fit:
fit1 <- recolorize(blur_img, bins = 3)
# then cluster by similarity:
fit2 <- recluster(fit1, plot_hclust = TRUE)
blur_img <- blurImage(img, "blur_anisotropic",
amplitude = 10, sharpness = 0.2)
# then over-fit:
fit1 <- recolorize(blur_img, bins = 3)
# then cluster by similarity:
fit2 <- recluster(fit1, plot_hclust = TRUE)
# then merge:
fit3 <- mergeLayers(fit2, list(1:4, 5))
?editLayers
# then clean up:
fit4 <- editLayers(fit3,
operations = c("fill", "clean"),
px_sizes = c(3, 3))
# what do our patches look like?
layout(matrix(1:2, nrow = 1))
# load image and recolorize it
img <- system.file("extdata/corbetti.png", package = "recolorize")
# first do a standard color binning
init_fit <- recolorize(img, bins = 2, plotting = FALSE)
# then cluster patches by similarity
re_fit <- recluster(init_fit, similarity_cutoff = 40)
# examine individual layers:
layout(matrix(1:6, nrow = 2))
layers <- splitByColor(re_fit, plot_method = "color")
# we can clean them all using the same parameters...
edited_fit <- editLayers(re_fit, layer_idx = "all",
operations = "clean",
px_sizes = 2, plotting = TRUE)
# ...but some of those patches don't look so good
# we can use different px_sizes for each layer:
edited_fit_2 <- editLayers(re_fit, layer_idx = "all",
operations = "clean",
px_sizes = c(1, 3, 1,
2, 1, 2),
plotting = TRUE)
# better yet, we can fill some layers and clean others:
edited_fit_3 <- editLayers(re_fit, layer_idx = "all",
operations = c("fill", "clean",
"fill", "fill",
"fill", "clean"),
px_sizes = c(2, 3,
2, 2,
4, 2))
# or you could just get weird:
edited_fit_3 <- editLayers(re_fit, layer_idx = c(1:6),
operations = c("fill", "clean"),
px_sizes = c(10, 20))
layers <- splitByColor(fit4, plot_method = "overlay") # NICE!
# then clean up:
fit4 <- editLayers(fit3,
operations = c("fill", "clean"),
px_sizes = c(3, 3))
plotImageArray(fit2$recolored_img)
plotImageArray(fit3$recolored_img)
plotImageArray(fit4$recolored_img)
# if you really want to double-down on the eye searing:
fit5 <- imposeColors(fit4$recolored_img,
centers = matrix(c(1, 0, 0,
0, 1, 0),
ncol = 3, byrow = TRUE),
adjust_centers = FALSE)
# or my favorite thing
stupid <- wernerColor(fit4, which_img = "recolored")
# mm
imDist(img, fit4$recolored_img)
# then clean up:
fit4 <- editLayers(fit3,
operations = c("fill", "clean"),
px_sizes = c(3, 3))
# mm
imDist(img, fit4$recolored_img)
img <- readImage(img)
# mm
imDist(img, fit4$recolored_img)
imDist(fit4$original_img, fit4$recolored_img)
images <- dir(system.file("extdata/", package = "recolorize"),
pattern = "png", full.names = TRUE)
layout(matrix(1:5, nrow = 1))
for (i in 1:length(images)) {
plotImageArray(readImage(images[i]))
}
for (i in 1:length(images)) {
img <- readImage(images[i])
blur_img <- blurImage(img, "median", n = 3, threshold = 0.5, plotting = FALSE)
overfit <- recolorize(images[i], bins = 2, plotting = FALSE)
refit <- recluster(overfit, similarity_cutoff = 40, plot_final = FALSE)
# despeckle
cleaned <- editLayers(refit, operations = "clean", px_sizes = 1)
if (i == 1) {
recolorize_list <- vector("list", length = length(images))
names(recolorize_list) <- basename(images)
}
recolorize_list[[i]] <- cleaned
}
# the gang's all here!
# KINDA NOT BAD WHEN WE SPECIFIED NOTHING ABOUT EACH INDIVIDUAL IMAGE?
layout(matrix(1:length(images), nrow = 1))
for (i in recolorize_list) {
plotImageArray(i$recolored_img)
}
?recolorize_adjacency
?coldist
# get dataframe of interesting values...
for (j in 1:length(adjacent_list)) {
temp <- adjacent_list[[j]]
temp <- temp[-grep("p_|q_|t_|B|R", colnames(temp))]
if (j == 1) {
adjacent_df <- temp
} else {
adjacent_df <- rbind(adjacent_df, temp)
}
}
rownames(adjacent_df) <- names(adjacent_list)
add_image <- function(obj, x = NULL,
y = NULL,
width = NULL,
interpolate = TRUE ){
usr <- par()$usr
pin <- par()$pin
imdim <- dim(obj)
sf <- imdim[1] / imdim[2]
w <- width / (usr[2] - usr[1]) * pin[1]
h <- w * sf
hu <- h / pin[2] * (usr[4] - usr[3])
graphics::rasterImage(image = obj,
xleft = x - (width / 2), xright = x + (width / 2),
ybottom = y - (hu / 2), ytop = y + (hu/2),
interpolate = interpolate)
}
{x <- adjacent_df$m_dL; xlab = "Mean achromatic contrast"
y <- adjacent_df$m_dS; ylab = "Mean chromatic contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean achromatic contrast"
y <- adjacent_df$m_dS; ylab = "Mean chromatic contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
}
{x <- adjacent_df$m_dL; xlab = "Mean achromatic contrast"
y <- adjacent_df$m_dS; ylab = "Mean chromatic contrast"
xpad <- 0.05
ypad <- 0.35
plot(x, y,
xlim = range(x) + c(-xpad*diff(range(x)), xpad*diff(range(x))),
ylim = range(y) + c(-ypad*diff(range(y)), ypad*diff(range(y))),
type = 'n',
xlab = xlab, ylab = ylab)
abline(lm(y ~ x), lty = 2, col = "blue")
for (i in 1:length(recolorize_list)) {
add_image(recolorize_list[[i]]$recolored_img, x[i], y[i],
width = diff(range(x)) / (2 * length(recolorize_list)))
}
}
adjacent_df
library(recolorize)
?recolorize()
img <- system.file("extdata/chongi.png", package = "recolorize")
# default: histogram, 2 bins/channel
recolorize(img)
# default: histogram, 2 bins/channel
test <- recolorize(img)
plot(test)
img <- system.file("extdata/fulgidissima.png", package = "recolorize")
# default: histogram, 2 bins/channel
test <- recolorize(img)
# default: histogram, 2 bins/channel
test <- recolorize(img, bins = 3)
test2 <- recluster(test)
test2 <- recluster(test, plot_hclust = T)
