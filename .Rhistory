colordistance::plotPixels(img_path, lower = NULL, upper = NULL,
color.space = "rgb", main = "RGB",
cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.5,
mar = c(3, 3, 2, 2))
axis(side = 1, "Red", line = -1)
layout(matrix(1:2, nrow = 1, byrow = TRUE))
colordistance::plotPixels(img_path, lower = NULL, upper = NULL,
color.space = "rgb", main = "RGB",
cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.5,
mar = c(3, 3, 2, 2))
axis(side = 1, "Red", line = -1)
layout(matrix(1:2, nrow = 1, byrow = TRUE))
colordistance::plotPixels(img_path, lower = NULL, upper = NULL,
color.space = "rgb", main = "RGB",
cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.5,
mar = c(3, 3, 2, 2))
axis(side = 1, labels = "Red", line = -1)
layout(matrix(1:2, nrow = 1, byrow = TRUE))
colordistance::plotPixels(img_path, lower = NULL, upper = NULL,
color.space = "rgb", main = "RGB",
cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.5,
mar = c(3, 3, 2, 2))
colordistance::plotPixels(img_path, lower = NULL, upper = NULL,
color.space = "rgb", main = "RGB", angle = -45,
cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.5,
mar = c(3, 3, 2, 2))
colordistance::plotPixels(img_path, lower = NULL, upper = NULL,
color.space = "lab", ref.white = "D65",
main = "CIE Lab", ylim = c(-100, 100), zlim = c(-60, 100),
cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.5,
mar = c(3, 3, 2, 2))
colordistance::plotPixels(img_path, lower = NULL, upper = NULL,
color.space = "lab", ref.white = "D65", angle = -45,
main = "CIE Lab", ylim = c(-100, 100), zlim = c(-60, 100),
cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.5,
mar = c(3, 3, 2, 2))
# using histogram
r_hist <- recolorize(img_path, method = "hist", bins = 2, plotting = F)
# histogram uses bins^3 = 8, so we'll use 8 clusters for kmeans
r_k <- recolorize(img_path, method = "k", n = 8, plotting = F)
# compare the outputs
layout(matrix(1:4, nrow = 1), widths = c(0.4, 0.1, 0.4, 0.1))
plotImageArray(recoloredImage(r_hist), main = "Histogram")
plotColorPalette(r_hist$centers, r_hist$sizes)
# using histogram
r_hist <- recolorize(img_path, method = "hist", bins = 2, plotting = F)
# histogram uses bins^3 = 8, so we'll use 8 clusters for kmeans
r_k <- recolorize(img_path, method = "k", n = 8, plotting = F)
# compare the outputs
layout(matrix(1:4, nrow = 1), widths = c(0.4, 0.1, 0.4, 0.1))
par(mar = rep(0, 4))
plotImageArray(recoloredImage(r_hist), main = "Histogram")
plotColorPalette(r_hist$centers, r_hist$sizes)
plotImageArray(recoloredImage(r_k), main = "k-means")
plotColorPalette(r_k$centers, r_k$sizes)
# compare the outputs
layout(matrix(1:4, nrow = 2), heights = c(0.8, 0.1))
par(mar = rep(0, 4))
plotImageArray(recoloredImage(r_hist), main = "Histogram")
plotColorPalette(r_hist$centers, r_hist$sizes, horiz = T)
# using histogram
r_hist <- recolorize(img_path, method = "hist", bins = 2, plotting = F)
# histogram uses bins^3 = 8, so we'll use 8 clusters for kmeans
r_k <- recolorize(img_path, method = "k", n = 8, plotting = F)
# compare the outputs
layout(matrix(1:4, nrow = 2), heights = c(0.8, 0.1))
par(mar = rep(0, 4))
plotImageArray(recoloredImage(r_hist), main = "Histogram")
plotColorPalette(r_hist$centers, r_hist$sizes)
plotImageArray(recoloredImage(r_k), main = "k-means")
plotColorPalette(r_k$centers, r_k$sizes)
# using histogram
r_hist <- recolorize(img_path, method = "hist", bins = 2, plotting = F)
# histogram uses bins^3 = 8, so we'll use 8 clusters for kmeans
r_k <- recolorize(img_path, method = "k", n = 8, plotting = F)
# compare the outputs
layout(matrix(1:4, nrow = 2), heights = c(0.8, 0.1))
par(mar = rep(0, 4))
plotImageArray(recoloredImage(r_hist), main = "Histogram")
plotColorPalette(r_hist$centers, r_hist$sizes)
plotImageArray(recoloredImage(r_k), main = "k-means")
plotColorPalette(r_k$centers, r_k$sizes)
# using histogram
r_hist <- recolorize(img_path, method = "hist", bins = 2, plotting = F)
# histogram uses bins^3 = 8, so we'll use 8 clusters for kmeans
r_k <- recolorize(img_path, method = "k", n = 8, plotting = F)
# compare the outputs
layout(matrix(1:4, nrow = 2), heights = c(0.8, 0.1))
par(mar = rep(0, 4))
plotImageArray(recoloredImage(r_hist), main = "Histogram")
plotColorPalette(r_hist$centers, r_hist$sizes)
plotImageArray(recoloredImage(r_k), main = "k-means")
plotColorPalette(r_k$centers, r_k$sizes)
# using histogram
r_hist <- recolorize(img_path, method = "hist", bins = 2, plotting = F)
# histogram uses bins^3 = 8, so we'll use 8 clusters for kmeans
r_k <- recolorize(img_path, method = "k", n = 8, plotting = F)
# compare the outputs
layout(matrix(1:4, nrow = 2), heights = c(0.8, 0.1))
par(mar = rep(0, 4))
plotImageArray(recoloredImage(r_hist), main = "Histogram")
plotColorPalette(r_hist$centers, r_hist$sizes)
plotImageArray(recoloredImage(r_k), main = "k-means")
plotColorPalette(r_k$centers, r_k$sizes)
# using histogram
r_hist <- recolorize(img_path, method = "hist", bins = 2, plotting = F)
# histogram uses bins^3 = 8, so we'll use 8 clusters for kmeans
r_k <- recolorize(img_path, method = "k", n = 8, plotting = F)
# compare the outputs
layout(matrix(1:4, nrow = 2), heights = c(0.8, 0.1))
par(mar = rep(0, 4))
plotImageArray(recoloredImage(r_hist), main = "Histogram")
plotColorPalette(r_hist$centers, r_hist$sizes)
plotImageArray(recoloredImage(r_k), main = "k-means")
plotColorPalette(r_k$centers, r_k$sizes)
# using histogram
r_hist <- recolorize(img_path, method = "hist", bins = 2, plotting = F)
# histogram uses bins^3 = 8, so we'll use 8 clusters for kmeans
r_k <- recolorize(img_path, method = "k", n = 8, plotting = F)
# compare the outputs
layout(matrix(1:4, nrow = 2), heights = c(0.8, 0.1))
par(mar = rep(1, 4))
plotImageArray(recoloredImage(r_hist), main = "Histogram")
plotColorPalette(r_hist$centers, r_hist$sizes)
plotImageArray(recoloredImage(r_k), main = "k-means")
plotColorPalette(r_k$centers, r_k$sizes)
r_hist <- recolorize(img_path, method = "hist", bins = 4)
r_k <- recolorize(img_path, method = "k", n = 64, plotting = FALSE)
plotColorClusters(r_hist$centers, r_hist$sizes)
plotColorClusters(r_k$centers, r_k$sizes)
plotColorClusters(r_hist$centers, r_hist$sizes, scaling = 15)
plotColorClusters(r_hist$centers, r_hist$sizes, plus = .05)
plotColorClusters(r_hist$centers, r_hist$sizes, plus = .1)
plotColorClusters(r_hist$centers, r_hist$sizes, plus = .5)
plotColorClusters(r_k$centers, r_k$sizes, plus = .5)
# fit 64 colors, both ways
r_hist <- recolorize(img_path, method = "hist", bins = 4, plotting = FALSE)
r_k <- recolorize(img_path, method = "k", n = 64, plotting = FALSE)
plotColorClusters(r_hist$centers, r_hist$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2))
plotColorClusters(r_k$centers, r_k$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2))
# fit 64 colors, both ways
r_hist <- recolorize(img_path, method = "hist", bins = 4, plotting = FALSE)
r_k <- recolorize(img_path, method = "k", n = 64, plotting = FALSE)
plotColorClusters(r_hist$centers, r_hist$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2),
main = "Histogram method")
plotColorClusters(r_k$centers, r_k$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2),
"k-means clustering")
# fit 64 colors, both ways
r_hist <- recolorize(img_path, method = "hist", bins = 4, plotting = FALSE)
r_k <- recolorize(img_path, method = "k", n = 64, plotting = FALSE)
plotColorClusters(r_hist$centers, r_hist$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2),
main = "Histogram method")
plotColorClusters(r_k$centers, r_k$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2),
"k-means clustering")
# fit 64 colors, both ways
r_hist <- recolorize(img_path, method = "hist", bins = 4, plotting = FALSE)
r_k <- recolorize(img_path, method = "k", n = 64, plotting = FALSE)
plotColorClusters(r_hist$centers, r_hist$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2),
main = "Histogram method")
plotColorClusters(r_k$centers, r_k$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2),
"k-means clustering")
# fit 64 colors, both ways
r_hist <- recolorize(img_path, method = "hist", bins = 4, plotting = FALSE)
r_k <- recolorize(img_path, method = "k", n = 64, plotting = FALSE)
plotColorClusters(r_hist$centers, r_hist$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2),
main = "Histogram method")
plotColorClusters(r_k$centers, r_k$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2),
"k-means clustering")
# fit 64 colors, both ways
r_hist <- recolorize(img_path, method = "hist", bins = 3, plotting = FALSE)
r_k <- recolorize(img_path, method = "k", n = 64, plotting = FALSE)
plotColorClusters(r_hist$centers, r_hist$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2),
main = "Histogram method")
plotColorClusters(r_k$centers, r_k$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2),
"k-means clustering")
# fit 64 colors, both ways
r_hist <- recolorize(img_path, method = "hist", bins = 4, plotting = FALSE)
r_k <- recolorize(img_path, method = "k", n = 64, plotting = FALSE)
plotColorClusters(r_hist$centers, r_hist$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2),
main = "Histogram method")
plotColorClusters(r_k$centers, r_k$sizes, plus = .5,
xlab = "red", ylab = "green", zlab = "blue",
mar = c(3, 3, 2, 2),
main = "k-means clustering")
k1 <- recolorize(img_path, "k", n = 10, plotting = F)
k2 <- recolorize(img_path, "k", n = 10, plotting = F)
k3 <- recolorize(img_path, "k", n = 10, plotting = F)
layout(1:3)
par(mar = rep(1, 4))
plotColorPalette(k1$centers, k1$sizes)
plotColorPalette(k2$centers, k2$sizes)
plotColorPalette(k3$centers, k3$sizes)
k1 <- recolorize(img_path, "k", n = 10, plotting = F)
k2 <- recolorize(img_path, "k", n = 10, plotting = F)
k3 <- recolorize(img_path, "k", n = 10, plotting = F)
layout(1:3)
par(mar = rep(1, 4))
plotColorPalette(k1$centers, k1$sizes)
plotColorPalette(k2$centers, k2$sizes)
plotColorPalette(k3$centers, k3$sizes)
k_list <- lapply(1:3, function(i) recolorize(img_path, "k", n = 10, plotting = F))
layout(1:3)
par(mar = rep(1, 4))
lapply(k_list, function(i) plotColorPalette(i$centers, i$sizes))
k_list <- lapply(as.list(1:3), function(i) recolorize(img_path, "k", n = 10, plotting = F))
k_list <- lapply(as.list(1:3), function(i) recolorize(img_path, "k", n = 10, plotting = F))
layout(1:3)
par(mar = rep(1, 4))
lapply(k_list, function(i) plotColorPalette(i$centers, i$sizes))
k_list <- lapply(list(1:3), function(i) recolorize(img_path, "k", n = 10, plotting = F))
layout(1:3)
par(mar = rep(1, 4))
lapply(k_list, function(i) plotColorPalette(i$centers, i$sizes))
k_list <- lapply(1:3, function(i) recolorize(img_path, "k", n = 10, plotting = F))
layout(1:3)
par(mar = rep(1, 4))
lapply(k_list, function(i) plotColorPalette(i$centers, i$sizes))
k_list <- lapply(1:3, function(i) recolorize(img_path, "k", n = 10, plotting = F))
layout(1:3)
par(mar = rep(1, 4))
lapply(k_list, function(i) plotColorPalette(i$centers, i$sizes))
options(rmarkdown.html_vignette.check_title = FALSE)
options(rmarkdown.html_vignette.check_title = FALSE)
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 50,
highlight_color = "cyan")
img
init_fit <- recolorize(img, method = "hist", bins = 2,
color_space = "sRGB")
```{r, fig.width = 4}
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 50,
highlight_color = "cyan")
refined_fit <- recluster(init_fit, similarity_cutoff = 45)
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 50,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 50,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 25,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 15,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 1,
size_condition = function(s) s <= 15,
highlight_color = "cyan")
final_fit <- editLayer(refined_fit, 3,
operation = "fill", px_size = 4)
final_fit <- editLayer(absorb_black, 3,
operation = "fill", px_size = 4)
absorb_black <- absorbLayer(refined_fit, layer_idx = 1,
size_condition = function(s) s <= 15,
highlight_color = "cyan")
final_fit <- editLayer(absorb_black, 3,
operation = "fill", px_size = 4)
absorb_red <- absorbLayer(refined_fit, layer_idx = 1,
size_condition = function(s) s <= 15,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 15,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 20,
highlight_color = "cyan")
absorb_red <- absorbLayer(refined_fit, layer_idx = 3,
size_condition = function(s) s <= 15,
highlight_color = "cyan")
final_fit <- editLayer(absorb_red, 3,
operation = "fill", px_size = 4)
```{r, fig.width=5}
final_fit <- editLayer(absorb_red, 3,
operation = "fill", px_size = 4)
ful <- readImage(system.file("extdata/fulgidissima.png", package = "recolorize"))
ful_blur <- blurImage(ful, "blur_anisotropic", amplitude = 10, sharpness = 0.5, plotting = FALSE)
# 2 color
ful1 <- suppressMessages(recolorize2(ful_blur, bins = 3, cutoff = 100,
color_space = "Lab", plotting = FALSE))
ful2 <- absorbLayer(ful1, 2, function(s) s <= 300, plotting=F)
# 5 color
ful3 <- recolorize2(ful_blur, bins = 3, cutoff = 60, color_space = "sRGB", plotting = F)
layout(matrix(1:3, nrow = 1))
plotImageArray(raster_to_array(ful1$original_img))
title(main = "original", font.main = 1)
plotImageArray(recoloredImage(ful2))
title(main = "map 1", font.main = 1)
plotImageArray(recoloredImage(ful3))
title(main="map 2", font.main = 1)
ful <- readImage(system.file("extdata/fulgidissima.png", package = "recolorize"))
ful_blur <- blurImage(ful, "blur_anisotropic", amplitude = 10, sharpness = 0.5, plotting = FALSE)
# 2 color
ful1 <- suppressMessages(recolorize2(ful_blur, bins = 3, cutoff = 100,
color_space = "Lab", plotting = FALSE))
ful2 <- absorbLayer(ful1, 2, function(s) s <= 300, plotting=F)
# 5 color
ful3 <- recolorize2(ful_blur, bins = 3, cutoff = 60, color_space = "sRGB", plotting = F)
layout(matrix(1:3, nrow = 1))
plotImageArray(raster_to_array(ful1$original_img))
title(main = "original", font.main = 1)
plotImageArray(recoloredImage(ful2))
title(main = "map 1", font.main = 1)
plotImageArray(recoloredImage(ful3))
title(main="map 2", font.main = 1)
ful <- readImage(system.file("extdata/fulgidissima.png", package = "recolorize"))
ful_blur <- blurImage(ful, "blur_anisotropic", amplitude = 10, sharpness = 0.5, plotting = FALSE)
# 2 color
ful1 <- suppressMessages(recolorize2(ful_blur, bins = 3, cutoff = 100,
color_space = "Lab", plotting = FALSE))
ful2 <- absorbLayer(ful1, 2, function(s) s <= 300, plotting=F)
# 5 color
ful3 <- recolorize2(ful_blur, bins = 3, cutoff = 60, color_space = "sRGB", plotting = F)
layout(matrix(1:3, nrow = 1))
plotImageArray(raster_to_array(ful1$original_img))
title(main = "original    ", font.main = 1)
plotImageArray(recoloredImage(ful2))
title(main = "map 1    ", font.main = 1)
plotImageArray(recoloredImage(ful3))
title(main="map 2    ", font.main = 1)
# using histogram
r_hist <- recolorize(img_path, method = "hist", bins = 2, plotting = T)
r_hist <- recolorize(img_path, method = "hist", bins = c(5, 2, 2), plotting = T)
# using histogram
r_hist <- recolorize(img_path, method = "hist", color_space = "Lab",
bins = 2, plotting = T)
r_hist <- recolorize(img_path,
method = "hist",
bins = c(5, 2, 2), plotting = T)
r_hist <- recolorize(img_path,
method = "hist",
bins = c(3, 2, 2), plotting = T)
r_hist <- recolorize(img_path,
method = "hist",
bins = c(3, 1, 2), plotting = T)
r_hist <- recolorize(img_path,
method = "hist",
bins = c(3, 2, 1), plotting = T)
#
r_hist_2 <- recolorize(img_path, method = "hist", color_space = "Lab",
bins = 2, plotting = T)
r_hist_322 <- recolorize(img_path,
method = "hist",
bins = c(3, 2, 2), plotting = T)
plotClusters(r_hist_2$centers, r_hist_2$sizes)
plotColorClusters(r_hist_2$centers, r_hist_2$sizes)
im1 <- system.file("extdata/ocellata.png", package = "recolorize")
im2 <- system.file("extdata/ephippigera.png", package = "recolorize")
# fit the first image
fit1 <- recolorize(im1)
# fit the second image using colors from the first
fit2 <- imposeColors(im2, fit1$centers, adjust_centers = FALSE)
recluster_results <- recluster(recolorize_defaults,
similarity_cutoff = 45)
corbetti_fit <- recolorize2(img, cutoff = 45)
# this is identical to running:
# fit1 <- recolorize(img, bins = 2)
# fit2 <- recluster(fit1, similarity_cutoff = 45)
img <- system.file("extdata/chongi.png", package = "recolorize")
chongi_fit <- recolorize2(img, cutoff = 45)
chongi_fit <- recolorize2(img, bins = 3 cutoff = 40)
chongi_fit <- recolorize2(img, bins = 3, cutoff = 40)
chongi_fit <- recolorize2(img, bins = 3, cutoff = 60)
chongi_fit <- recolorize2(img, bins = 3, cutoff = 50)
chongi_fit <- recolorize2(img, bins = 3, cutoff = 55)
# this is identical to running:
# fit1 <- recolorize(img, bins = 3)
# fit2 <- recluster(fit1, similarity_cutoff = 50)
chongi_fit <- recolorize2(img, bins = 3, cutoff = 45)
chongi_threshold <- thresholdRecolor(chongi_fit, pct = 0.05)
chongi_threshold <- thresholdRecolor(chongi_fit, pct = 0.1)
img <- system.file("extdata/fulgidissima.png", package = "recolorize")
ful_init <- recolorize2(img)
ful_init <- recolorize2(img, cutoff = 50)
ful_init <- recolorize2(img, color_space = "Lab", cutoff = 50)
ful_init <- recolorize2(img, bins = 3, cutoff = 50)
ful_init <- recolorize2(img, bins = 3, cutoff = 60)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 1000)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 500)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 400)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 300)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 200)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 250)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 250,
y_range = c(0, 0.8))
ful_init <- recolorize2(img, bins = 3, cutoff = 60, plotting = F)
ful_absorb <- absorbLayer(ful_init, layer_idx = 3,
function(s) s <= 250,
y_range = c(0, 0.8),
highlight_color = "cyan")
ful_clean <- editLayers(ful_absorb, layer_idx = c(2, 5),
operations = "fill", px_sizes = 2)
ful_clean <- editLayers(ful_absorb, layer_idx = c(2, 5),
operations = "fill", px_sizes = 3, plotting = T)
merge_fit <- mergeLayers(recolorize_defaults,
merge_list = list(1, 2,
c(3, 5),
c(4, 7),
c(6, 8)))
dist_original <- imDist(recluster_results$original_img,
recluster_results$recolored_img, color_space = "Lab")
dist_original <- imDist(img,
recluster_results$recolored_img, color_space = "Lab")
dist_original <- imDist(readImage(img),
recoloredImage(ful_clean), color_space = "Lab")
```{r, fig.width = 3}
dist_original <- imDist(readImage(img),
recoloredImage(ful_clean), color_space = "Lab")
```{r, fig.width = 3, fig.height=4}
dist_original <- imDist(readImage(img),
recoloredImage(ful_clean), color_space = "Lab")
dist_original <- imDist(readImage(img),
recoloredImage(ful_clean), color_space = "Lab")
imHeatmap(dist_original, colorRamps::ygobb(100))
imHeatmap(dist_original, colorRamps::primary.colors(100))
imHeatmap(dist_original, colorRamps::blue2green(100))
imHeatmap(dist_original, colorRamps::matlab.like(100))
imHeatmap(dist_original, colorRamps::cyan2yellow(100))
imHeatmap(dist_original, colorRamps::magenta2green(100))
imHeatmap(dist_original, colorRamps::green2red(100))
imHeatmap(dist_original, colorRamps::blue2yellow(100))
imHeatmap(dist_original, viridisLite::inferno(100))
# more plotting options
imHeatmap(dist_original, viridisLite::inferno(100), range = c(0, 130))
# calculates the distance matrix and plots the results
dist_original <- imDist(readImage(img),
recoloredImage(ful_clean), color_space = "sRGB")
# more plotting options - setting the range is important for comparing
# across images
imHeatmap(dist_original, viridisLite::inferno(100), range = c(0, 130))
# more plotting options - setting the range is important for comparing
# across images
imHeatmap(dist_original, viridisLite::inferno(100), range = c(0, sqrt(3)))
```{r, fig.width = 4, fig.height=3}
hist(dist_original, main = "sRGB distances", xlab = "Distance")
layout(matrix(1:10, nrow = 2, byrow = TRUE))
# 'overlay' is not always the clearest option, but it is usually the prettiest:
layers <- splitByColor(recluster_results, plot_method = "overlay")
# layers is a list of matrices, which we can just plot:
lapply(layers, image)
layout(matrix(1:10, nrow = 2, byrow = TRUE))
# 'overlay' is not always the clearest option, but it is usually the prettiest:
layers <- splitByColor(recluster_results, plot_method = "overlay")
# layers is a list of matrices, which we can just plot:
lapply(layers, plotImageArray)
layout(matrix(1:10, nrow = 2, byrow = TRUE))
# 'overlay' is not always the clearest option, but it is usually the prettiest:
layers <- splitByColor(recluster_results, plot_method = "overlay")
# layers is a list of matrices, which we can just plot:
lapply(layers, plotImageArray)
layout(matrix(1:10, nrow = 2, byrow = TRUE))
# 'overlay' is not always the clearest option, but it is usually the prettiest:
layers <- splitByColor(recluster_results, plot_method = "overlay")
# layers is a list of matrices, which we can just plot:
lapply(layers, plotImageArray)
# type = raster gets you a raster (like original_img); type = array gets you an
# image array
recolored_img <- recoloredImage(recolorize_defaults, type = "array")
plotImageArray(recolored_img)
?pavo::coldist
library(rlang); library(magrittr)
library(rlang)
steps <- {fit <- recolorize2(img, cutoff = 45)}
fit <- recolorize2(img,bins = 3, cutoff = 50)
fit2 <- editLayers(fit, c(2, 5),
operations = "fill", px_sizes = 3)
steps <- {
fit <- recolorize2(img,bins = 3, cutoff = 50)
fit2 <- editLayers(fit, c(2, 5),
operations = "fill", px_sizes = 3)
} %>% enexprs()
steps <- {
fit <- recolorize2(img,bins = 3, cutoff = 50)
fit2 <- editLayers(fit, c(2, 5),
operations = "fill", px_sizes = 3)
} %>% enexprs
steps
rc_werner <- wernerColor(recluster_results)
rc_werner <- wernerColor(recluster_results)
