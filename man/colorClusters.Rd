% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colorClusters.R
\name{colorClusters}
\alias{colorClusters}
\title{Generate color clusters from an image}
\usage{
colorClusters(pixel.matrix, method = "histogram", n = 10, bins = 3)
}
\arguments{
\item{pixel.matrix}{2D matrix of pixels to classify (rows = pixels, columns = channels).}

\item{method}{Binning scheme to use, one of either \code{kmeans} or \code{histogram}.
Produce very different results (see details).}

\item{n}{If \code{method = "kmeans"}, the number of colors to fit.}

\item{bins}{If \code{method = "histogram"}, either the number of bins per color
channel (if a single number is provided) OR a vector of length 3 with the
number of bins for each channel.}
}
\value{
A list with the following elements:
\enumerate{
\item \code{pixel.assignments}: A vector of color center assignments for each pixel.
\item \code{centers}: A matrix of color centers.
\item \code{sizes}: The number of pixels assigned to each cluster.
}
}
\description{
Clusters all the pixels in an image according to the specified method and
returns color centers, cluster assignments, and cluster sizes.
}
\details{
\code{\link[stats]kmeans} clustering tries to find the set of \code{n} clusters
that minimize overall distances. Histogram binning divides up color space
according to set breaks; for example, bins = 2 would divide the red, green,
and blue channels into 2 bins each (> 0.5 and < 0 .5), resulting in 8 possible
ranges. A white pixel (RGB = \link{1, 1, 1}) would fall into the R > 0.5, G > 0.5, B > 0.5 range.
The resulting centers represent the average color of all the pixels assigned to that bin.

K-means clustering can produce more intuitive results, but because it is iterative,
it will find slightly different clusters each time it is run. It also tends to divide
up similar colors that make up the majority of the image. Histogram binning
will produce the same results every time, and because it forces the bins to be dispersed
throughout color space, tends to better pick up small color details. Bins are also
comparable across images. However, this sometimes means returning empty bins
(i.e. the white bin will be empty if clustering a very dark image).
}
\examples{

# make a 100x100 'image' of random colors
img <- array(runif(30000), dim = c(100, 100, 3))
plotImageArray(img)

# pixel matrix
img.2d <- img
dim(img.2d) <- c(100 * 100, 3)

# histogram clustering
hist.clusters <- colorClusters(img.2d, method = "hist", bins = 2)
plotColorPalette(hist.clusters$centers)

# we can use a different number of bins for each channel
uneven.clusters <- colorClusters(img.2d, method = "hist",
                                 bins = c(3, 2, 1))
plotColorPalette(uneven.clusters$centers)

# using kmeans
kmeans.clusters <- colorClusters(img.2d, method = "kmeans",
                                 n = 5)
plotColorPalette(kmeans.clusters$centers)

}
