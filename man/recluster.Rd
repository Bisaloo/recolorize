% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recluster.R
\name{recluster}
\alias{recluster}
\title{Recluster color centers based on color similarity}
\usage{
recluster(
  recolorize.obj,
  similarity_cutoff = 60,
  n_final = NULL,
  plot_hclust = FALSE,
  resid = FALSE,
  plot_final = TRUE,
  adjust_centers = TRUE
)
}
\arguments{
\item{recolorize.obj}{A recolorize object from \code{\link{recolorize}},
\code{\link{recluster}}, or \code{\link{imposeColors}}.}

\item{similarity_cutoff}{Numeric similarity cutoff for grouping color centers
together. The range is in absolute Euclidean distance in CIE Lab space,
which means it is greater than 0-100, but cutoff values between 20 and 80
will usually work best. See details.}

\item{n_final}{Final number of desired colors; alternative to specifying
a similarity cutoff. Overrides \code{similarity_cutoff} if provided.}

\item{plot_hclust}{Logical. Plot the hierarchical clustering tree for
color similarity? Helpful for troubleshooting a cutoff.}

\item{resid}{Logical. Get final color fit residuals with
\code{\link{colorResiduals}}?}

\item{plot_final}{Logical. Plot the final color fit?}

\item{adjust_centers}{Logical. Once new color centers are determined and
fit to the image, adjust their centers to the average value of all
the pixels assigned to it? Unlike in \code{\link{imposeColors}},
this often has little effect.}
}
\value{
An \code{\link{imposeColors}} object with the re-fit color centers.
}
\description{
Color mapping (as with k-means or binning) often requires over-clustering in
order to recover details in an image. This can result in larger areas of
relatively uniform color being split into multiple colors, or in regions with
greater variation (due to lighting, shape, reflection, etc) being split into
multiple colors. This function clusters the color centers by visual
similarity (in CIE Lab space), then returns the re-clustered object. Users
can either set a similarity cutoff or a final number of colors. See examples.
}
\examples{
#' # get an image
corbetti <- system.file("extdata/corbetti.png", package = "recolorize")

# too many color centers
recolored_corbetti <- recolorize(corbetti, bins = 3)

# just enough!
# check previous plot for clustering cutoff
recluster.obj <- recluster(recolored_corbetti,
                           similarity_cutoff = 60,
                           plot_hclust = TRUE)

# compare to the result using k-means clustering and the same n:
kmeans.fit <- recolorize(corbetti, "k", n = 6)
# (you also get different clusters every time you run this)

# you get slightly different results if you prevent the center adjustment:
recluster.obj <- recluster(recolored_corbetti,
                           similarity_cutoff = 60,
                           adjust_centers = FALSE)

# a cutoff that's too severe will usually just produce "light",
# "dark", and "other" colors:
recluster.obj <- recluster(recolored_corbetti,
                           similarity_cutoff = 100,
                           plot_hclust = TRUE)

# we get the same result by specifying n_final = 6
recluster.obj <- recluster(recolored_corbetti,
                           n_final = 6,
                           plot_hclust = TRUE)

}
